url,title,volume,education,content,learning_outcome,literature,recommended_prereq,teaching_methods,workload,feedback_form,signup,exam_html,language,course_code,ects,level,duration,placement,schedule,capacity,study_board,department,faculty,course_coordinators,last_modified
https://kurser.ku.dk/course/ndak15006u/2024-2025,NDAK15006U Advanced Computer Systems (ACS),Volume 2024/2025,MSc Programme in Computer Science,"The overall purpose of this course is to offer students an understanding of techniques in computer systems with a focus on correctness and adherence to system properties, such as modularity and atomicity, while at the same time achieving high performance. The course exposes students to various system mechanisms, especially from distributed systems, database systems, and network systems. The course will explore the following aspects: System abstractions and design principles Modularity with clients and services Performance Atomicity and transactions Concurrency control and recovery Reliability, fault-tolerance, and redundancy Distributed protocols for replication Large-scale data processing","Knowledge to Describe the design of transactional and distributed systems, including techniques for modularity, performance, and fault tolerance. Explain how to employ strong modularity through a client-service abstraction as a paradigm to structure computer systems, while hiding the complexity of implementation from clients. Explain techniques for large-scale data processing. Skills to Implement systems that include mechanisms for modularity, atomicity, and fault tolerance. Structure and conduct experiments to evaluate a system's performance. Competences to Discuss design alternatives for a modular computer system, identifying desired system properties as well as describing mechanisms for improving performance while arguing for their correctness. Analyse protocols for concurrency control and recovery, as well as for distribution and replication. Apply the principles of large-scale data processing to analyse concrete information-processing problems.",See Absalon when the course is set up.,"- Basic principles of operating systems and/or databases. - Working knowledge of a standard programming language (Java, C#, etc), including concurrency and communication mechanisms. - Notions of UNIX / shell scripting are helpful, but not required. - Academic qualifications equivalent to a BSc degree is recommended.",Lectures and exercise sessions.,"{'Lectures': 42, 'Theory exercises': 70, 'Project work': 90, 'Exam': 4, 'Total': 206}","Written Continuous feedback during the course of the semester Written feedback is provided as comments to assignment solutions in Absalon. Continuous feedback is provided during exercise classes, where a time window of each class is allocated for Q&A with teaching assistants.","Self Service at KUnet As a exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>On-site written exam, 4 hours under invigilation</div></dd><dt>Type of assessment details</dt><dd>The on-site written exam is an ITX exam.
<br/>
See important information about ITX-exams at Study Information,
menu point: Exams -&gt; Exam types and rules -&gt; Written on-site
exams (ITX)</dd><dt>Exam registration requirements</dt><dd><p>4-6 take home-assignments, marked as pass/fail. To qualify for
the exam the assignments must be passed.</p></dd><dt>Aid</dt><dd>All aids allowed 
<div><p>This includes books, notes but no access to the
internet.</p><p>The University will make computers available to students at the
ITX-exam.</p><p>Students are not permitted to bring digital aids like computers,
tablets, calculators, mobile phones etc.</p><p>Books, notes, and similar materials can be brought in paper form
or uploaded before the exam and accessed digitally from the ITX
computer. Read more about this at Study Information.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>External censorship</dd><dt>Re-exam</dt><dd><p>If a student is not qualified for the exam, qualification
can be achieved by approval of equivalent assignments
submitted no later than 3 weeks before the re-exam.</p><p>The re-exam is a 4 hours written exam under
invigilation. </p><p><em>If 10 or fewer students are registered, then the re-exam
will be held as an oral examination of 25 minutes without
preparation.</em></p><p> </p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK15006U,"7,5 ECTS",Full Degree Master,1 block,Block 2,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Panagiotis Karras (4-7566706645696e33707a336970)'],Saved on the 05-07-2024
https://kurser.ku.dk/course/ndaa09023u/2024-2025,NDAA09023U Advanced Algorithms and Data Structures (AADS),Volume 2024/2025,MSc Programme in Computer Science MSc Programme in Computer Science (part time) MSc Programme in Computer Science with a minor subject MSc Programme in Bioinformatics,"Algorithms is about finding scalable solutions to computational problems, and the reliance is only increasing as we enter the world of Big Data. We want algorithms that solve problems efficiently relative to the input size. Exponential time is hopeless. We generally want polynomial time, and for large problems we need linear time. Sometimes we employ data structures that represent the input so that queries about it can be answered very efficiently. In this mandatory course, we will study the list of algorithmic topics below. Some of these topics are covered in more depth in more specialised elective courses.","Knowledge of Graph algorithms such as max flow. Data structures such as van Emde Boas Trees. NP-completeness. Exponential and parameterised algorithms for NP-hard problems. Approximation algorithms. Randomised algorithms. Computational geometry. Linear programming and optimisation. Skills to Analyse algorithms with respect to correctness and efficiency. Explain and use basic randomised algorithms. Recognise NP-hard problems and address them, e.g., using approximation algorithms. Explain and use algorithms for different abstract domains such as graphs and geometry. Formulate real-life problems as algorithmic problems and solve them. Competences to Analyse a computational problem in order to find an appropriate algorithmic approach to solve it.",See Absalon when the course is set up.,"It is assumed that the students are familiar with basic algorithms (sorting, selection, minimum spanning trees, shortest paths) and data structures (lists, stacks, binary trees, search trees, heaps). Academic qualifications equivalent to a BSc degree is recommended.",A mix of lectures and exercises.,"{'Lectures': 36, 'Preparation': 82, 'Theory exercises': 84, 'Exam': 4, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>On-site written exam, 4 hours</div></dd><dt>Type of assessment details</dt><dd>The on-site written exam is an ITX exam.
<br/>
See important information about ITX-exams at Study Information,
menu point: Exams -&gt; Exam types and rules -&gt; Written on-site
exams (ITX)</dd><dt>Exam registration requirements</dt><dd><p>The student must get 4 out of 6 weekly assignments approved
by the due date in order to qualify for the exam.</p></dd><dt>Aid</dt><dd>All aids allowed 
<div><p>As the exam is an ITX-exam, the University will make computers
available to students at the ITX-exam.</p><p>Students are not permitted to bring digital aids like computers,
tablets, calculators, mobile phones etc.</p><p>Books, notes, and similar materials can be brought in paper form
or uploaded before the exam and accessed digitally from the ITX
computer. Read more about this at Study Information</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>External censorship</dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p> </p><p>If 10 or fewer students register for the re-exam, it will be
changed to an oral examination of 25 minutes with no preparation
time.</p><p> </p><p>If a student is not yet qualified for the exam, they can qualify
by submitting equivalent assignments. These assignments must be
approved at least three weeks before the re-exam
date.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning outcome</p></div></div>",English,NDAA09023U,"7,5 ECTS",Full Degree Master,1 block,Block 2,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Amir Yehudayoff (4-6975816d486c7136737d366c73)'],Saved on the 20-01-2025
https://kurser.ku.dk/course/ndaa09023u/2025-2026,NDAA09023U Advanced Algorithms and Data Structures (AADS),Volume 2025/2026,MSc Programme in Computer Science MSc Programme in Computer Science (part time) MSc Programme in Computer Science with a minor subject MSc Programme in Bioinformatics,"Algorithms is about finding scalable solutions to computational problems, and the reliance is only increasing as we enter the world of Big Data. We want algorithms that solve problems efficiently relative to the input size. Exponential time is hopeless. We generally want polynomial time, and for large problems we need linear time. Sometimes we employ data structures that represent the input so that queries about it can be answered very efficiently. In this mandatory course, we will study the list of algorithmic topics below. Some of these topics are covered in more depth in more specialised elective courses.","Knowledge of Graph algorithms such as max flow. Data structures such as van Emde Boas Trees. NP-completeness. Exponential and parameterised algorithms for NP-hard problems. Approximation algorithms. Randomised algorithms. Computational geometry. Linear programming and optimisation. Skills to Analyse algorithms with respect to correctness and efficiency. Explain and use basic randomised algorithms. Recognise NP-hard problems and address them, e.g., using approximation algorithms. Explain and use algorithms for different abstract domains such as graphs and geometry. Formulate real-life problems as algorithmic problems and solve them. Competences to Analyse a computational problem in order to find an appropriate algorithmic approach to solve it.",See Absalon when the course is set up.,"It is assumed that the students are familiar with basic algorithms (sorting, selection, minimum spanning trees, shortest paths) and data structures (lists, stacks, binary trees, search trees, heaps). Academic qualifications equivalent to a BSc degree is recommended.",A mix of lectures and exercises.,"{'Lectures': 36, 'Preparation': 82, 'Theory exercises': 84, 'Exam': 4, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>On-site written exam, 4 hours under invigilation</div></dd><dt>Examination prerequisites</dt><dd><p>The student must get 4 out of 6 weekly assignments approved
by the due date in order to qualify for the exam.</p></dd><dt>Aid</dt><dd>Written aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>External censorship</dd><dt>Re-exam</dt><dd><p>Same as ordinary exam.</p><p>If 10 or fewer students register for the re-exam, it will be
changed to an oral examination of 25 minutes with no preparation
time.</p><p> </p><p>If a student is not yet qualified for the exam, they can qualify
by submitting equivalent assignments. These assignments must be
approved at least three weeks before the re-exam
date.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning outcome</p></div></div>",English,NDAA09023U,"7,5 ECTS",Full Degree Master,1 block,Block 2,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Jacob Holm (4-6d646b7243676c316e7831676e)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak15006u/2025-2026,NDAK15006U Advanced Computer Systems (ACS),Volume 2025/2026,MSc Programme in Computer Science,"The overall purpose of this course is to offer students an understanding of techniques in computer systems with a focus on correctness and adherence to system properties, such as modularity and atomicity, while at the same time achieving high performance. The course exposes students to various system mechanisms, especially from distributed systems, database systems, and network systems. The course will explore the following aspects: System abstractions and design principles Modularity with clients and services Performance Atomicity and transactions Concurrency control and recovery Reliability, fault-tolerance, and redundancy Distributed protocols for replication Large-scale data processing","Knowledge to Describe the design of transactional and distributed systems, including techniques for modularity, performance, and fault tolerance. Explain how to employ strong modularity through a client-service abstraction as a paradigm to structure computer systems, while hiding the complexity of implementation from clients. Explain techniques for large-scale data processing. Skills to Implement systems that include mechanisms for modularity, atomicity, and fault tolerance. Structure and conduct experiments to evaluate a system's performance. Competences to Discuss design alternatives for a modular computer system, identifying desired system properties as well as describing mechanisms for improving performance while arguing for their correctness. Analyse protocols for concurrency control and recovery, as well as for distribution and replication. Apply the principles of large-scale data processing to analyse concrete information-processing problems.",See Absalon when the course is set up.,"- Basic principles of operating systems and/or databases. - Working knowledge of a standard programming language (Java, C#, etc), including concurrency and communication mechanisms. - Notions of UNIX / shell scripting are helpful, but not required. - Academic qualifications equivalent to a BSc degree is recommended.",Lectures and exercise sessions.,"{'Lectures': 42, 'Theory exercises': 70, 'Project work': 90, 'Exam': 4, 'Total': 206}","Written Continuous feedback during the course of the semester Written feedback is provided as comments to assignment solutions in Absalon. Continuous feedback is provided during exercise classes, where a time window of each class is allocated for Q&A with teaching assistants.","Self Service at KUnet As a exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>On-site written exam, 4 hours under invigilation</div></dd><dt>Type of assessment details</dt><dd>The on-site written exam is an ITX exam.
<br/>
See important information about ITX-exams at Study Information,
menu point: Exams -&gt; Exam types and rules -&gt; Written on-site
exams (ITX)</dd><dt>Examination prerequisites</dt><dd><p>4-6 take home-assignments, marked as pass/fail. To qualify for
the exam the assignments must be passed.</p></dd><dt>Aid</dt><dd>All aids allowed except Generative AI and internet access 
<div><p>This includes books, notes but no access to the
internet.</p><p>The University will make computers available to students at the
ITX-exam.</p><p>Students are not permitted to bring digital aids like computers,
tablets, calculators, mobile phones etc.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>External censorship</dd><dt>Re-exam</dt><dd><p>If a student is not qualified for the exam, qualification
can be achieved by approval of equivalent assignments
submitted no later than 3 weeks before the re-exam.</p><p>The re-exam is a 4 hours written exam under
invigilation. </p><p><em>If 10 or fewer students are registered, then the re-exam
will be held as an oral examination of 25 minutes without
preparation.</em></p><p> </p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK15006U,"7,5 ECTS",Full Degree Master,1 block,Block 2,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Panagiotis Karras (4-72636d6342666b306d7730666d)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndaa09013u/2025-2026,NDAA09013U Advanced Programming (AP),Volume 2025/2026,MSc Programme in Computer Science,"The purpose of this course is to provide practical experience with sophisticated programming techniques and paradigms from a language-based perspective. The focus is on high-level programming and systematic construction of well-behaved programs. The course will focus on applicative (functional) and concurrent programming in Haskell, including some key associated libraries and frameworks.","At course completion, the successful student will have: Knowledge of Higher-level program structuring patterns for separating concerns. The basics of message-passing concurrency, and of how concurrent programming can be used for parallel programming. Program structuring principles and design patterns for dealing with software errors. Property-based testing of functions and stateful APIs Skills to Use program structuring principles and design patterns, such as monads, to structure the code and its potential effects such that there is a clear separation of concerns. Use a parser combinator library to write a parser for a medium-sized language with a given grammar, including changing the grammar so that it is on an appropriate form. Implement simple concurrent/distributed servers using message passing, with appropriate use of synchronous and asynchronous message passing. Use program structuring principles and design patterns for making reliable distributed systems in the presence of software errors. Construct systematic test suites for programs and modules, including property-based tests where relevant. Competences to Use advanced programming techniques to solve challenging, realistic problems. Write correct, efficient, and maintainable programs with clear separation of concerns. Give an assessment of their own code, based on a systematic evaluation of correctness, selection of algorithms and data structures, error scenarios, and elegance.",See Absalon when the course is set up.,"Programming ability in at least two substantially different languages, and familiarity with basic software-development principles (modularity, abstraction, systematic testing, ...) will be expected. Familiarity with basic functional programming is strongly recommended. It is strongly recommended to have some experience with functional programming, corresponding to Chapters 2, 4, 5, and 6 of ""Learn You a Haskell for Great Good"", for example. General academic qualifications equivalent to a BSc degree in Computer Science, Software Development, or a closely related subject, are recommended.","Lectures, mandatory assignments, exercise labs.","{'Lectures': 29, 'Preparation': 124, 'Practical exercises': 28, 'Exam': 25, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, 7 days</div></dd><dt>Type of assessment details</dt><dd>The exam is individual</dd><dt>Examination prerequisites</dt><dd><p>To qualify for the exam, the student must obtain at least
50% of the possible total points in the mandatory assignments. The
assignments may be submitted in groups of up to three
students</p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>External censorship</dd><dt>Re-exam</dt><dd><p>The re-exam is an individual written assignment, different from
the ordinary exam. The duration of the re-exam is
7 days.</p><p>If student did not already qualify for the ordinary
exam, qualification for the re-exam can be achieved by
(re)submission and approval of the mandatory assignments.</p><p>The assignments must be submitted no later than three weeks
before the re-exam date.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See learning outcome.</p></div></div>",English,NDAA09013U,"7,5 ECTS",Full Degree Master,1 block,Block 1,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Troels Henriksen (5-71847871835074793e7b853e747b)'],Saved on the 01-05-2025
https://kurser.ku.dk/course/ndaa09013u/2024-2025,NDAA09013U Advanced Programming (AP),Volume 2024/2025,MSc Programme in Computer Science,"The purpose of this course is to provide practical experience with sophisticated programming techniques and paradigms from a language-based perspective. The focus is on high-level programming and systematic construction of well-behaved programs. The course will focus on applicative (functional) programming in Haskell and concurrent programming in Erlang, including some key associated libraries and frameworks.","At course completion, the successful student will have: Knowledge of Higher-level program structuring patterns for separating concerns. The basics of message-passing concurrency, and of how concurrent programming can be used for parallel programming. Program structuring principles and design patterns for dealing with software errors. Property-based testing of functions and stateful APIs Skills to Use program structuring principles and design patterns, such as monads, to structure the code so that there is a clear separation of concerns. Use a parser combinator library to write a parser for a medium-sized language with a given grammar, including changing the grammar so that it is on an appropriate form. Implement simple concurrent/distributed servers using message passing, with appropriate use of synchronous and asynchronous message passing. Use program structuring principles and design patterns for making reliable distributed systems in the presence of software errors. Construct systematic test suites for programs and modules, including property-based tests where relevant. Competences to Quickly acquaint themselves with advanced programming techniques, from academic literature and/or technical documentation. Use those techniques to solve challenging, realistic problems. Write correct, efficient, and maintainable programs with clear separation of concerns. Give an assessment of their own code, based on a systematic evaluation of correctness, selection of algorithms and data structures, error scenarios, and elegance.",See Absalon when the course is set up.,"Programming ability in at least two substantially different languages, and familiarity with basic software-development principles (modularity, abstraction, systematic testing, ...) will be expected. It is strongly recommended to have some experience with functional programming, corresponding to Chapters 2, 4, 5, and 6 of ""Learn You a Haskell for Great Good"", for example. General academic qualifications equivalent to a BSc degree in Computer Science, Software Development, or a closely related subject, are recommended.","Lectures, mandatory assignments, exercise labs.","{'Lectures': 29, 'Preparation': 131, 'Practical exercises': 21, 'Exam': 25, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, 7 days</div></dd><dt>Type of assessment details</dt><dd>The exam is individual</dd><dt>Exam registration requirements</dt><dd><p>To qualify for the exam, the student must obtain at least
50% of the possible total points in the 6 mandatory assignments,
distributed as at least 16.7% in each of the two main parts of the
course.</p><p>The assignments may be submitted in groups of up to two
students.</p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>External censorship</dd><dt>Re-exam</dt><dd><p>The re-exam is an individual written assignment, different from
the ordinary exam.The duration of the re-exam is 5 days.</p><p>If student did not already qualify for the ordinary
exam, qualification for the re-exam can be achieved by
(re)submission and approval of the mandatory assignments.</p><p>The assignments must be submitted no later than three weeks
before the re-exam date.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See learning outcome.</p></div></div>",English,NDAA09013U,"7,5 ECTS",Full Degree Master,1 block,Block 1,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Troels Henriksen (5-63766a637542666b306d7730666d)'],Saved on the 11-04-2024
https://kurser.ku.dk/course/ndaa09023u/2025-2026,NDAA09023U Advanced Algorithms and Data Structures (AADS),Volume 2025/2026,MSc Programme in Computer Science MSc Programme in Computer Science (part time) MSc Programme in Computer Science with a minor subject MSc Programme in Bioinformatics,"Algorithms is about finding scalable solutions to computational problems, and the reliance is only increasing as we enter the world of Big Data. We want algorithms that solve problems efficiently relative to the input size. Exponential time is hopeless. We generally want polynomial time, and for large problems we need linear time. Sometimes we employ data structures that represent the input so that queries about it can be answered very efficiently. In this mandatory course, we will study the list of algorithmic topics below. Some of these topics are covered in more depth in more specialised elective courses.","Knowledge of Graph algorithms such as max flow. Data structures such as van Emde Boas Trees. NP-completeness. Exponential and parameterised algorithms for NP-hard problems. Approximation algorithms. Randomised algorithms. Computational geometry. Linear programming and optimisation. Skills to Analyse algorithms with respect to correctness and efficiency. Explain and use basic randomised algorithms. Recognise NP-hard problems and address them, e.g., using approximation algorithms. Explain and use algorithms for different abstract domains such as graphs and geometry. Formulate real-life problems as algorithmic problems and solve them. Competences to Analyse a computational problem in order to find an appropriate algorithmic approach to solve it.",See Absalon when the course is set up.,"It is assumed that the students are familiar with basic algorithms (sorting, selection, minimum spanning trees, shortest paths) and data structures (lists, stacks, binary trees, search trees, heaps). Academic qualifications equivalent to a BSc degree is recommended.",A mix of lectures and exercises.,"{'Lectures': 36, 'Preparation': 82, 'Theory exercises': 84, 'Exam': 4, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>On-site written exam, 4 hours under invigilation</div></dd><dt>Examination prerequisites</dt><dd><p>The student must get 4 out of 6 weekly assignments approved
by the due date in order to qualify for the exam.</p></dd><dt>Aid</dt><dd>Written aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>External censorship</dd><dt>Re-exam</dt><dd><p>Same as ordinary exam.</p><p>If 10 or fewer students register for the re-exam, it will be
changed to an oral examination of 25 minutes with no preparation
time.</p><p> </p><p>If a student is not yet qualified for the exam, they can qualify
by submitting equivalent assignments. These assignments must be
approved at least three weeks before the re-exam
date.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning outcome</p></div></div>",English,NDAA09023U,"7,5 ECTS",Full Degree Master,1 block,Block 2,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Jacob Holm (4-6d646b7243676c316e7831676e)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak15006u/2024-2025,NDAK15006U Advanced Computer Systems (ACS),Volume 2024/2025,MSc Programme in Computer Science,"The overall purpose of this course is to offer students an understanding of techniques in computer systems with a focus on correctness and adherence to system properties, such as modularity and atomicity, while at the same time achieving high performance. The course exposes students to various system mechanisms, especially from distributed systems, database systems, and network systems. The course will explore the following aspects: System abstractions and design principles Modularity with clients and services Performance Atomicity and transactions Concurrency control and recovery Reliability, fault-tolerance, and redundancy Distributed protocols for replication Large-scale data processing","Knowledge to Describe the design of transactional and distributed systems, including techniques for modularity, performance, and fault tolerance. Explain how to employ strong modularity through a client-service abstraction as a paradigm to structure computer systems, while hiding the complexity of implementation from clients. Explain techniques for large-scale data processing. Skills to Implement systems that include mechanisms for modularity, atomicity, and fault tolerance. Structure and conduct experiments to evaluate a system's performance. Competences to Discuss design alternatives for a modular computer system, identifying desired system properties as well as describing mechanisms for improving performance while arguing for their correctness. Analyse protocols for concurrency control and recovery, as well as for distribution and replication. Apply the principles of large-scale data processing to analyse concrete information-processing problems.",See Absalon when the course is set up.,"- Basic principles of operating systems and/or databases. - Working knowledge of a standard programming language (Java, C#, etc), including concurrency and communication mechanisms. - Notions of UNIX / shell scripting are helpful, but not required. - Academic qualifications equivalent to a BSc degree is recommended.",Lectures and exercise sessions.,"{'Lectures': 42, 'Theory exercises': 70, 'Project work': 90, 'Exam': 4, 'Total': 206}","Written Continuous feedback during the course of the semester Written feedback is provided as comments to assignment solutions in Absalon. Continuous feedback is provided during exercise classes, where a time window of each class is allocated for Q&A with teaching assistants.","Self Service at KUnet As a exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>On-site written exam, 4 hours under invigilation</div></dd><dt>Type of assessment details</dt><dd>The on-site written exam is an ITX exam.
<br/>
See important information about ITX-exams at Study Information,
menu point: Exams -&gt; Exam types and rules -&gt; Written on-site
exams (ITX)</dd><dt>Exam registration requirements</dt><dd><p>4-6 take home-assignments, marked as pass/fail. To qualify for
the exam the assignments must be passed.</p></dd><dt>Aid</dt><dd>All aids allowed 
<div><p>This includes books, notes but no access to the
internet.</p><p>The University will make computers available to students at the
ITX-exam.</p><p>Students are not permitted to bring digital aids like computers,
tablets, calculators, mobile phones etc.</p><p>Books, notes, and similar materials can be brought in paper form
or uploaded before the exam and accessed digitally from the ITX
computer. Read more about this at Study Information.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>External censorship</dd><dt>Re-exam</dt><dd><p>If a student is not qualified for the exam, qualification
can be achieved by approval of equivalent assignments
submitted no later than 3 weeks before the re-exam.</p><p>The re-exam is a 4 hours written exam under
invigilation. </p><p><em>If 10 or fewer students are registered, then the re-exam
will be held as an oral examination of 25 minutes without
preparation.</em></p><p> </p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK15006U,"7,5 ECTS",Full Degree Master,1 block,Block 2,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Panagiotis Karras (4-7566706645696e33707a336970)'],Saved on the 05-07-2024
https://kurser.ku.dk/course/ndaa09023u/2024-2025,NDAA09023U Advanced Algorithms and Data Structures (AADS),Volume 2024/2025,MSc Programme in Computer Science MSc Programme in Computer Science (part time) MSc Programme in Computer Science with a minor subject MSc Programme in Bioinformatics,"Algorithms is about finding scalable solutions to computational problems, and the reliance is only increasing as we enter the world of Big Data. We want algorithms that solve problems efficiently relative to the input size. Exponential time is hopeless. We generally want polynomial time, and for large problems we need linear time. Sometimes we employ data structures that represent the input so that queries about it can be answered very efficiently. In this mandatory course, we will study the list of algorithmic topics below. Some of these topics are covered in more depth in more specialised elective courses.","Knowledge of Graph algorithms such as max flow. Data structures such as van Emde Boas Trees. NP-completeness. Exponential and parameterised algorithms for NP-hard problems. Approximation algorithms. Randomised algorithms. Computational geometry. Linear programming and optimisation. Skills to Analyse algorithms with respect to correctness and efficiency. Explain and use basic randomised algorithms. Recognise NP-hard problems and address them, e.g., using approximation algorithms. Explain and use algorithms for different abstract domains such as graphs and geometry. Formulate real-life problems as algorithmic problems and solve them. Competences to Analyse a computational problem in order to find an appropriate algorithmic approach to solve it.",See Absalon when the course is set up.,"It is assumed that the students are familiar with basic algorithms (sorting, selection, minimum spanning trees, shortest paths) and data structures (lists, stacks, binary trees, search trees, heaps). Academic qualifications equivalent to a BSc degree is recommended.",A mix of lectures and exercises.,"{'Lectures': 36, 'Preparation': 82, 'Theory exercises': 84, 'Exam': 4, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>On-site written exam, 4 hours</div></dd><dt>Type of assessment details</dt><dd>The on-site written exam is an ITX exam.
<br/>
See important information about ITX-exams at Study Information,
menu point: Exams -&gt; Exam types and rules -&gt; Written on-site
exams (ITX)</dd><dt>Exam registration requirements</dt><dd><p>The student must get 4 out of 6 weekly assignments approved
by the due date in order to qualify for the exam.</p></dd><dt>Aid</dt><dd>All aids allowed 
<div><p>As the exam is an ITX-exam, the University will make computers
available to students at the ITX-exam.</p><p>Students are not permitted to bring digital aids like computers,
tablets, calculators, mobile phones etc.</p><p>Books, notes, and similar materials can be brought in paper form
or uploaded before the exam and accessed digitally from the ITX
computer. Read more about this at Study Information</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>External censorship</dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p> </p><p>If 10 or fewer students register for the re-exam, it will be
changed to an oral examination of 25 minutes with no preparation
time.</p><p> </p><p>If a student is not yet qualified for the exam, they can qualify
by submitting equivalent assignments. These assignments must be
approved at least three weeks before the re-exam
date.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning outcome</p></div></div>",English,NDAA09023U,"7,5 ECTS",Full Degree Master,1 block,Block 2,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Amir Yehudayoff (4-6975816d486c7136737d366c73)'],Saved on the 20-01-2025
https://kurser.ku.dk/course/ndak15006u/2025-2026,NDAK15006U Advanced Computer Systems (ACS),Volume 2025/2026,MSc Programme in Computer Science,"The overall purpose of this course is to offer students an understanding of techniques in computer systems with a focus on correctness and adherence to system properties, such as modularity and atomicity, while at the same time achieving high performance. The course exposes students to various system mechanisms, especially from distributed systems, database systems, and network systems. The course will explore the following aspects: System abstractions and design principles Modularity with clients and services Performance Atomicity and transactions Concurrency control and recovery Reliability, fault-tolerance, and redundancy Distributed protocols for replication Large-scale data processing","Knowledge to Describe the design of transactional and distributed systems, including techniques for modularity, performance, and fault tolerance. Explain how to employ strong modularity through a client-service abstraction as a paradigm to structure computer systems, while hiding the complexity of implementation from clients. Explain techniques for large-scale data processing. Skills to Implement systems that include mechanisms for modularity, atomicity, and fault tolerance. Structure and conduct experiments to evaluate a system's performance. Competences to Discuss design alternatives for a modular computer system, identifying desired system properties as well as describing mechanisms for improving performance while arguing for their correctness. Analyse protocols for concurrency control and recovery, as well as for distribution and replication. Apply the principles of large-scale data processing to analyse concrete information-processing problems.",See Absalon when the course is set up.,"- Basic principles of operating systems and/or databases. - Working knowledge of a standard programming language (Java, C#, etc), including concurrency and communication mechanisms. - Notions of UNIX / shell scripting are helpful, but not required. - Academic qualifications equivalent to a BSc degree is recommended.",Lectures and exercise sessions.,"{'Lectures': 42, 'Theory exercises': 70, 'Project work': 90, 'Exam': 4, 'Total': 206}","Written Continuous feedback during the course of the semester Written feedback is provided as comments to assignment solutions in Absalon. Continuous feedback is provided during exercise classes, where a time window of each class is allocated for Q&A with teaching assistants.","Self Service at KUnet As a exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>On-site written exam, 4 hours under invigilation</div></dd><dt>Type of assessment details</dt><dd>The on-site written exam is an ITX exam.
<br/>
See important information about ITX-exams at Study Information,
menu point: Exams -&gt; Exam types and rules -&gt; Written on-site
exams (ITX)</dd><dt>Examination prerequisites</dt><dd><p>4-6 take home-assignments, marked as pass/fail. To qualify for
the exam the assignments must be passed.</p></dd><dt>Aid</dt><dd>All aids allowed except Generative AI and internet access 
<div><p>This includes books, notes but no access to the
internet.</p><p>The University will make computers available to students at the
ITX-exam.</p><p>Students are not permitted to bring digital aids like computers,
tablets, calculators, mobile phones etc.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>External censorship</dd><dt>Re-exam</dt><dd><p>If a student is not qualified for the exam, qualification
can be achieved by approval of equivalent assignments
submitted no later than 3 weeks before the re-exam.</p><p>The re-exam is a 4 hours written exam under
invigilation. </p><p><em>If 10 or fewer students are registered, then the re-exam
will be held as an oral examination of 25 minutes without
preparation.</em></p><p> </p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK15006U,"7,5 ECTS",Full Degree Master,1 block,Block 2,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Panagiotis Karras (4-72636d6342666b306d7730666d)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndaa09013u/2025-2026,NDAA09013U Advanced Programming (AP),Volume 2025/2026,MSc Programme in Computer Science,"The purpose of this course is to provide practical experience with sophisticated programming techniques and paradigms from a language-based perspective. The focus is on high-level programming and systematic construction of well-behaved programs. The course will focus on applicative (functional) and concurrent programming in Haskell, including some key associated libraries and frameworks.","At course completion, the successful student will have: Knowledge of Higher-level program structuring patterns for separating concerns. The basics of message-passing concurrency, and of how concurrent programming can be used for parallel programming. Program structuring principles and design patterns for dealing with software errors. Property-based testing of functions and stateful APIs Skills to Use program structuring principles and design patterns, such as monads, to structure the code and its potential effects such that there is a clear separation of concerns. Use a parser combinator library to write a parser for a medium-sized language with a given grammar, including changing the grammar so that it is on an appropriate form. Implement simple concurrent/distributed servers using message passing, with appropriate use of synchronous and asynchronous message passing. Use program structuring principles and design patterns for making reliable distributed systems in the presence of software errors. Construct systematic test suites for programs and modules, including property-based tests where relevant. Competences to Use advanced programming techniques to solve challenging, realistic problems. Write correct, efficient, and maintainable programs with clear separation of concerns. Give an assessment of their own code, based on a systematic evaluation of correctness, selection of algorithms and data structures, error scenarios, and elegance.",See Absalon when the course is set up.,"Programming ability in at least two substantially different languages, and familiarity with basic software-development principles (modularity, abstraction, systematic testing, ...) will be expected. Familiarity with basic functional programming is strongly recommended. It is strongly recommended to have some experience with functional programming, corresponding to Chapters 2, 4, 5, and 6 of ""Learn You a Haskell for Great Good"", for example. General academic qualifications equivalent to a BSc degree in Computer Science, Software Development, or a closely related subject, are recommended.","Lectures, mandatory assignments, exercise labs.","{'Lectures': 29, 'Preparation': 124, 'Practical exercises': 28, 'Exam': 25, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, 7 days</div></dd><dt>Type of assessment details</dt><dd>The exam is individual</dd><dt>Examination prerequisites</dt><dd><p>To qualify for the exam, the student must obtain at least
50% of the possible total points in the mandatory assignments. The
assignments may be submitted in groups of up to three
students</p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>External censorship</dd><dt>Re-exam</dt><dd><p>The re-exam is an individual written assignment, different from
the ordinary exam. The duration of the re-exam is
7 days.</p><p>If student did not already qualify for the ordinary
exam, qualification for the re-exam can be achieved by
(re)submission and approval of the mandatory assignments.</p><p>The assignments must be submitted no later than three weeks
before the re-exam date.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See learning outcome.</p></div></div>",English,NDAA09013U,"7,5 ECTS",Full Degree Master,1 block,Block 1,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Troels Henriksen (5-71847871835074793e7b853e747b)'],Saved on the 01-05-2025
https://kurser.ku.dk/course/ndaa09013u/2024-2025,NDAA09013U Advanced Programming (AP),Volume 2024/2025,MSc Programme in Computer Science,"The purpose of this course is to provide practical experience with sophisticated programming techniques and paradigms from a language-based perspective. The focus is on high-level programming and systematic construction of well-behaved programs. The course will focus on applicative (functional) programming in Haskell and concurrent programming in Erlang, including some key associated libraries and frameworks.","At course completion, the successful student will have: Knowledge of Higher-level program structuring patterns for separating concerns. The basics of message-passing concurrency, and of how concurrent programming can be used for parallel programming. Program structuring principles and design patterns for dealing with software errors. Property-based testing of functions and stateful APIs Skills to Use program structuring principles and design patterns, such as monads, to structure the code so that there is a clear separation of concerns. Use a parser combinator library to write a parser for a medium-sized language with a given grammar, including changing the grammar so that it is on an appropriate form. Implement simple concurrent/distributed servers using message passing, with appropriate use of synchronous and asynchronous message passing. Use program structuring principles and design patterns for making reliable distributed systems in the presence of software errors. Construct systematic test suites for programs and modules, including property-based tests where relevant. Competences to Quickly acquaint themselves with advanced programming techniques, from academic literature and/or technical documentation. Use those techniques to solve challenging, realistic problems. Write correct, efficient, and maintainable programs with clear separation of concerns. Give an assessment of their own code, based on a systematic evaluation of correctness, selection of algorithms and data structures, error scenarios, and elegance.",See Absalon when the course is set up.,"Programming ability in at least two substantially different languages, and familiarity with basic software-development principles (modularity, abstraction, systematic testing, ...) will be expected. It is strongly recommended to have some experience with functional programming, corresponding to Chapters 2, 4, 5, and 6 of ""Learn You a Haskell for Great Good"", for example. General academic qualifications equivalent to a BSc degree in Computer Science, Software Development, or a closely related subject, are recommended.","Lectures, mandatory assignments, exercise labs.","{'Lectures': 29, 'Preparation': 131, 'Practical exercises': 21, 'Exam': 25, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, 7 days</div></dd><dt>Type of assessment details</dt><dd>The exam is individual</dd><dt>Exam registration requirements</dt><dd><p>To qualify for the exam, the student must obtain at least
50% of the possible total points in the 6 mandatory assignments,
distributed as at least 16.7% in each of the two main parts of the
course.</p><p>The assignments may be submitted in groups of up to two
students.</p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>External censorship</dd><dt>Re-exam</dt><dd><p>The re-exam is an individual written assignment, different from
the ordinary exam.The duration of the re-exam is 5 days.</p><p>If student did not already qualify for the ordinary
exam, qualification for the re-exam can be achieved by
(re)submission and approval of the mandatory assignments.</p><p>The assignments must be submitted no later than three weeks
before the re-exam date.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See learning outcome.</p></div></div>",English,NDAA09013U,"7,5 ECTS",Full Degree Master,1 block,Block 1,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Troels Henriksen (5-63766a637542666b306d7730666d)'],Saved on the 11-04-2024
https://kurser.ku.dk/course/ndak24003u/2024-2025,NDAK24003U Advanced Topics in Deep Learning (ATDL),Volume 2024/2025,MSc Programme in Computer Science,"This course will give you detailed insight into advanced deep learning methods and techniques, covering algorithms, theory and tools in this exciting and fast advancing field. This is an advanced topics course, and the exact list of topics will therefore change from year to year, depending on current trends in the literature. The course is on advanced topics, and it therefore has the introductory machine learning and deep learning courses as prerequisites.","Knowledge of Selected advanced topics in deep learning, including: state-or-the-art deep models in selected domains design of deep learning algorithms analysis of deep learning algorithms theory of deep learning The exact list of topics will depend on the teachers and trends in deep learning research. They will be announced on the course's Absalon page. Skills to Implement selected advanced deep learning algorithms using state-of-the-art tools Read and understand recent scientific literature in the field of deep learning Apply the knowledge obtained by reading scientific papers Compare deep learning methods and assess their potentials and shortcomings Competences to Understand advanced deep learning methods and techniques Design, optimize and use advanced deep models Plan and carry out self-learning",See Absalon.,"Academic qualifications equivalent to a BSc degree and the following courses are recommended: - Machine learning corresponding to the courses Machine Learning A (MLA) and Deep learning (DL). - Solid programming experience in Python. - Linear algebra corresponding to the course Linear Algebra in Computer Science (LinAlgDat). - Calculus corresponding to the courses Mathematical Analysis and Probability Theory for Computer Scientists (MASD) and Modelling and Analysis of Data (MAD), or Introduction to Mathematics for Science (MatIntroNat) and Mathematical Analysis (MatAn), or equivalent. - Statistics and probability theory corresponding to the course Probability Theory and Statistics (SS).","The course will mix lectures, exercise classes, and project work.","{'Lectures': 28, 'Class Instruction': 14, 'Preparation': 70, 'Exercises': 94, 'Total': 206}",Oral Individual Collective Continuous feedback during the course of the semester Peer feedback (Students give each other feedback),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment of 3-4 written assignments. All
assignments must be passed. The final grade is based on an overall
assessment.</dd><dt>Aid</dt><dd>All aids allowed 
<div><p>For programming tasks specifically, this includes AI-based
programming tools such as github copilot or similar.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Internal examiner.</div></dd><dt>Re-exam</dt><dd><p>The re-exam is 25 minutes oral examination, without preparation,
in full course syllabus.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning outcome</p></div></div>",English,NDAK24003U,"7,5 ECTS",Full Degree Master,1 block,Block 1,A,No limitation. Unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Stefan Sommer (6-84807e7e768351757a3f7c863f757c)'],Saved on the 14-02-2024
https://kurser.ku.dk/course/ndak24003u/2025-2026,NDAK24003U Advanced Topics in Deep Learning (ATDL),Volume 2025/2026,MSc Programme in Computer Science,"This course will give you detailed insight into advanced deep learning methods and techniques, covering algorithms, theory and tools in this exciting and fast advancing field. This is an advanced topics course, and the exact list of topics will therefore change from year to year, depending on current trends in the literature. The course is on advanced topics, and it therefore has the introductory machine learning and deep learning courses as prerequisites.","Knowledge of Selected advanced topics in deep learning, including: state-or-the-art deep models in selected domains design of deep learning algorithms analysis of deep learning algorithms theory of deep learning The exact list of topics will depend on the teachers and trends in deep learning research. They will be announced on the course's Absalon page. Skills to Implement selected advanced deep learning algorithms using state-of-the-art tools Read and understand recent scientific literature in the field of deep learning Apply the knowledge obtained by reading scientific papers Compare deep learning methods and assess their potentials and shortcomings Competences to Understand advanced deep learning methods and techniques Design, optimize and use advanced deep models Plan and carry out self-learning",See Absalon.,"Academic qualifications equivalent to a BSc degree and the following courses are recommended: - Machine learning corresponding to the courses Machine Learning A (MLA) and Deep learning (DL). - Solid programming experience in Python. - Linear algebra corresponding to the course Linear Algebra in Computer Science (LinAlgDat). - Calculus corresponding to the courses Mathematical Analysis and Probability Theory for Computer Scientists (MASD) and Modelling and Analysis of Data (MAD), or Introduction to Mathematics for Science (MatIntroNat) and Mathematical Analysis (MatAn), or equivalent. - Statistics and probability theory corresponding to the course Probability Theory and Statistics (SS).","The course will mix lectures, exercise classes, and project work.","{'Lectures': 28, 'Class Instruction': 14, 'Preparation': 70, 'Exercises': 94, 'Total': 206}",Oral Individual Collective Continuous feedback during the course of the semester Peer feedback (Students give each other feedback),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment of 3-4 written assignments and group
presentations. All assignments must be passed. The final grade is
based on an overall assessment.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Internal examiner.</div></dd><dt>Re-exam</dt><dd><p>The re-exam is 25 minutes oral examination, without preparation,
in the course syllabus.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning outcome</p></div></div>",English,NDAK24003U,"7,5 ECTS",Full Degree Master,1 block,Block 1,A,No limitation. Unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Mostafa Mehdipour Ghazi (5-6b6c657e6d44686d326f7932686f)'],Saved on the 17-03-2025
https://kurser.ku.dk/course/ndak15012u/2024-2025,NDAK15012U Advanced Topics in Human-Centred Computing (ATHCC),Volume 2024/2025,MSc Programme in Computer Science MSc Programme in Computer Science with a minor subject,"The aim of the course is to introduce participants to advanced topics in human-centred computing (HCC). HCC spans human-computer interaction, methods for prototyping and developing, and advanced interaction techniques. Participants will read current and classic research papers on HCC and discuss them in-depth. In addition, they will hand in four written assignments on parts of HCC that will be used to grade the course. The graded assignments focus on practicing the scientific tasks and skills discussed in class, for example designing evaluation protocols, analysing data, or surveying and synthesizing literature. The topics discussed in the course are intended to inspire students to pick topics for their master theses.","Knowledge of Human-centred computing (HCC). Current research topics in HCC, including but not limited to user experience, advanced user interfaces, and methods for prototyping and developing user interfaces. Research methods in HCC, including their relative benefits and drawbacks considering aspects of validity, reliability, generalisability, precision, and realism depending upon research questions and methods. Skills in Identifying and analysing scientific literature within HCC research domain. Synthesising the literature within a specific area or domain of HCC, focusing on human use of technology and the major phenomena surrounding it. Formulating and discussing open research questions and problems within the HCC area. Competences in Analysing scientific papers, including considerations on users, tasks, the context of use, and technologies. Discussing scientific work in HCC, in particular, the relation between construction of interfaces, understanding users, and conceptually-driven work. Identifying poor and good arguments in HCC.",Selected papers and book chapters. See Absalon when the course is set up.,"Some introduction to parts of human-centred computing, for instance through courses on Interaction Design, Human-Computer Interaction, User-centred Design, or the like. Academic qualifications equivalent to a BSc degree is recommended.",Classroom discussions and assignments,"{'Class Instruction': 14, 'Preparation': 78, 'Practical exercises': 14, 'Project work': 100, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment based on 4 assignments. The final grade
is given on an overall assessment of the assignments.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Resubmission of (possibly revised) assignments.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK15012U,"7,5 ECTS",Full Degree Master,1 block,Block 3,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Joanna Emilia Bergström (6-6d726471716443676c316e7831676e)'],Saved on the 15-02-2024
https://kurser.ku.dk/course/ndak15013u/2025-2026,NDAK15013U Advanced Topics in Image Analysis (ATIA),Volume 2025/2026,,"The purpose of this course is to expose the student to selected advanced topics in image analysis. The course will bring the student up to a level sufficient for master thesis work within image analysis and computer vision. Focus is not on specific topics, but rather on recent research trends.","Knowledge of Selected advanced topics in image analysis. Skills to Read, review and understand recent scientific papers. Apply the knowledge obtained by reading scientific papers. Compare methods from computer vision and image analysis and assess their potentials and shortcomings. Competences to Understand advanced methods, and to transfer the gained knowledge to solutions to small problems. Plan and carry out self-learning. Present the result of small assignments in scientific writing.",See Absalon.,"You should have passed the courses ""Machine Learning""/​“Statistical Methods for Machine Learning” and “Signal and Image Processing”, and “Advanced Deep Learning” or similar. Academic qualifications equivalent to a BSc degree is recommended.","The focus of this course is on problem-based learning, with a combination of lecturing, supervision, student presentations, and peer feedback. Active participation is expected.","{'Lectures': 14, 'Preparation': 90, 'Project work': 102, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment</div></dd><dt>Type of assessment details</dt><dd>The written assignment is an individual report written during
the course.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p><p> </p></div></div>",English,NDAK15013U,"7,5 ECTS",Full Degree Master,1 block,Block 1,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Jens Petersen (4-7f77847f4f73783d7a843d737a)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak15013u/2024-2025,NDAK15013U Advanced Topics in Image Analysis (ATIA),Volume 2024/2025,,"The purpose of this course is to expose the student to selected advanced topics in image analysis. The course will bring the student up to a level sufficient for master thesis work within image analysis and computer vision. Focus is not on specific topics, but rather on recent research trends.","Knowledge of Selected advanced topics in image analysis. Skills to Read, review and understand recent scientific papers. Apply the knowledge obtained by reading scientific papers. Compare methods from computer vision and image analysis and assess their potentials and shortcomings. Competences to Understand advanced methods, and to transfer the gained knowledge to solutions to small problems. Plan and carry out self-learning. Present the result of small assignments in scientific writing.",See Absalon.,"You should have passed the courses ""Machine Learning""/​“Statistical Methods for Machine Learning” and “Signal and Image Processing”, and “Advanced Deep Learning” or similar. Academic qualifications equivalent to a BSc degree is recommended.","The focus of this course is on problem-based learning, with a combination of lecturing, supervision, student presentations, and peer feedback. Active participation is expected.","{'Lectures': 14, 'Preparation': 90, 'Project work': 102, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment</div></dd><dt>Type of assessment details</dt><dd>The written assignment is an individual report written during
the course.</dd><dt>Aid</dt><dd>All aids allowed 
<div><p>The use of Large Language Models (LLM)/Large Multimodal Models
(LMM) – such as ChatGPT and GPT-4 – is permitted.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p><p> </p></div></div>",English,NDAK15013U,"7,5 ECTS",Full Degree Master,1 block,Block 1,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Jens Petersen (4-736b787343676c316e7831676e)'],Saved on the 26-04-2024
https://kurser.ku.dk/course/ndak15012u/2025-2026,NDAK15012U Advanced Topics in Human-Centred Computing (ATHCC),Volume 2025/2026,MSc Programme in Computer Science MSc Programme in Computer Science with a minor subject,"The aim of the course is to introduce participants to advanced topics in human-centred computing (HCC). HCC spans human-computer interaction, methods for prototyping and developing, and advanced interaction techniques. Participants will read current and classic research papers on HCC and discuss them in-depth. In addition, they will hand in four written assignments on parts of HCC that will be used to grade the course. The graded assignments focus on practicing the scientific tasks and skills discussed in class, for example designing evaluation protocols, analysing data, or surveying and synthesizing literature. The topics discussed in the course are intended to inspire students to pick topics for their master theses.","Knowledge of Human-centred computing (HCC). Current research topics in HCC, including but not limited to user experience, advanced user interfaces, and methods for prototyping and developing user interfaces. Research methods in HCC, including their relative benefits and drawbacks considering aspects of validity, reliability, generalisability, precision, and realism depending upon research questions and methods. Skills in Identifying and analysing scientific literature within HCC research domain. Synthesising the literature within a specific area or domain of HCC, focusing on human use of technology and the major phenomena surrounding it. Formulating and discussing open research questions and problems within the HCC area. Competences in Analysing scientific papers, including considerations on users, tasks, the context of use, and technologies. Discussing scientific work in HCC, in particular, the relation between construction of interfaces, understanding users, and conceptually-driven work. Identifying poor and good arguments in HCC.",Selected papers and book chapters. See Absalon when the course is set up.,"Some introduction to parts of human-centred computing, for instance through courses on Interaction Design, Human-Computer Interaction, User-centred Design, or the like. Academic qualifications equivalent to a BSc degree is recommended.",Classroom discussions and assignments,"{'Class Instruction': 14, 'Preparation': 78, 'Practical exercises': 14, 'Project work': 100, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment based on 4 assignments. The final grade
is given on an overall assessment of the assignments.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Resubmission of (possibly revised) assignments.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK15012U,"7,5 ECTS",Full Degree Master,1 block,Block 3,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Joanna Emilia Bergström (6-6e736572726544686d326f7932686f)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak15014u/2025-2026,NDAK15014U Advanced Topics in Machine Learning (ATML),Volume 2025/2026,MSc Programme in Computer Science MSc Programme in Statistics,"As machine learning models are often trained on data containing sensitive private information, it is important to provide reasonable privacy protection to the individuals whose data is included. This course focuses on advanced topics in privacy-preserving machine learning, with a focus on techniques that maintain data privacy without compromising the performance of the learning algorithm. Key concepts covered include differential privacy and federated learning. By the end, students will be prepared to pursue a master's thesis on privacy in machine learning. The course is relevant for computer science students as well as students from other studies with a good mathematical background, including Statistics, Actuarial Mathematics, Mathematics-Economics, Physics, etc. We assume that the students have previously passed Machine Learning A+B courses offered by DIKU. Topics covered include the following broad subjects Privacy attacks on machine learning models Defining Differential privacy and implementing differentially private algorithms, including differentially private Machine Learning algorithms. Learning-theoretic analysis of differentially private machine learning Design and Analysis of Federated learning algorithms WARNING: If you have not taken DIKU's Machine Learning A+B courses, please, check the ""Recommended Academic Qualifications"" box below. Machine Learning courses given at other places do not necessarily prepare you well for this course. It is not advised taking the course if you do not meet the academic qualifications.","Knowledge of Selected topics in private machine learning, including: design and analysis of private learning algorithms design and analysis of distributed learning algorithms Skills to Read and understand recent scientific literature in the field of privacy-preserving machine learning Apply the knowledge obtained by reading scientific papers Competences to Understand advanced methods, and apply the knowledge to practical problems Plan and carry out self-learning",See Absalon.,"The course requires a strong mathematical background. It is suitable for computer science master students, as well as students from mathematics (statistics, actuarial math, math-economics, etc) and physics study programmes. Students from other study programmes can verify if they have sufficient math and programming skills by solving the self-preparation assignment (below) and if in doubt contact the course organiser. It is assumed that the students have successfully passed Machine Learning A+B courses offered by the Department of Computer Science (DIKU). In case you have not taken them, please, go through the self-preparation material and solve the self-preparation assignment provided at https:/​/​sites.google.com/​diku.edu/​machine-learning-courses/​primal before the course starts. (For students with a strong mathematical background and some background in machine learning it should be possible to do the self-preparation within a couple of weeks.) It is strongly not advised taking the course if you do not meet the prerequisites. Programming Language: The programming language of the course is Python. The self-preparation assignment includes a few programming tasks; if you can code them in Python, you should be fine.","Lectures, class instructions and weekly home assignments.","{'Lectures': 28, 'Class Instruction': 14, 'Preparation': 70, 'Exercises': 94, 'Total': 206}",Written Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>6-8 weekly take-home assignments. The assignments must be
solved individually.
<br/><br/>
The course is based on weekly home assignments, which are graded
continuously over the course of the semester. The final grade is
given as a weighted average of the assignments, except the
assignment with the poorest assessment.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam consists of two parts:</p><p>1. The first part is handing in at least 5 of the course
assignments no later than 2 weeks before the oral part of the
re-exam
<br/>
2. The second part is a 30 minutes oral examination without
preparation in the course curriculum</p><p>The final grade will be given as an overall assessment of
the two re-exam parts.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p><p> </p></div></div>",English,NDAK15014U,"7,5 ECTS",Full Degree Master,1 block,Block 1,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Amartya Sanyal (4-67737967466a6f34717b346a71)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak19001u/2024-2025,NDAK19001U Advanced Topics in Natural Language Processing (ATNLP),Volume 2024/2025,,"The purpose of this course is to expose students to selected advanced topics in natural language processing. The course will bring the students up to a level sufficient for writing their master thesis in this area. The course is relevant for computer science students, as well as students from other studies with a good mathematical background, and students in the IT & Cognition programme. Please refer to the recommended academic qualifications. Examples of topics include: Natural language understanding Representation learning Multitask learning Learning from multiple modalities Deep generative models Reinforcement learning Generative adversarial learning * The exact list of topics in the current year will depend on the lecturers and trends in natural language processing research and will be announced on the course Absalon website. Feel free to contact the course organiser for details.","Knowledge of Selected advanced topics in natural language processing, including: design of learning algorithms evaluation of learning algorithms Skills to Read and understand recent scientific literature in the field of natural language processing Apply the knowledge obtained by reading scientific papers Compare methods and assess their potentials and shortcomings Competences to Understand advanced methods, and to transfer the gained knowledge to solutions to practical problems Plan and carry out self-learning",See Absalon.,"The course requires a strong mathematical background and an understanding of natural language processing. It is suitable for computer science master students, as well as students from mathematics (statistics, actuarial math, math-economics, etc), and IT & Cognition study programmes, provided the latter have a strong mathematical background. If you are a student from another study programme we strongly advise you to contact the course organiser and verify the suitability of your background prior to signing up for the course. It is assumed that the students have successfully passed either the “Natural Language Processing” course from KU, the “NLP and Deep Learning” course from ITU, or the “Language Processing 1” and “Language Processing 2” courses from KU. In case you have not passed one of these courses, please contact the course organiser to verify the suitability of your background prior to signing up for the course. Academic qualifications equivalent to a BSc degree is recommended.","Lectures and class instructions, student presentations, peer feedback, group projects, project presentations","{'Lectures': 28, 'Preparation': 60, 'Practical exercises': 33, 'Project work': 85, 'Total': 206}",Oral Individual Collective Continuous feedback during the course of the semester Peer feedback (Students give each other feedback),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>The assessment is based on the following five exams:
<br/><br/>
1. Completion of weekly quizzes.
<br/><br/>
2. Class presentation of an academic paper.
<br/><br/>
3. Peer feedback on the presentation(s) of the class presentations
of other students.
<br/><br/>
4. Group presentation of the group project to re-implement a model
from the literature.
<br/><br/>
5. An individual 5-page written report on student's efforts to
replicate the model and the results of their replication.
<br/><br/>
Each of the five exams is assessed and weighted individually, and
the final grade is determined based on this.</dd><dt>Aid</dt><dd>All aids allowed 
<div><p>For programming tasks specifically, the use of GitHub Copilot or
similar AI-based programming tools is permitted. The finite list of
allowed AI-tools will be announced in Absalon.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam consists of two exams:</p><p>1. An individual written report. The written report is to
be submitted no later than 3 weeks
before the re-exam week.</p><p>2. A 30 minute oral examination with no preparation time.</p><p>The two exams will be given an overall assessment</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See learning outcome</p></div></div>",English,NDAK19001U,"7,5 ECTS",Full Degree Master,1 block,Block 2,A2,54 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Desmond Elliott (2-71724d71763b78823b7178)'],Saved on the 16-02-2024
https://kurser.ku.dk/course/ndak15014u/2024-2025,NDAK15014U Advanced Topics in Machine Learning (ATML),Volume 2024/2025,MSc Programme in Computer Science MSc Programme in Statistics,"The purpose of the course is to expose students to selected advanced topics in theoretical machine learning. In particular, the course will focus on advanced theoretical tools for design and analysis of machine learning algorithms. We will also introduce differential privacy and differentially private learning algorithms. By the end of the course, students will be well-equipped to undertake a master's thesis in machine learning. The course is relevant for computer science students as well as students from other studies with a good mathematical background, including Statistics, Actuarial Mathematics, Mathematics-Economics, Physics, etc. We assume that the students have previously passed Machine Learning A+B courses offered by DIKU. The exact list of topics will depend on the lecturers and trends in machine learning research and will be announced on the course's Absalon page. Feel free to contact the course organiser for details. WARNING: If you have not taken DIKU's Machine Learning A+B courses, please, check the ""Recommended Academic Qualifications"" box below. Machine Learning courses given at other places do not necessarily prepare you well for this course. It is not advised taking the course if you do not meet the academic qualifications.","Knowledge of Selected advanced topics in machine learning, including: design of learning algorithms analysis of learning algorithms design and analysis of private learning algorithms The exact list of topics will depend on the teachers and trends in machine learning research. They will be announced on the course's Absalon page. Skills to Read and understand recent scientific literature in the field of machine learning Apply the knowledge obtained by reading scientific papers Compare machine learning methods and assess their potentials and shortcomings Competences to Understand advanced methods, and apply the knowledge to practical problems Plan and carry out self-learning",See Absalon.,"The course requires a strong mathematical background. It is suitable for computer science master students, as well as students from mathematics (statistics, actuarial math, math-economics, etc) and physics study programmes. Students from other study programmes can verify if they have sufficient math and programming skills by solving the self-preparation assignment (below) and if in doubt contact the course organiser. It is assumed that the students have successfully passed Machine Learning A+B courses offered by the Department of Computer Science (DIKU). In case you have not taken them, please, go through the self-preparation material and solve the self-preparation assignment provided at https:/​/​sites.google.com/​diku.edu/​machine-learning-courses/​atml before the course starts. (For students with a strong mathematical background and some background in machine learning it should be possible to do the self-preparation within a couple of weeks.) It is strongly not advised taking the course if you do not meet the prerequisites. Programming Language: The programming language of the course is Python. The self-preparation assignment includes a few programming tasks; if you can code them in Python, you should be fine.","Lectures, class instructions and weekly home assignments.","{'Lectures': 28, 'Class Instruction': 14, 'Preparation': 70, 'Exercises': 94, 'Total': 206}",Written Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>6-8 weekly take-home assignments. The assignments must be
solved individually.
<br/><br/>
The course is based on weekly home assignments, which are graded
continuously over the course of the semester. The final grade is
given as a weighted average of the assignments, except the
assignment with the poorest assessment.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam consists of two parts:</p><p>1. The first part is handing in at least 5 of the course
assignments no later than 2 weeks before the oral part of the
re-exam
<br/>
2. The second part is a 30 minutes oral examination without
preparation in the course curriculum</p><p>The final grade will be given as an overall assessment of
the two re-exam parts.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p><p> </p></div></div>",English,NDAK15014U,"7,5 ECTS",Full Degree Master,1 block,Block 1,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Amartya Sanyal (4-707c82704f73783d7a843d737a)'],Saved on the 14-02-2024
https://kurser.ku.dk/course/ndak24007u/2025-2026,NDAK24007U Advanced Topics in Programming Languages (ATPL),Volume 2025/2026,,"This course provides an introduction to state-of-the-art research within an area of programming languages involving theory, design, reasoning, implementation and/or application of programming languages. It acquaints students with performing and communicating independent research in project form. The course consists of lectures and subsequent group (2-4 persons) seminar presentations and mini-projects. The mini-projects may consist of theoretical investigations, software construction or a combination of these. Master's thesis projects will be offered in continuation of the course. The particular research topic(s) may change from year to year; see below for this year's topics. In 2024, the course is about *hybrid quantum-classical computing*. In the foreseeable future, addressing challenging real-world problems using future quantum computers will require a hybrid approach, combining massively parallel classical high-performance computing (HPC) on big data, with the delegation of intricate subproblems on relatively small data sets to quantum computers. The course covers hardware-agnostic high-level programming that combines quantum algorithms and classical data-parallel algorithms; an intermediate language for optimization and approximation; and code generation that targets a mix of quantum computers and GPUs. The course is planned to be conducted with access to state-of-the-art quantum and HPC hardware in partnership with IBM and Nvidia, and in collaboration with researchers in quantum chemistry where quantum computing promises to achieve quantum superiority on significant real-world problems first. Introductions to relevant background topics (multilinear algebra using braket notation, quantum computation, tensor networks, reversible computing, functional array programming) will be given in the beginning of the course.","Knowledge of Aspects of the dual nature of programs as software (to be executed) and as data (to be reasoned about, analyzed and transformed) The role of a precise (mathematical) semantics for a programming language in connection with analyzing and manipulating programs Principles of programming language design and implementation and how they are applied in connection with the topics under study Skills to Discuss properties such as correctness and performance and define what they mean in the specific topics under study Specify ideas and concepts as rigorous definitions and make falsifiable (or provable) statements about them Read, assess and communicate research papers Apply central results in the given area of studies Write a research paper Prepare and give a research paper presentation Competences to Develop a given project proposal into a project plan, execute it, and present the results","Research articles and excerpts from books, distributed electronically. See Absalon for a list of course literature.","The course is open to Master's degree students from computer science, mathematics, quantum information science, physics or similar programs. Introductions to/refreshers of relevant computer science and mathematics background will be given at the beginning of the course. The following are examples of useful, but not required, background or complementary courses. Advanced Programming (AP) Data Parallel Programming (DPP) Introduction to Quantum Computing (IQT) Introduction to Quantum Information Science (IQIS) Program Analysis and Transformation (PAT) Programming Massively Parallel Hardware (PMPH) Quantum Compilers (QC) Quantum Algorithms and Machine Learning (QAML) Semantics and Types (SaT)","The course progresses from teaching (lectures with exercises) to student seminar presentations and finally a group mini-project, which is the basis for the oral exam: ▪ Lecture phase: lectures and exercises, formation of project groups (3 weeks) ▪ Seminar phase: seminar presentations by project groups (3 weeks) ▪ Project phase: project work by project groups (3 weeks)","{'Lectures': 12, 'Preparation': 12, 'Exercises': 24, 'Project work': 96, 'Seminar': 48, 'Exam Preparation': 13, 'Exam': 1, 'Total': 206}","Oral Collective Continuous feedback during the course of the semester Peer feedback (Students give each other feedback) Students receive feedback from the instructors during the course on exercises, seminar presentations and project status reports (draft papers). Students give each other feedback during each others' seminar presentations and within the mini-project groups.","Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 30 minutes (no
preparation time)</div></dd><dt>Type of assessment details</dt><dd>Individual oral examination without preparation.
<br/><br/>
During the course the students will carry out a group-based
mini-project resulting in a co-authored report.
<br/><br/>
Format: An individual presentation of select parts of a group
report (i.e. mini-project report) followed by individual
examination in the course topics (see topics and learning
objectives) with special emphasis on the subject of the report the
student has co-authored.</dd><dt>Aid</dt><dd>Only certain aids allowed (see description below) 
<div><p>For the project and written report: All aids allowed.</p><p>For the oral exam: only slides (on a computer), the project
report and source code are permitted.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>Individual oral examination (30 minutes, without preparation)
based on
<br/>
submitted mini-project report and course topics (see topics and
learning objectives).</p><p>If a student has not previously handed in a mini-project
report this can be handed in as an individual mini-project report
no later than 1 week before the reexamination date.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK24007U,"7,5 ECTS",Full Degree Master,1 block,Block 2,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Fritz Henglein (8-6a6770696e676b7042666b306d7730666d)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak19001u/2025-2026,NDAK19001U Advanced Topics in Natural Language Processing (ATNLP),Volume 2025/2026,,"The purpose of this course is to expose students to selected advanced topics in natural language processing. The course will bring the students up to a level sufficient for writing their master thesis in this area. The course is relevant for computer science students, as well as students from other studies with a good mathematical background, and students in the IT & Cognition programme. Please refer to the recommended academic qualifications. Examples of topics include: Natural language understanding Representation learning Multitask learning Learning from multiple modalities Deep generative models Reinforcement learning Generative adversarial learning * The exact list of topics in the current year will depend on the lecturers and trends in natural language processing research and will be announced on the course Absalon website. Feel free to contact the course organiser for details.","Knowledge of Selected advanced topics in natural language processing, including: design of learning algorithms evaluation of learning algorithms Skills to Read and understand recent scientific literature in the field of natural language processing Apply the knowledge obtained by reading scientific papers Compare methods and assess their potentials and shortcomings Competences to Understand advanced methods, and to transfer the gained knowledge to solutions to practical problems Plan and carry out self-learning",See Absalon.,"The course requires a strong mathematical background and an understanding of natural language processing. It is suitable for computer science master students, as well as students from mathematics (statistics, actuarial math, math-economics, etc), and IT & Cognition study programmes, provided the latter have a strong mathematical background. If you are a student from another study programme we strongly advise you to contact the course organiser and verify the suitability of your background prior to signing up for the course. It is assumed that the students have successfully passed either the “Natural Language Processing” course from KU, the “NLP and Deep Learning” course from ITU, or the “Language Processing 1” and “Language Processing 2” courses from KU. In case you have not passed one of these courses, please contact the course organiser to verify the suitability of your background prior to signing up for the course. Academic qualifications equivalent to a BSc degree is recommended.","Lectures and class instructions, student presentations, peer feedback, group projects, project presentations","{'Lectures': 28, 'Preparation': 60, 'Practical exercises': 33, 'Project work': 85, 'Total': 206}",Oral Individual Collective Continuous feedback during the course of the semester Peer feedback (Students give each other feedback),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>The assessment is based on the following five exams:
<br/><br/>
1. Completion of weekly quizzes.
<br/><br/>
2. Class presentation of an academic paper.
<br/><br/>
3. Peer feedback on the presentation(s) of the class presentations
of other students.
<br/><br/>
4. Group presentation of the group project to re-implement a model
from the literature.
<br/><br/>
5. An individual 5-page written report on student's efforts to
replicate the model and the results of their replication.
<br/><br/>
Each of the five exams is assessed and weighted individually, and
the final grade is determined based on this.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam consists of two exams:</p><p>1. An individual written report. The written report is to
be submitted no later than 3 weeks
before the re-exam week.</p><p>2. A 30 minute oral examination with no preparation time.</p><p>The two exams will be given an overall assessment</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See learning outcome</p></div></div>",English,NDAK19001U,"7,5 ECTS",Full Degree Master,1 block,Block 2,A2,54 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Desmond Elliott (2-676843676c316e7831676e)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak24007u/2024-2025,NDAK24007U Advanced Topics in Programming Languages (ATPL),Volume 2024/2025,,"This course provides an introduction to state-of-the-art research within an area of programming languages involving theory, design, reasoning, implementation and/or application of programming languages. It acquaints students with performing and communicating independent research in project form. The course consists of lectures and subsequent group (2-4 persons) seminar presentations and mini-projects. The mini-projects may consist of theoretical investigations, software construction or a combination of these. Master's thesis projects will be offered in continuation of the course. The particular research topic(s) may change from year to year; see below for this year's topics. In 2024, the course is about *hybrid quantum-classical computing*. In the foreseeable future, addressing challenging real-world problems using future quantum computers will require a hybrid approach, combining massively parallel classical high-performance computing (HPC) on big data, with the delegation of intricate subproblems on relatively small data sets to quantum computers. The course covers hardware-agnostic high-level programming that combines quantum algorithms and classical data-parallel algorithms; an intermediate language for optimization and approximation; and code generation that targets a mix of quantum computers and GPUs. The course is planned to be conducted with access to state-of-the-art quantum and HPC hardware in partnership with IBM and Nvidia, and in collaboration with researchers in quantum chemistry where quantum computing promises to achieve quantum superiority on significant real-world problems first. Introductions to relevant background topics (multilinear algebra using braket notation, quantum computation, tensor networks, reversible computing, functional array programming) will be given in the beginning of the course.","Knowledge of Aspects of the dual nature of programs as software (to be executed) and as data (to be reasoned about, analyzed and transformed) The role of a precise (mathematical) semantics for a programming language in connection with analyzing and manipulating programs Principles of programming language design and implementation and how they are applied in connection with the topics under study Skills to Discuss properties such as correctness and performance and define what they mean in the specific topics under study Specify ideas and concepts as rigorous definitions and make falsifiable (or provable) statements about them Read, assess and communicate research papers Apply central results in the given area of studies Write a research paper Prepare and give a research paper presentation Competences to Develop a given project proposal into a project plan, execute it, and present the results","Research articles and excerpts from books, distributed electronically. See Absalon for a list of course literature.","The course is open to Master's degree students from computer science, mathematics, quantum information science, physics or similar programs. Introductions to/refreshers of relevant computer science and mathematics background will be given at the beginning of the course. The following are examples of useful, but not required, background or complementary courses. Advanced Programming (AP) Data Parallel Programming (DPP) Introduction to Quantum Computing (IQT) Introduction to Quantum Information Science (IQIS) Program Analysis and Transformation (PAT) Programming Massively Parallel Hardware (PMPH) Quantum Compilers (QC) Quantum Algorithms and Machine Learning (QAML) Semantics and Types (SaT)","The course progresses from teaching (lectures with exercises) to student seminar presentations and finally a group mini-project, which is the basis for the oral exam: ▪ Lecture phase: lectures and exercises, formation of project groups (3 weeks) ▪ Seminar phase: seminar presentations by project groups (3 weeks) ▪ Project phase: project work by project groups (3 weeks)","{'Lectures': 12, 'Preparation': 12, 'Exercises': 24, 'Project work': 96, 'Seminar': 48, 'Exam Preparation': 13, 'Exam': 1, 'Total': 206}","Oral Collective Continuous feedback during the course of the semester Peer feedback (Students give each other feedback) Students receive feedback from the instructors during the course on exercises, seminar presentations and project status reports (draft papers). Students give each other feedback during each others' seminar presentations and within the mini-project groups.","Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 30 minutes (no
preparation time)</div></dd><dt>Type of assessment details</dt><dd>Individual oral examination without preparation.
<br/><br/>
During the course the students will carry out a group-based
mini-project resulting in a co-authored report.
<br/><br/>
Format: An individual presentation of select parts of a group
report (i.e. mini-project report) followed by individual
examination in the course topics (see topics and learning
objectives) with special emphasis on the subject of the report the
student has co-authored.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>Individual oral examination (30 minutes, without preparation)
based on
<br/>
submitted mini-project report and course topics (see topics and
learning objectives).</p><p>If a student has not previously handed in a mini-project
report this can be handed in as an individual mini-project report
no later than 1 week before the reexamination date.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK24007U,"7,5 ECTS",Full Degree Master,1 block,Block 2,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Fritz Henglein (8-716e7770756e7277496d7237747e376d74)'],Saved on the 14-02-2024
https://kurser.ku.dk/course/ndak14007u/2025-2026,NDAK14007U Applied Programming (APP),Volume 2025/2026,MSc Programme in Bioinformatics MSc Programme in Physics MSc Programme in Statistics MSc Programme in Mathematics-Economics MSc Programme in Actuarial Mathematics,"The purpose of the course is to introduce the programming language C/C++, key programming concepts in a scientific context, and guidelines for documentation. The course will enable the student to develop the C/C++ code needed to process large amounts of scientific data that cannot be handled in interpreted languages such as MATLAB, Python, Maple, or R. The teaching will be based on examples from linear algebra. Contents: C/C++, problem modelling, control and data structures, encapsulation, the standard template library (STL), calls to external libraries and functions in C/C++ from, examples of interfacing to e.g. Python / R / MATLAB, the use of classes and libraries including an overview of libraries for scientific programming, and introduction to object-oriented programming.","Knowledge of Several programming paradigms; translated versus interpreted languages Imperative control structures and basic data structures Encapsulation of data states by means of structures and objects Basic computer architecture and hardware limitations Unit-tests Skills in Writing small programs in C/C++ Using templates / STL Compiling and using external/3rd. party libraries Implementing native C/C++ in a library which can be called from an interpreted language Finding, reading and using documentation for C/C++ libraries Using tools and structured approaches to locate and correct errors Competences in Translating a scientific problem into an executable program using (C/C++) to solve the problem Participating in software development involving a shared codebase",The first part of the course will rely on a book. The second part will rely on online resources. See Absalon for the specifics when the course is set up.,The course requires Linear Algebra including programming experience in one of the following languages: Python / R / MATLAB / Maple. Academic qualifications equivalent to a BSc degree is recommended.,"We use flipped classroom teaching with focus on solving practical exercises which is a methodology with only a few short lectures. Exercises classes and lectures will be held online. The course is based on assignments, solved at home and in class. We encourage all students to show up at the exercise classes. All assignments are a part of the evaluation, and the teachers will attend all exercise classes. Lectures will be given when general issues arise with respect to understanding. We will NOT give lectures covering the entire syllabus, and it is the students' responsibility to read the reading materials. However, the teachers are available to explain any topic in the syllabus at the students' request during exercise classes. We have a priori selected a few difficult topics which will be covered during exercises through short lectures.","{'Lectures': 4, 'Preparation': 38, 'Practical exercises': 84, 'Exam': 80, 'Total': 206}",Written Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment based on 4-6 written, individual
assignments.
<br/><br/>
All assignments have to be passed in order to pass the entire
course.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>passed/not passed</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>A 20 minutes oral examination without preparation, covering
the entire course syllabus.</p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK14007U,"7,5 ECTS",Full Degree Master,1 block,Block 4,CExercises classes and lectures will be held online.,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Abraham George Smith (3-646a7643676c316e7831676e)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndaa04010u/2025-2026,NDAA04010U Algoritmer og datastrukturer (AD),Årgang 2025/2026,Bacheloruddannelsen i datalogi Bacheloruddannelsen i datalogi-økonomi Bacheloruddannelsen i machine learning og datavidenskab Bacheloruddannelsen i kognitions- og datavidenskab,"Kursets formål er at præsentere en række algoritmiske paradigmer (herunder del og hersk, grådige algoritmer og dynamisk programmering), samt at introducere en række analyseværktøjer (korrekthed, køretid, pladsbehov). Fokus er på teoretisk analyse af algoritmer og datastrukturer. Kurset beskæftiger sig med algoritmiske problemer, der kan løses i polynomiel tid.","Viden Sorteringsalgoritmer. Algoritmer til løsning af optimeringsproblemer i grafer. Prioritetskøer og balancerede søgetræer. Amortiseret analyse. Rekursive algoritmer og rekursionsligninger. Grådige algoritmer. Dynamisk programmering. Geometriske algoritmer. Parallelle algoritmer. Færdigheder Genkende algoritmiske paradigmer så som rekursion, dynamisk programmering og grådige algoritmer. Foretage asymptotisk kompleksitetsanalyse af algoritmer og datastrukturer (herunder løsning af rekursionsligninger). Argumentere for korrekthed af algoritmer og datastrukturer vha. induktion (herunder formulering af løkkeinvarianter) samt direkte og modstridsbeviser. Kompetencer Anvende passende algoritmer og datastrukturer på nye problemstillinger. Anvende algoritmiske paradigmer på nye problemstillinger.","Cormen at al. Introduction to Algorithms, 4th edition. MIT Press. Se Absalon for øvrig kursuslitteratur.","Grundlæggende programmeringserfaring samt kendskab til grafer, bevisteknikker (f.eks. bevis ved induktion og modstridsbevis), asymptotisk notation og simple datastrukturer så som lister og stakke. Hvis du er i tvivl om, hvorvidt dine forudsætninger er tilstrækkelige, kan du kontakte den kursusansvarlige.",Forelæsninger og øvelsestimer.,"{'Forelæsninger': 28, 'Forberedelse (anslået)': 96, 'Teoretiske øvelser': 78, 'Eksamen': 4, 'I alt': 206}",Skriftlig Individuel Kollektiv Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig stedprøve, 4 timer med opsyn.</div></dd><dt>Eksamensforudsætninger</dt><dd><p>En forudsætning for at gå op til eksamen er aflevering og
godkendelse af 4 ud af 5 skriftlige opgaver, der stilles i løbet af
kurset (højst 1 opgave per uge).</p></dd><dt>Hjælpemidler</dt><dd>Skriftlige hjælpemidler tilladt</dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Som ordinær eksamen.</p><p>Kvalificering til reeksamen opnås ved aflevering og godkendelse
af 4 ud af 5 opgaver senest 3 uger før
reeksamen.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen</p></div></div>",,,,,,,,,,,,,Gemt den 24-02-2025
https://kurser.ku.dk/course/ndaa04010u/2024-2025,NDAA04010U Algoritmer og datastrukturer (AD),Årgang 2024/2025,Bacheloruddannelsen i datalogi Bacheloruddannelsen i datalogi-økonomi Bacheloruddannelsen i machine learning og datavidenskab Bacheloruddannelsen i kognitions- og datavidenskab,"Kursets formål er at præsentere en række algoritmiske paradigmer (herunder del og hersk, grådige algoritmer og dynamisk programmering), samt at introducere en række analyseværktøjer (korrekthed, køretid, pladsbehov). Fokus er på teoretisk analyse af algoritmer og datastrukturer. Kurset beskæftiger sig med algoritmiske problemer, der kan løses i polynomiel tid.","Viden Sorteringsalgoritmer. Algoritmer til løsning af optimeringsproblemer i grafer. Prioritetskøer og balancerede søgetræer. Amortiseret analyse. Rekursive algoritmer og rekursionsligninger. Grådige algoritmer. Dynamisk programmering. Geometriske algoritmer. Parallelle algoritmer. Færdigheder Genkende algoritmiske paradigmer så som rekursion, dynamisk programmering og grådige algoritmer. Foretage asymptotisk kompleksitetsanalyse af algoritmer og datastrukturer (herunder løsning af rekursionsligninger). Argumentere for korrekthed af algoritmer og datastrukturer vha. induktion (herunder formulering af løkkeinvarianter) samt direkte og modstridsbeviser. Kompetencer Anvende passende algoritmer og datastrukturer på nye problemstillinger. Anvende algoritmiske paradigmer på nye problemstillinger.","Cormen at al. Introduction to Algorithms, 4th edition. MIT Press. Se Absalon for øvrig kursuslitteratur.","Grundlæggende programmeringserfaring samt kendskab til grafer, bevisteknikker (f.eks. bevis ved induktion og modstridsbevis), asymptotisk notation og simple datastrukturer så som lister og stakke. Hvis du er i tvivl om, hvorvidt dine forudsætninger er tilstrækkelige, kan du kontakte den kursusansvarlige.",Forelæsninger og øvelsestimer.,"{'Forelæsninger': 28, 'Forberedelse (anslået)': 96, 'Teoretiske øvelser': 78, 'Eksamen': 4, 'I alt': 206}",Skriftlig Individuel Kollektiv Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig stedprøve, 4 timer med opsyn.</div></dd><dt>Prøveformsdetaljer</dt><dd>Den skriftlige stedprøve er en ITX-eksamen.
<br/>
Se vigtig information om ITX-stedprøver på Studieinformation under
punktet: Eksamen -&gt; Eksamensform og regler -&gt; Skriftlig
stedprøve (ITX-prøve)</dd><dt>Krav til indstilling til eksamen</dt><dd><p>En forudsætning for at gå op til eksamen er aflevering og
godkendelse af 4 ud af 5 skriftlige opgaver, der stilles i løbet af
kurset (højst 1 opgave per uge).</p></dd><dt>Hjælpemidler</dt><dd>Skriftlige hjælpemidler tilladt 
<div><p> </p><p>Bøger, noter og lignende kan medbringes i papirform eller
uploades før eksamen og tilgås digitalt fra ITX-computeren. Læs
mere om dette på Studieinformation.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Som ordinær eksamen.</p><p>Kvalificering til reeksamen opnås ved aflevering og godkendelse
af 4 ud af 5 opgaver senest 3 uger før
reeksamen.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen</p></div></div>",,,,,,,,,,,,,Gemt den 31-01-2025
https://kurser.ku.dk/course/ndak16001u/2024-2025,NDAK16001U Approximation Algorithms (APX),Volume 2024/2025,MSc Programme in Computer Science,"Many important computational problems are difficult or impossible to solve exactly or optimally. For example, many optimization problems are NP-hard, some problems have inputs so large that exact algorithms are infeasible, and some problems require decisions to be made on-line, based on incomplete information. Instead, we use approximation algorithms to efficiently find solutions that are provably close in quality to the exact or optimal solutions. The course covers techniques for designing and analysing approximation algorithms for various computational problems, focusing on optimization algorithms, sublinear algorithms, and on-line algorithms. It is aimed at students who like to use mathematics to design and analyze algorithms. The topics mentioned under Learning Outcome are covered in lectures and worked on in exercises in order to develop the necessary skills and competences.","Knowledge of Greedy algorithms Rounding data and dynamic programming Rounding of linear programs and semidefinite programs Streaming algorithms for distinct elements, multisets, and ordered sets Competitive analysis for on-line algorithm Skills in Proving approximation guarantees for optimization, streaming, and on-line algorithms Using linear programming as a basis for designing approximation algorithms Using randomization to design approximation algorithms Competences to Extending approximation algorithms seen in the course to a more general setting, or to related settings. Apply approximation algorithms seen in the course to solve new computational problems. Communicate effectively about the theory of approximation algorithms, both for accessing advanced topics from the research literature and for convincingly presenting the results of own work.",Expected to be: The Design of Approximation Algorithms by Shmoys and Williamson. Small Summaries for Big Data by Cormode and Yi. Various lecture notes or papers. The books are currently available for free online.,"The students should be comfortable with formal, mathematical reasoning, as the course uses the power of mathematics to understand and prove good performance of algorithms. It is assumed that the students have completed an algorithms course such as Advanced Algorithms and Data Structures, and are comfortable using mathematical proofs in the analysis of algorithms. Academic qualifications equivalent to a BSc degree is recommended.",Lectures and compulsory assignments.,"{'Lectures': 36, 'Preparation': 85, 'Exercises': 84, 'Exam': 1, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, 30 minutes (including grading)</div></dd><dt>Type of assessment details</dt><dd>The oral examination is with 30 minutes preparation.</dd><dt>Exam registration requirements</dt><dd><p>The student must solve mandatory assignments during the
course. Assignments will be given each week and are due in the
following week. 4 out of 6 assignments must be submitted
timely and approved in order to qualify for the exam. Some
assignments will be solved in groups, other individually.</p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam has the same form as the ordinary exam.</p><p>If the student is not yet qualified to participating in the
exam, then qualification can be achieved by handing-in
the missing/not-approved assignments. These assignments must
be submitted no later than three weeks before the
week of the re-exam in order to qualify for the re-exam.</p><p> </p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK16001U,"7,5 ECTS",Full Degree Master,1 block,Block 4,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Srikanth Srinivasan (4-7a797a79476b7035727c356b72)'],Saved on the 25-06-2024
https://kurser.ku.dk/course/ndak16001u/2025-2026,NDAK16001U Approximation Algorithms (APX),Volume 2025/2026,MSc Programme in Computer Science,"Many important computational problems are difficult or impossible to solve exactly or optimally. For example, many optimization problems are NP-hard, some problems have inputs so large that exact algorithms are infeasible, and some problems require decisions to be made on-line, based on incomplete information. Instead, we use approximation algorithms to efficiently find solutions that are provably close in quality to the exact or optimal solutions. The course covers techniques for designing and analysing approximation algorithms for various computational problems, focusing on optimization algorithms in many contexts. It is aimed at students who like to use mathematics to design and analyze algorithms. The topics mentioned under Learning Outcome are covered in lectures and worked on in exercises in order to develop the necessary skills and competences.","Knowledge of Greedy algorithms Rounding data and dynamic programming Rounding of linear programs and semidefinite programs The multiplicative weights method for solving online problems Skills in Proving approximation guarantees for optimization and online algorithms Using linear programming as a basis for designing approximation algorithms Using randomization to design approximation algorithms Competences to Extending approximation algorithms seen in the course to a more general setting, or to related settings. Apply approximation algorithms seen in the course to solve new computational problems. Communicate effectively about the theory of approximation algorithms, both for accessing advanced topics from the research literature and for convincingly presenting the results of own work.",Expected to be: The Design of Approximation Algorithms by Shmoys and Williamson. Various lecture notes or papers. The book is currently available for free online.,"The students should be comfortable with formal, mathematical reasoning, as the course uses the power of mathematics to understand and prove good performance of algorithms. It is assumed that the students have completed an algorithms course such as Advanced Algorithms and Data Structures, and are comfortable using mathematical proofs in the analysis of algorithms. Academic qualifications equivalent to a BSc degree is recommended.",Lectures and compulsory assignments.,"{'Lectures': 36, 'Preparation': 85, 'Exercises': 84, 'Exam': 1, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, 30 minutes (including grading)</div></dd><dt>Type of assessment details</dt><dd>The oral examination is with 30 minutes preparation.</dd><dt>Examination prerequisites</dt><dd><p>The student must solve mandatory assignments during the
course. Assignments will be given each week and are due in the
following week. 4 out of 6 assignments must be submitted
timely and approved in order to qualify for the exam. Some
assignments will be solved in groups, other individually.</p></dd><dt>Aid</dt><dd>All aids allowed except Generative AI and internet access</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam has the same form as the ordinary exam.</p><p>If the student is not yet qualified to participating in the
exam, then qualification can be achieved by handing-in
the missing/not-approved assignments. These assignments must
be submitted no later than three weeks before the
week of the re-exam in order to qualify for the re-exam.</p><p> </p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK16001U,"7,5 ECTS",Full Degree Master,1 block,Block 4,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Srikanth Srinivasan (4-7a797a79476b7035727c356b72)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak14007u/2024-2025,NDAK14007U Applied Programming (APP),Volume 2024/2025,MSc Programme in Bioinformatics MSc Programme in Physics MSc Programme in Statistics MSc Programme in Mathematics-Economics,"The purpose of the course is to introduce the programming language C/C++, key programming concepts in a scientific context, and guidelines for documentation. The course will enable the student to develop the C/C++ code needed to process large amounts of scientific data that cannot be handled in interpreted languages such as MATLAB, Python, Maple, or R. The teaching will be based on examples from linear algebra. Contents: C/C++, problem modelling, control and data structures, encapsulation, the standard template library (STL), calls to external libraries and functions in C/C++ from, examples of interfacing to e.g. Python / R / MATLAB, the use of classes and libraries including an overview of libraries for scientific programming, and introduction to object-oriented programming.","Knowledge of Several programming paradigms; translated versus interpreted languages Imperative control structures and basic data structures Encapsulation of data states by means of structures and objects Basic computer architecture and hardware limitations Unit-tests Skills in Writing small programs in C/C++ Using templates / STL Compiling and using external/3rd. party libraries Implementing native C/C++ in a library which can be called from an interpreted language Finding, reading and using documentation for C/C++ libraries Using tools and structured approaches to locate and correct errors Competences in Translating a scientific problem into an executable program using (C/C++) to solve the problem Participating in software development involving a shared codebase",The first part of the course will rely on a book. The second part will rely on online resources. See Absalon for the specifics when the course is set up.,The course requires Linear Algebra including programming experience in one of the following languages: Python / R / MATLAB / Maple. Academic qualifications equivalent to a BSc degree is recommended.,"We use flipped classroom teaching with focus on solving practical exercises which is a methodology with only a few short lectures. Exercises classes will primarily be held online and lectures can also occur online. The course is based on assignments, which are solved at home and in class. We encourage all students to show up at the exercise classes. All assignments are a part of the evaluation, and the teachers will be present during all exercise classes. Lectures will be given when general issues arise with respect to understanding. We will NOT give lectures covering the entire syllabus, and it is the students' responsibility to read the reading materials. However, the teachers are available to explain any topic in the syllabus at the students' request during exercise classes. We have a priori selected a few difficult topics which will be covered during exercises through short lectures.","{'Lectures': 4, 'Preparation': 38, 'Practical exercises': 84, 'Exam': 80, 'Total': 206}",Written Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment based on 4-6 written, individual
assignments.
<br/><br/>
All assignments have to be passed in order to pass the entire
course.</dd><dt>Aid</dt><dd>All aids allowed 
<div><p>The use of Large Language Models (LLM)/Large Multimodal Models
(LMM) – such as ChatGPT and GPT-4 – is permitted.</p></div></dd><dt>Marking scale</dt><dd>passed/not passed</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>A 20 minutes oral examination without preparation, covering
the entire course syllabus.</p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK14007U,"7,5 ECTS",Full Degree Master,1 block,Block 4,CExercises classes and lectures will be held online.,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Abraham George Smith (3-6f75814e72773c79833c7279)'],Saved on the 12-02-2025
https://kurser.ku.dk/course/nbik10005u/2025-2026,NBIK10005U Bioinformatics Project 1,Volume 2025/2026,MSc Programme in Bioinformatics,The exact content is decided with the supervisor.,"Knowledge: The aim of these projects is to get a deep understanding of a bioinformatics topic often related to a research project. This is often a practical biological application using the computational methods you have been introduced to in other courses, e.g. testing a biological hypothesis on massive data sets. It may also be the implementation of a new method using python or some other programming language or an entirely theoretical project. Skills: Write a bioinformatics report Search for background material Select and use relevant bioinformatics tools for a specific project Competences: The student will obtain these general competences Ability to do project work Writing a scientific report Presenting work orally Analyze complex real-world problems",See Absalon.,"Knowledge within bioinformatics. Programming at least at the level of ""Linux and Python Programming"" is recommended. Academic qualifications equivalent to a BSc degree is recommended.",Individual project with a supervisor.,"{'Preparation': 19, 'Project work': 176, 'Guidance': 10, 'Exam': 1, 'Total': 206}",Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade) Written and/or oral feedback during the project work. Oral feedback at the exam.,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 45 minutes (no
preparation time)</div></dd><dt>Type of assessment details</dt><dd>Written assignment, min. 2000 words
<br/>
- Ongoing preparation throughout the course with submission at the
end of the course.
<br/><br/>
The student must submit the written assignment in order to
participate in the subsequent oral examination.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p> </p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>In order to achieve the grade 12 the student must</p><ul><li>Complete a project in bioinformatics, which adresses an
important problem and presents a solution, or a partial solution,
at an adequate level.</li><li>Identify relevant literature and understand the parts relevant
for their project.</li><li>Write a scientifically precise report, which motivates their
work, clearly presents the background, presents the methods and
results of the work without errors, discusses the implications of
the results and draws scientifically sound conclusions based on the
work.</li><li>Present the work in a clear and scientifically satisfactory
way, including motivation, methods, results, main achievements and
future outlook.</li><li>Answer questions about any part of the project in reasonable
depth and explain the core methods and results of the project in
great detail.</li><li>Put the work in context and discuss possible future directions
of research in the area and judge the relevance of such
work.</li></ul></div></div>",English,NBIK10005U,"7,5 ECTS",Full Degree Master,1 block,"Block 1, Block 2, Block 3, Block 4 And Summer",Meetings with supervisor.,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board for the Biological Area'],"['Department of Biology', 'Department of Computer Science']",['Faculty of Science'],['Rasmus Heller (7-796f6c73736c794769707635727c356b72)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak18001u/2024-2025,NDAK18001U Big Data Systems (BDS),Volume 2024/2025,,"The goal of this course is to give the participants an understanding of the technologies in computer systems for Big Data management. It covers both traditional methods used in parallel database systems, real-time stream processing systems, transactional database systems, as well as modern technologies of cloud computing and massively parallel data analysis platforms. The following main topics are contained in the course: Parallel database systems; Massively parallel data analysis; Fast stream processing systems; Distributed transaction processing; Fault-tolerance; Scalability; Event-based systems.","Knowledge of Theories and techniques in parallel database systems. Theories and techniques in data stream processing systems. Theories and techniques in distributed transactional systems. Design of and trade-offs in the modern systems introduced in the course. Skills to Develop programs and apply tools for big data management and analysis and deploy them on a cloud computing platform. Report work done with Big Data systems in a clear and precise language, and in a structured fashion. Competences to Design, implement, deploy and optimise Big Data systems. Analyse solutions in Big Data systems. Discuss research articles related to Big Data systems with colleagues. Plan and execute groups projects with Big Data systems and report the findings.",See Absalon when the course is set up.,"The course builds on the knowledge acquired in the course NDAK15006U Advanced Computer Systems (ACS). Working knowledge of Java and C#, including concurrency and communication mechanisms. Notions of UNIX / shell scripting are helpful, but not required. Academic qualifications equivalent to a BSc degree is recommended.","Lectures, seminars and discussions.","{'Lectures': 28, 'Preparation': 50, 'Project work': 127, 'Exam': 1, 'Total': 206}",Oral Collective,"Self Service at KUnet As a exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment</div><div>Oral examination, 20 minutes without preparation</div></dd><dt>Type of assessment details</dt><dd>The assessment is based on the following two elements:
<br/><br/>
1. Group project assignments (3-5) with individual defence in the
exam week;
<br/>
2. Oral examination in the exam week.
<br/><br/>
The individual project assignments defence and oral exam should be
carried out in one session.
<br/><br/>
An overall grade will be given by taking both elements into
account.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners.</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam</p><p>The oral examination and project assignments defense will take
place on the re-exam date.</p><p>Resubmission of project assignments no later than three weeks
before the re-exam date. Project assignments not redone will be
transferred with the original assessments.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK18001U,"7,5 ECTS",Full Degree Master,1 block,Block 2,C,50 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Yongluan Zhou (4-7d6b727843676c316e7831676e)'],Saved on the 14-02-2024
https://kurser.ku.dk/course/ndak18001u/2025-2026,NDAK18001U Big Data Systems (BDS),Volume 2025/2026,,"The goal of this course is to give the participants an understanding of the technologies in computer systems for Big Data management. It covers both traditional methods used in parallel database systems, real-time stream processing systems, transactional database systems, as well as modern technologies of cloud computing and massively parallel data analysis platforms. The following main topics are contained in the course: Parallel database systems; Massively parallel data analysis; Fast stream processing systems; Distributed transaction processing; Fault-tolerance; Scalability; Event-based systems.","Knowledge of Theories and techniques in parallel database systems. Theories and techniques in data stream processing systems. Theories and techniques in distributed transactional systems. Design of and trade-offs in the modern systems introduced in the course. Skills to Develop programs and apply tools for big data management and analysis and deploy them on a cloud computing platform. Report work done with Big Data systems in a clear and precise language, and in a structured fashion. Competences to Design, implement, deploy and optimise Big Data systems. Analyse solutions in Big Data systems. Discuss research articles related to Big Data systems with colleagues. Plan and execute groups projects with Big Data systems and report the findings.",See Absalon when the course is set up.,"The course builds on the knowledge acquired in the course NDAK15006U Advanced Computer Systems (ACS). Working knowledge of Java and C#, including concurrency and communication mechanisms. Notions of UNIX / shell scripting are helpful, but not required. Academic qualifications equivalent to a BSc degree is recommended.","Lectures, seminars and discussions.","{'Lectures': 28, 'Preparation': 50, 'Project work': 127, 'Exam': 1, 'Total': 206}",Oral Collective,"Self Service at KUnet As a exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment</div><div>Oral examination, 20 minutes without preparation</div></dd><dt>Type of assessment details</dt><dd>The assessment is based on the following two elements:
<br/><br/>
1. Group project assignments (3-5) with individual defence in the
exam week;
<br/>
2. Oral examination in the exam week.
<br/><br/>
The individual project assignments defence and oral exam should be
carried out in one session.
<br/><br/>
An overall grade will be given by taking both elements into
account.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners.</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam</p><p>The oral examination and project assignments defense will take
place on the re-exam date.</p><p>Resubmission of project assignments no later than three weeks
before the re-exam date. Project assignments not redone will be
transferred with the original assessments.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK18001U,"7,5 ECTS",Full Degree Master,1 block,Block 4,C,50 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Yongluan Zhou (4-89777e844f73783d7a843d737a)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/nbik10005u/2024-2025,NBIK10005U Bioinformatics Project 1,Volume 2024/2025,MSc Programme in Bioinformatics,The exact content is decided with the supervisor.,"Knowledge : The aim of these projects is to get a deep understanding of a bioinformatics topic often related to a research project. This is often a practical biological application using the computational methods you have been introduced to in other courses, e.g. testing a biological hypothesis on massive data sets. It may also be the implementation of a new method using python or some other programming language or an entirely theoretical project. Skills : Write a bioinformatics report Search for background material Select and use relevant bioinformatics tools for a specific project Competences : The student will obtain these general competences Ability to do project work Writing a scientific report Presenting work orally Analyze complex real-world problems",See Absalon.,"Knowledge within bioinformatics. Programming at least at the level of ""Linux and Python Programming"" is recommended. Academic qualifications equivalent to a BSc degree is recommended.",Individual project with a supervisor.,"{'Preparation': 19, 'Project work': 176, 'Guidance': 10, 'Exam': 1, 'Total': 206}",Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade) Written and/or oral feedback during the project work. Oral feedback at the exam.,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment</div><div>Oral examination, 60 min. (no preparation)</div></dd><dt>Type of assessment details</dt><dd>Written assignment, min. 2000 words (2/3 of final grade)
<br/>
- Ongoing preparation throughout the course with submission at the
end of the course.
<br/>
Oral examination (1/3 of final grade)</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as ordinary exam.</p><p>Students must pass both exams to pass the overall exam. The
passed part of the exam may be reused in a reexam.</p><p>If the written assignment is not passed it may be
revised and submitted no later than three weeks
before the reexam.</p><p>If the written assignment is not submitted witin the
deadline it must be submitted no later than three weeks
before the reexam.</p><p> </p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>In order to achieve the grade 12 the student must</p><ul><li>Complete a project in bioinformatics, which adresses an
important problem and presents a solution, or a partial solution,
at an adequate level.</li><li>Identify relevant literature and understand the parts relevant
for their project.</li><li>Write a scientifically precise report, which motivates their
work, clearly presents the background, presents the methods and
results of the work without errors, discusses the implications of
the results and draws scientifically sound conclusions based on the
work.</li><li>Present the work in a clear and scientifically satisfactory
way, including motivation, methods, results, main achievements and
future outlook.</li><li>Answer questions about any part of the project in reasonable
depth and explain the core methods and results of the project in
great detail.</li><li>Put the work in context and discuss possible future directions
of research in the area and judge the relevance of such
work.</li></ul></div></div>",English,NBIK10005U,"7,5 ECTS",Full Degree Master,1 block,"Block 1, Block 2, Block 3, Block 4 And Summer",Meetings with supervisor.,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board for the Biological Area'],"['Department of Biology', 'Department of Computer Science']",['Faculty of Science'],['Rasmus Heller (7-7b716e75756e7b496b727837747e376d74)'],Saved on the 20-02-2024
https://kurser.ku.dk/course/nbik10008u/2024-2025,NBIK10008U Bioinformatics Project 2,Volume 2024/2025,MSc Programme in Bioinformatics,The exact content is decided with the supervisor.,"Knowledge : The aim with these projects is to get a deep understanding of a bioinformatics topic often related to a research project. This is often a practical biological application using the computational methods you have been introduced to in other courses, e.g. testing a biological hypothesis on massive data sets. It may also be the implementation of a new method using python or some other programming language or an entirely theoretical project. Skills : Write a bioinformatics report Search for background material Select and use relevant bioinformatics tools for a specific project Competences : The student will obtain these general competences Ability to do project work Writing a scientific report Presenting work orally Analyze complex real-world problems",See Absalon.,"Knowledge within bioinformatics. Programming at least at the level of ""Linux and Python Programming"" is recommended. Academic qualifications equivalent to a BSc degree is recommended.",Individual project with a supervisor.,"{'Preparation': 19, 'Project work': 176, 'Guidance': 10, 'Exam': 1, 'Total': 206}",Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade) Written and/or oral feedback during the project work. Oral feedback at the exam.,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment</div><div>Oral examination, 60 min. (no preparation)</div></dd><dt>Type of assessment details</dt><dd>Written assignment, min. 2000 words (2/3 of final grade)
<br/>
- Ongoing preparation throughout the course with submission at the
end of the course.
<br/>
Oral examination (1/3 of final grade)</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The same as the ordinary exam.</p><p>Students must pass both exams to pass the overall exam. The
passed part of the exam may be reused in a reexam.</p><p>If the written assignment is not passed it may be
revised and submitted no later than three weeks
before the reexam.</p><p>If the written assignment is not submitted witin the
deadline it must be submitted no later than three weeks
before the reexam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>In order to achieve the grade 12 the student must</p><ul><li>Complete a project in bioinformatics, which adresses an
important problem and presents a solution, or a partial solution,
at an adequate level.</li><li>Identify relevant literature and understand the parts relevant
for their project.</li><li>Write a scientifically precise report, which motivates their
work, clearly presents the background, presents the methods and
results of the work without errors, discusses the implications of
the results and draws scientifically sound conclusions based on the
work.</li><li>Present the work in a clear and scientifically satisfactory
way, including motivation, methods, results, main achievements and
future outlook.</li><li>Answer questions about any part of the project in reasonable
depth and explain the core methods and results of the project in
great detail.</li><li>Put the work in context and discuss possible future directions
of research in the area and judge the relevance of such
work.</li></ul></div></div>",English,NBIK10008U,"7,5 ECTS",Full Degree Master,1 block,"Block 1, Block 2, Block 3, Block 4 And Summer",Meetings with supervisor.,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board for the Biological Area'],"['Department of Biology', 'Department of Computer Science']",['Faculty of Science'],['Rasmus Heller (7-766c697070697644666d73326f7932686f)'],Saved on the 19-02-2024
https://kurser.ku.dk/course/nbik10008u/2025-2026,NBIK10008U Bioinformatics Project 2,Volume 2025/2026,MSc Programme in Bioinformatics,The exact content is decided with the supervisor.,"Knowledge: The aim of these projects is to get a deep understanding of a bioinformatics topic often related to a research project. This is often a practical biological application using the computational methods you have been introduced to in other courses, e.g. testing a biological hypothesis on massive data sets. It may also be the implementation of a new method using python or some other programming language or an entirely theoretical project. Skills: Write a bioinformatics report Search for background material Select and use relevant bioinformatics tools for a specific project Competences: The student will obtain these general competences Ability to do project work Writing a scientific report Presenting work orally Analyze complex real-world problems",See Absalon.,"Knowledge within bioinformatics. Programming at least at the level of ""Linux and Python Programming"" is recommended. Academic qualifications equivalent to a BSc degree is recommended.",Individual project with a supervisor.,"{'Preparation': 19, 'Project work': 176, 'Guidance': 10, 'Exam': 1, 'Total': 206}",Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade) Written and/or oral feedback during the project work. Oral feedback at the exam.,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 45 minutes (no
preparation time)</div></dd><dt>Type of assessment details</dt><dd>Written assignment, min. 2000 words
<br/>
- Ongoing preparation throughout the course with submission at the
end of the course.
<br/><br/>
The student must submit the written assignment in order to
participate in the subsequent oral examination.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>In order to achieve the grade 12 the student must</p><ul><li>Complete a project in bioinformatics, which adresses an
important problem and presents a solution, or a partial solution,
at an adequate level.</li><li>Identify relevant literature and understand the parts relevant
for their project.</li><li>Write a scientifically precise report, which motivates their
work, clearly presents the background, presents the methods and
results of the work without errors, discusses the implications of
the results and draws scientifically sound conclusions based on the
work.</li><li>Present the work in a clear and scientifically satisfactory
way, including motivation, methods, results, main achievements and
future outlook.</li><li>Answer questions about any part of the project in reasonable
depth and explain the core methods and results of the project in
great detail.</li><li>Put the work in context and discuss possible future directions
of research in the area and judge the relevance of such
work.</li></ul></div></div>",English,NBIK10008U,"7,5 ECTS",Full Degree Master,1 block,"Block 1, Block 2, Block 3, Block 4 And Summer",Meetings with supervisor.,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board for the Biological Area'],"['Department of Biology', 'Department of Computer Science']",['Faculty of Science'],['Rasmus Heller (7-7b716e75756e7b496b727837747e376d74)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/nbik10010u/2025-2026,NBIK10010U Bioinformatics Project 4,Volume 2025/2026,MSc Programme in Bioinformatics,The exact content is decided with the supervisor.,"Knowledge: The aim with these projects is to get a deep understanding of a bioinformatics topic often related to a research project. This is often a practical biological application using the computational methods you have been introduced to in other courses, e.g. testing a biological hypothesis on massive data sets. It may also be the implementation of a new method using python or some other programming language or an entirely theoretical project. Skills: Write a bioinformatics report Search for background material Select and use relevant bioinformatics tools for a specific project Competences: The student will obtain these general competences Ability to do project work Writing a scientific report Presenting work orally Analyze complex real-world problems",See Absalon.,"Knowledge within bioinformatics. Programming at least at the level of ""Linux and Python Programming"" is recommended. Academic qualifications equivalent to a BSc degree is recommended.",Individual project with a supervisor.,"{'Preparation': 19, 'Project work': 176, 'Guidance': 10, 'Exam': 1, 'Total': 206}",Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade) Written and/or oral feedback during the project work. Oral feedback at the exam.,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 45 minutes (no
preparation time)</div></dd><dt>Type of assessment details</dt><dd>Written assignment, min. 2000 words
<br/>
- Ongoing preparation throughout the course with submission at the
end of the course.
<br/><br/>
The student must submit the written assignment in order to
participate in the subsequent oral examination.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The same as the ordinary exam.</p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>In order to achieve the grade 12 the student must</p><ul><li>Complete a project in bioinformatics, which adresses an
important problem and presents a solution, or a partial solution,
at an adequate level.</li><li>Identify relevant literature and understand the parts relevant
for their project.</li><li>Write a scientifically precise report, which motivates their
work, clearly presents the background, presents the methods and
results of the work without errors, discusses the implications of
the results and draws scientifically sound conclusions based on the
work.</li><li>Present the work in a clear and scientifically satisfactory
way, including motivation, methods, results, main achievements and
future outlook.</li><li>Answer questions about any part of the project in reasonable
depth and explain the core methods and results of the project in
great detail.</li><li>Put the work in context and discuss possible future directions
of research in the area and judge the relevance of such
work.</li></ul></div></div>",English,NBIK10010U,"7,5 ECTS",Full Degree Master,1 block,"Block 1, Block 2, Block 3, Block 4 And Summer",Meetings with supervisor.,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board for the Biological Area'],"['Department of Biology', 'Department of Computer Science']",['Faculty of Science'],['Rasmus Heller (7-766c697070697644666d73326f7932686f)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/nbik10009u/2024-2025,NBIK10009U Bioinformatics Project 3,Volume 2024/2025,MSc Programme in Bioinformatics,The exact content is decided with the supervisor.,"Knowledge : The aim with these projects is to get a deep understanding of a bioinformatics topic often related to a research project. This is often a practical biological application using the computational methods you have been introduced to in other courses, e.g. testing a biological hypothesis on massive data sets. It may also be the implementation of a new method using python or some other programming language or an entirely theoretical project. Skills : Write a bioinformatics report Search for background material Select and use relevant bioinformatics tools for a specific project Competences : The student will obtain these general competences Ability to do project work Writing a scientific report Presenting work orally Analyze complex real-world problems",See Absalon.,"Knowledge within bioinformatics. Programming at least at the level of ""Linux and Python Programming"" is recommended. Academic qualifications equivalent to a BSc degree is recommended.",Individual project with a supervisor.,"{'Preparation': 19, 'Project work': 176, 'Guidance': 10, 'Exam': 1, 'Total': 206}",Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade) Written and/or oral feedback during the project work. Oral feedback at the exam.,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment</div><div>Oral examination, 60 min. (no preparation)</div></dd><dt>Type of assessment details</dt><dd>Written assignment, min. 2000 words (2/3 of final grade)
<br/>
- Ongoing preparation throughout the course with submission at the
end of the course.
<br/>
Oral examination (1/3 of final grade)</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The same as the ordinary exam.</p><p>Students must pass both exams to pass the overall exam. The
passed part of the exam may be reused in a reexam.</p><p>If the written assignment is not passed it may be
revised and submitted no later than three weeks
before the reexam.</p><p>If the written assignment is not submitted witin the
deadline it must be submitted no later than three weeks
before the reexam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>In order to achieve the grade 12 the student must</p><ul><li>Complete a project in bioinformatics, which adresses an
important problem and presents a solution, or a partial solution,
at an adequate level.</li><li>Identify relevant literature and understand the parts relevant
for their project.</li><li>Write a scientifically precise report, which motivates their
work, clearly presents the background, presents the methods and
results of the work without errors, discusses the implications of
the results and draws scientifically sound conclusions based on the
work.</li><li>Present the work in a clear and scientifically satisfactory
way, including motivation, methods, results, main achievements and
future outlook.</li><li>Answer questions about any part of the project in reasonable
depth and explain the core methods and results of the project in
great detail.</li><li>Put the work in context and discuss possible future directions
of research in the area and judge the relevance of such
work.</li></ul></div></div>",English,NBIK10009U,"7,5 ECTS",Full Degree Master,1 block,"Block 1, Block 2, Block 3, Block 4 And Summer",Meetings with supervisor.,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board for the Biological Area'],"['Department of Biology', 'Department of Computer Science']",['Faculty of Science'],['Rasmus Heller (7-857b787f7f788553757c82417e8841777e)'],Saved on the 19-02-2024
https://kurser.ku.dk/course/nbik10009u/2025-2026,NBIK10009U Bioinformatics Project 3,Volume 2025/2026,MSc Programme in Bioinformatics,The exact content is decided with the supervisor.,"Knowledge: The aim with these projects is to get a deep understanding of a bioinformatics topic often related to a research project. This is often a practical biological application using the computational methods you have been introduced to in other courses, e.g. testing a biological hypothesis on massive data sets. It may also be the implementation of a new method using python or some other programming language or an entirely theoretical project. Skills: Write a bioinformatics report Search for background material Select and use relevant bioinformatics tools for a specific project Competences: The student will obtain these general competences Ability to do project work Writing a scientific report Presenting work orally Analyze complex real-world problems",See Absalon.,"Knowledge within bioinformatics. Programming at least at the level of ""Linux and Python Programming"" is recommended. Academic qualifications equivalent to a BSc degree is recommended.",Individual project with a supervisor.,"{'Preparation': 19, 'Project work': 176, 'Guidance': 10, 'Exam': 1, 'Total': 206}",Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade) Written and/or oral feedback during the project work. Oral feedback at the exam.,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 45 minutes (no
preparation time)</div></dd><dt>Type of assessment details</dt><dd>Written assignment, min. 2000 words
<br/>
- Ongoing preparation throughout the course with submission at the
end of the course.
<br/><br/>
The student must submit the written assignment in order to
participate in the subsequent oral examination.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The same as the ordinary exam.</p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>In order to achieve the grade 12 the student must</p><ul><li>Complete a project in bioinformatics, which adresses an
important problem and presents a solution, or a partial solution,
at an adequate level.</li><li>Identify relevant literature and understand the parts relevant
for their project.</li><li>Write a scientifically precise report, which motivates their
work, clearly presents the background, presents the methods and
results of the work without errors, discusses the implications of
the results and draws scientifically sound conclusions based on the
work.</li><li>Present the work in a clear and scientifically satisfactory
way, including motivation, methods, results, main achievements and
future outlook.</li><li>Answer questions about any part of the project in reasonable
depth and explain the core methods and results of the project in
great detail.</li><li>Put the work in context and discuss possible future directions
of research in the area and judge the relevance of such
work.</li></ul></div></div>",English,NBIK10009U,"7,5 ECTS",Full Degree Master,1 block,"Block 1, Block 2, Block 3, Block 4 And Summer",Meetings with supervisor.,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board for the Biological Area'],"['Department of Biology', 'Department of Computer Science']",['Faculty of Science'],['Rasmus Heller (7-7c726f76766f7c4a6c737938757f386e75)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/nplk17000u/2024-2025,NPLK17000U Biological Imaging,Volume 2024/2025,,"This course will introduce to all important modalities of advanced biological and biomedical imaging using photons, electrons, X-rays and neutrons, available in the Øresund region in core facilities and at synchrotron and linear accelerators (MAX IV and ESS). These modalities offer a wide zoom range and the resolution power to resolve the substructure of molecules, cells, tissues, organs and whole bodies. The couse is relevant for students of MSc. educations within biological, chemical, physical, medical, molecular and pharmaceutical sciences and will be coordinated with the PhD course ""Biological Imaging"". In particular the following topics will be treated: fluorescence microscopy, fluorescence life time imaging, super resolution microscopy, electron and cryo electron microscopy, X-ray imaging and imaging at synchrotron and linac beamlines. An important part will be the concomitant data analysis, -management and -statistics as well as image processing.","This course aims at giving the student an understanding of biomedical imaging including the physical and optical principles of cutting-edge microscopes and beamlines. The course includes show cases at the instruments and, thus, will be an important asset for students that want to integrate biological and soft-matter imaging in their Master projects. After the course the student should be able to: Knowledge: Describe properties of different light sources and their impact on biological specimens Understand the principles of specimen preparation Process raw data from different imaging modalities, including mulitvariate analysis of 4D image series Availability of biological imaging facilities in the Øresund region Skills: Analyse and evaluate scientific papers which utilise biological imaging instruments and -beam lines Make a flow-chart of data management from raw image data to analysis Process image series with simple software algorithms for contrast and brightness improvement, segmentation and automated analysis Competences: Select appropriate imaging modalities to visualise molecular or cellular structures and processes Describe the limitations of the different imaging modalities used in the course Judge suitability of MAX IV or ESS to solve scientific questions of a project within Biology, Biology-Biotechnology, Computer Science, Medicine and Technology, Molecular Biomedicine, Nanoscience or Pharmaceutical Sciences while being aware of competing imaging instruments.","Relevant background material and Journal articles will be electronically available at the start of the course. Practicals will be taught at the Center for Advanced Bioimaging (CAB - FBG and Nørre Campus), and at the Center for Integrated Microscopy (CFIM - at the Panum building). An excursion to Lund (Sweden) will be undertaken to visit the MAX IV synchrotron and the linear neutron accelerator European Spallation Source (ESS).","Students interested to take this course should have a basic understanding of theory and use of wide field light microscopes, such as achieved by following cell biology, histology or anatomy courses. Academic qualifications equivalent to a BSc degree is recommended.","Lectures, Journal Clubs, flipped classroom, practical show cases, excursions. Please note that your laptop should be able to run MatLab or a similar data analysis program (4GB RAM)!","{'Lectures': 28, 'Preparation': 130, 'Theory exercises': 12, 'Practical exercises': 33, 'Exam': 3, 'Total': 206}",Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>On-site written exam, 3 hours under invigilation</div></dd><dt>Type of assessment details</dt><dd>The exam will consist of two parts, of which one is a multiple
choice test on the fundamentals of biological imaging and the other
one covers questions on the journal articles treated during the
course. Part one counts 1/3, and part two 2/3.
<br/><br/>
The on-site written exam is an ITX exam.
<br/>
See important information about ITX-exams at Study Information,
menu point: Exams -&gt; Exam types and rules -&gt; Written on-site
exams (ITX)</dd><dt>Exam registration requirements</dt><dd><p>Approved presentation of a Journal Club
article, prepared in student teams during the
course.</p></dd><dt>Aid</dt><dd>All aids allowed 
<div><p>As the exam is an ITX-exam, the University will make computers
available to students at the ITX-exam.</p><p>Students are not permitted to bring digital aids like computers,
tablets, calculators, mobile phones etc.</p><p>Books, notes, and similar materials can be brought in paper form
or uploaded before the exam and accessed digitally from the ITX
computer. Read more about this at Study Information</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship</dd><dt>Re-exam</dt><dd><p>Examination form is changed to a 30 min oral examination in
case less than 10 students register for it.</p><p>It can not be dispensated for the requirement of presenting a
Journal club article, and students who do not fulfil the
requirements have to present a relevant Journal article at the
examiners office. They will get this article a week in advance; and
presentation will take approximately 15 min.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See ""learning outcome""</p></div></div>",English,NPLK17000U,"7,5 ECTS",Full Degree Master,1 block,Block 4,C,20 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board for the Biological Area'],"['Department of Plant and Environmental Sciences', 'Department of Biomedical Sciences', 'Department of Computer Science', 'Department of Drug Design and Pharmacology', 'Department of Chemistry', 'The Niels Bohr Institute']",['Faculty of Science'],['Alexander Schulz (3-717c8350807c757e3e7b853e747b)'],Saved on the 20-11-2024
https://kurser.ku.dk/course/nbik10010u/2024-2025,NBIK10010U Bioinformatics Project 4,Volume 2024/2025,MSc Programme in Bioinformatics,The exact content is decided with the supervisor.,"Knowledge : The aim with these projects is to get a deep understanding of a bioinformatics topic often related to a research project. This is often a practical biological application using the computational methods you have been introduced to in other courses, e.g. testing a biological hypothesis on massive data sets. It may also be the implementation of a new method using python or some other programming language or an entirely theoretical project. Skills : Write a bioinformatics report Search for background material Select and use relevant bioinformatics tools for a specific project Competences : The student will obtain these general competences Ability to do project work Writing a scientific report Presenting work orally Analyze complex real-world problems",See Absalon.,"Knowledge within bioinformatics. Programming at least at the level of ""Linux and Python Programming"" is recommended. Academic qualifications equivalent to a BSc degree is recommended.",Individual project with a supervisor.,"{'Preparation': 19, 'Project work': 176, 'Guidance': 10, 'Exam': 1, 'Total': 206}",Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade) Written and/or oral feedback during the project work. Oral feedback at the exam.,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment</div><div>Oral examination, 60 min. (no preparation)</div></dd><dt>Type of assessment details</dt><dd>Written assignment, min. 2000 words (2/3 of final grade)
<br/>
- Ongoing preparation throughout the course with submission at the
end of the course.
<br/>
Oral examination (1/3 of final grade)</dd><dt>Exam registration requirements</dt><dd><p>Written take-home assignment, min. 10
pages.        
<br/>
Ongoing preparation throughout the course with submission at the
end of the course.</p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The same as the ordinary exam.</p><p>Students must pass both exams to pass the overall exam. The
passed part of the exam may be reused in a reexam.</p><p>If the written assignment is not passed it may be
revised and submitted no later than three weeks
before the reexam.</p><p>If the written assignment is not submitted witin the
deadline it must be submitted no later than three weeks
before the reexam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>In order to achieve the grade 12 the student must</p><ul><li>Complete a project in bioinformatics, which adresses an
important problem and presents a solution, or a partial solution,
at an adequate level.</li><li>Identify relevant literature and understand the parts relevant
for their project.</li><li>Write a scientifically precise report, which motivates their
work, clearly presents the background, presents the methods and
results of the work without errors, discusses the implications of
the results and draws scientifically sound conclusions based on the
work.</li><li>Present the work in a clear and scientifically satisfactory
way, including motivation, methods, results, main achievements and
future outlook.</li><li>Answer questions about any part of the project in reasonable
depth and explain the core methods and results of the project in
great detail.</li><li>Put the work in context and discuss possible future directions
of research in the area and judge the relevance of such
work.</li></ul></div></div>",English,NBIK10010U,"7,5 ECTS",Full Degree Master,1 block,"Block 1, Block 2, Block 3, Block 4 And Summer",Meetings with supervisor.,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board for the Biological Area'],"['Department of Biology', 'Department of Computer Science']",['Faculty of Science'],['Rasmus Heller (7-7b716e75756e7b496b727837747e376d74)'],Saved on the 19-02-2024
https://kurser.ku.dk/course/nplk17000u/2025-2026,NPLK17000U Biological Imaging,Volume 2025/2026,,"This course will introduce to all important modalities of advanced biological and biomedical imaging using photons, electrons, X-rays and neutrons, available in the Øresund region in core facilities and at synchrotron and linear accelerators (MAX IV and ESS). These modalities offer a wide zoom range and the resolution power to resolve the substructure of molecules, cells, tissues, organs and whole bodies. The couse is relevant for students of MSc. educations within biological, chemical, physical, medical, molecular and pharmaceutical sciences and will be coordinated with the PhD course ""Biological Imaging"". In particular the following topics will be treated: fluorescence microscopy, fluorescence life time imaging, super resolution microscopy, electron and cryo electron microscopy, X-ray imaging and imaging at synchrotron and linac beamlines. An important part will be the concomitant data analysis, -management and -statistics as well as image processing.","This course aims at giving the student an understanding of biomedical imaging including the physical and optical principles of cutting-edge microscopes and beamlines. The course includes show cases at the instruments and, thus, will be an important asset for students that want to integrate biological and soft-matter imaging in their Master projects. After the course the student should be able to: Knowledge: Describe properties of different light sources and their impact on biological specimens Understand the principles of specimen preparation Process raw data from different imaging modalities, including mulitvariate analysis of 4D image series Availability of biological imaging facilities in the Øresund region Skills: Analyse and evaluate scientific papers which utilise biological imaging instruments and -beam lines Make a flow-chart of data management from raw image data to analysis Process image series with simple software algorithms for contrast and brightness improvement, segmentation and automated analysis Competences: Select appropriate imaging modalities to visualise molecular or cellular structures and processes Describe the limitations of the different imaging modalities used in the course Judge suitability of MAX IV or ESS to solve scientific questions of a project within Biology, Biology-Biotechnology, Computer Science, Medicine and Technology, Molecular Biomedicine, Nanoscience or Pharmaceutical Sciences while being aware of competing imaging instruments.","Relevant background material and Journal articles will be electronically available at the start of the course. Practicals will be taught at the Center for Advanced Bioimaging (CAB - FBG and Nørre Campus), and at the Center for Integrated Microscopy (CFIM - at the Panum building). An excursion to Lund (Sweden) will be undertaken to visit the MAX IV synchrotron and the linear neutron accelerator European Spallation Source (ESS).","Students interested to take this course should have a basic understanding of theory and use of wide field light microscopes, such as achieved by following cell biology, histology or anatomy courses. Academic qualifications equivalent to a BSc degree is recommended.","Lectures, Journal Clubs, flipped classroom, practical show cases, excursions. Please note that your laptop should be able to run MatLab or a similar data analysis program (4GB RAM)!","{'Lectures': 28, 'Preparation': 130, 'Theory exercises': 12, 'Practical exercises': 33, 'Exam': 3, 'Total': 206}",Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>On-site written exam, 3 hours under invigilation</div></dd><dt>Type of assessment details</dt><dd>The exam will consist of two parts, of which one is a multiple
choice test on the fundamentals of biological imaging and the other
one covers questions on the journal articles treated during the
course. Part one counts 1/3, and part two 2/3.</dd><dt>Examination prerequisites</dt><dd><p>Approved presentation of a Journal Club
article, prepared in student teams during the
course.</p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship</dd><dt>Re-exam</dt><dd><p>Examination form is changed to a 30 min oral examination in
case less than 10 students register for it.</p><p>It can not be dispensated for the requirement of presenting a
Journal club article, and students who do not fulfil the
requirements have to present a relevant Journal article at the
examiners office. They will get this article a week in advance; and
presentation will take approximately 15 min.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NPLK17000U,"7,5 ECTS",Full Degree Master,1 block,Block 4,C,20 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board for the Biological Area'],"['Department of Plant and Environmental Sciences', 'Department of Biomedical Sciences', 'Department of Computer Science', 'Department of Drug Design and Pharmacology', 'Department of Chemistry', 'The Niels Bohr Institute']",['Faculty of Science'],['Alexander Schulz (3-6671784575716a7333707a336970)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndab24009u/2024-2025,NDAB24009U Co-design af digital sundhed,Årgang 2024/2025,Bacheloruddannelsen i sundhed og informatik Bacheloruddannelsen i idræt og fysisk aktivitet,"Kurset giver et overblik over forskellige tilgange til design af digitale sundhedsteknologier og praktisk erfaring med co-design metoder. Formålet er at gøre den studerende i stand til at forstå sammenhæng mellem brugernes problemer og it-baserede løsninger og at kunne afveje styrker og svagheder ved forskellige designmetoder og -teknikker til digital design. Med udgangspunkt i projektarbejde, vil kurset øve den studerende i at arbejde praktisk og refleksivt med undersøgelser, der er baseret på brugerinvolvering og design. Fokus vil være på hvordan designrettede aktiviteter og -artefakter kan bruges til at udvikle en bedre forståelse for hverdagspraksisser og behov samt digitale sundhedsløsninger til borgere, patienter eller andre sundheds-it brugere. Efter kurset kan den studerende selvstændigt udvælge, planlægge og facilitere brugerinvolverende designaktiviteter til udvikling af digitale sundhedsløsninger.","Viden Redegøre for centrale tilgange til design af digitale sundhedsteknologier Redegøre for fordele og ulemper ved forskellige designtilgange Demonstrere grundlæggende viden om co-designmetoder og -teknikker Redegøre for etiske, sikkerheds- og forretningsmæssige udfordringer omkring design af digital sundhed Færdigheder Kan tilrettelægge og facilitere co-design aktiviteter Kan skabe sammenhæng mellem problemer og behov samt løsningsdesign Kan udvælge og prioritere designteknikker til specifikke formål Kompetencer Kan indgå i gruppearbejde omkring co-design workshops eller lignende designaktiviteter Kan selvstændigt planlægge og udføre en design-baseret undersøgelse med borgere, patienter eller andre sundheds-it brugere (i henhold til KUs regler for datasikkerhed og fortrolighed).",Undervisningsmateriale udgøres af udvalgte artikler og bogkapitler. Offentliggøres på kursets Absalon-side ved kursusstart.,"Det er ikke et krav, men det vil være en fordel Kurset kræver, at den studerende har indledende kendskab til kvalitative metoder og interaktionsdesign.","Undervisningen vil være projekt- og seminarbaseret og således indeholde en kombination af forelæsninger, projektarbejde, workshops, oplæg fra de studerende selv og evt. oplæg fra relevante forskere eller profesionelle.","{'Forelæsninger': 24, 'Forberedelse (anslået)': 92, 'Projektarbejde': 60, 'Eksamen': 30, 'I alt': 206}",Mundtlig Kollektiv Løbende feedback i undervisningsforløbet Peerfeedback (studerende giver hinanden feedback),Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Mundtlig prøve på baggrund af aflevering, 20 min. pr
studerende</div></dd><dt>Prøveformsdetaljer</dt><dd>Mundtlig eksamen
<br/>
Den individuelle skriftlige rapport (eksamensopgaven) er et oplæg
til den mundtlige individuelle eksamen, hvor der vil være en faglig
diskussion af rapporten og blive spurgt ind til det samlede pensum.
<br/><br/>
Individuel eksamensopgave
<br/>
I løbet af kurset udleveres en eksamensopgave, som udgøres af en
individuel skriftlig rapport med et omfang på min. 5 og maks. 10
normalsider (dvs. 2400 anslag inkl. mellemrum) uden bilag og
referencer.
<br/><br/>
For at gå til den mundtlige prøve skal afleveringen (individuel
eksamensopgave) være afleveret.</dd><dt>Krav til indstilling til eksamen</dt><dd><p>Gruppeopgaver 
<br/>
I løbet af kurset udarbejdes 1-3 obligatoriske gruppeopgaver i
relation til kursets centrale temaer. Som udgangspunkt arbejdes i
grupper af størrelsen 3-5 studerende. Gruppeopgaverne afleveres som
rapporter af et omfang på min. 5 og maks. 10 normalsider (dvs. 2400
anslag inkl. mellemrum) uden bilag og referencer. Aflevering og
godkendelse af gruppeopgaver er en forudsætning for indstilling til
eksamen.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt 
<div><p>Værktøjer, der er baseret på AI, herunder generativ AI/LLM, må
benyttes som hjælpemiddel. Det skal af beskrivelsen af metode
fremgå, hvordan disse er brugt. Det er den studerendes ansvar at
sikre besvarelsens nøjagtighed, integritet og originalitet inklusiv
at sikre, at besvarelsen ikke er faktuelt ukorrekt, plagieret eller
indeholder materiale med copyright.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Kvalificering til reeksamen opnås ved genaflevering og
godkendelse af de obligatoriske opgaver senest 3 uger før
reeksamen. Hvis den studerende ikke kan genaflevere en eller flere
af de obligatoriske gruppeopgaver pga. manglende deltagelse, så
udleveres en ny opgave efter aftale med
<br/>
underviser. Den nye opgave skal udarbejdes individuelt og afleveres
senest 3 uger før reeksame</p><p>En ny eksamenopgave udleveres, som består af en individuel
skriftlig rapport med et omfang på min. 5 og maks. 10 normalsider
(dvs. 2400 anslag inkl. mellemrum) uden bilag og referencer. Der
vil ikke være mundtlig eksamen, men den studerende skal aflevere en
videopræsentation som tillæg til den skriftilge rapport. Videoen
skal være på maks. 5 min. og filen skal være under
50MB og afleveres i MP4 format. </p><p> </p><p> </p><p> </p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>For at opnå karakteren 12, skal den studerende overbevisende og
præcist kunne demonstrere viden, færdigheder og kompetencer som
beskrevet under målbeskrivelsen.</p><p> </p></div></div>",,,,,,,,,,,,,Gemt den 07-11-2024
https://kurser.ku.dk/course/nbia05008u/2025-2026,NBIA05008U Biological Sequence Analysis,Volume 2025/2026,MSc Programme in Biochemistry MSc Programme in Bioinformatics MSc Programme in Biology MSc Programme in Biology with a minor subject MSc Programme in Molecular Biomedicine,"The course covers the fundamental theoretical background for biological sequence analysis as well as applications of the methods, which are learned through homework and exercises. The topics include Alignment methods for biological sequences (DNA, RNA, proteins) Methods for searching sequence databases, including deep learning approaches Hidden Markov models with applications Motif finding and discovery Mapping and assembly of DNA sequencing data The knowledge and skills acquired in this course will enable the students to understand and develop state-of-the-art algorithms.","Knowledge: The student will: know the field of biological sequence analysis know and understand the main algorithms and methods used in pairwise and multiple alignment searching of sequence databases hidden Markov models of biological sequences finding and discovery of motifs in biological sequences mapping and assembly of DNA sequencing data understand the biological contexts in which to apply biological sequence analysis Skills: The student will be able to: derive simple probabilistic methods and algorithms for biological sequence analysis explain the algorithms and methods covered in the course interpret results of standard methods used in biological sequence analysis select the proper sequence analysis methods and tools for a given biological problem run some standard computer programs for biological sequence analysis Competences: The student will obtain these general competences: Will be able to discuss and explain methods in biological sequence analysis with researchers in bioinformatics and related sciences Will be able to contribute to interdisciplinary projects involving biological sequence analysis Will be able to read, understand, and discuss scientific literature in biological sequence analysis",See Absalon.,"Knowledge within molecular biology is recommended (can be obtained simultaneously). Programming at the level of ""Linux and Python Programming"" is recommended (can be taken simultaneously). Some skills in math and statistics are an advantage. Academic qualifications equivalent to a BSc degree is recommended.","Lectures (4-5 per week), exercises (2-4 hours per week) and homework (one per week).","{'Lectures': 40, 'Preparation': 141, 'Practical exercises': 24, 'Exam': 1, 'Total': 206}",Oral Collective Feedback by final exam (In addition to the grade),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, 30 minutes (30-minute preparation
time)</div></dd><dt>Aid</dt><dd>Written aids allowed 
<div><p>The use of Large Language Models (LLM)/Large Multimodal Models
(LMM) – such as ChatGPT and GPT-4 – is permitted during the
preparation time.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>External censorship</dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>In order to obtain the grade 12 the student should convincingly
and accurately demonstrate the knowledge, skills and competences
described under Learning Outcome.</p></div></div>",English,NBIA05008U,"7,5 ECTS",Full Degree Master,1 block,Block 1,C,60 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board for the Biological Area'],"['Department of Biology', 'Department of Computer Science']",['Faculty of Science'],"['Ole Winther (11-726f68317a6c71776b687543656c72316e7831676e)', 'Robin Andersson (5-7471646b7042646b71306d7730666d)']",Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak19000u/2024-2025,NDAK19000U Cancelled Blockchain Business Development (BBD),Volume 2024/2025,,"The term blockchain encompasses decentralized peer-to-peer systems maintaining a digital ledger without central control. The technology is not limited to cryptocurrencies and is applied to various fields, e.g., registries and supply chains. Similar to the impact of the internet, blockchain has the potential to truly disrupt multiple industries by making transactions and processes more democratic, secure, transparent, and efficient. Building on this vision, students will explore how the capabilities and the underlying mechanism of blockchain can be applied to generate economic and social value. This course highlights the central topics of blockchain and distributed ledger technologies. It provides insight into current research and state-of-the-art. It is designed to familiarize students with the theoretical and practical foundations of blockchain technology, e.g. cryptography and distributed systems, and its key application areas. In addition, the course seeks to provide hands-on experience in applying blockchain technology to developing novel insights and turning them into prototypes. The course is expected to run as a collaboration between the University of Copenhagen and Copenhagen Business School.","Knowledge of A distributed ledger (= blockchain) platform supporting executing programs (""smart contracts"") such as Hyperledger fabric or Ethereum. Foundations of blockchain in cryptography and distributed systems. Important characteristics of and corresponding techniques for implementing distributed ledgers. Potential of distributed ledger technology for solving real-world problems. Skills to Identify and explain the theories and technologies that were presented in the course, including their key terminology, underlying assumptions, and how they relate to one another. Demonstrate how the theories and technologies that were presented in the course were applied in the process of developing the prescribed blockchain project. Design, analyze, implement and test smart contract code on a state-of-the-art distributed ledger platform. Set up and deploy a prototype smart contract code on a distributed ledger test system. Analyze suitability of applications for implementation on a particular distributed ledger system. Competences to Evaluate the blockchain innovation project through theory-based critical assessment and discuss the results including how to mitigate the prevailing challenges as well as how to move ahead with the development of the underlying project. Design basic distributed ledger-based solutions to real-world problems. Produce rapid prototypes of distributed ledger applications. Report and present the findings of a group project.","A reading list of relevant up-to-date articles will be distributed to the participants at the start of the course. Information about a few of the generalised ledgers: Androulaki E, Barger A, Bortnikov V, Cachin C, Christidis K, De Caro A, Enyeart D, Ferris C, Laventman G, Manevich Y, Muralidharan S. Hyperledger fabric: a distributed operating system for permissioned blockchains. InProceedings of the Thirteenth EuroSys Conference 2018 Apr 23 (p. 30). ACM. Li, W., Sforzin, A., Fedorov, S., and Karame, G. O. Towards scalable and private industrial blockchains. In Proceedings of the ACM Workshop on Blockchain, Cryptocurrencies and Contracts (2017), ACM, pp. 9-14. Wood, G. Ethereum: A secure decentralised generalised transaction ledger. Homestead Draft (Yellow Paper), 2014.","Programming experience in e.g. Java, Go, or Python. Academic qualifications equivalent to a BSc degree is recommended.","Teaching will be based on project-centric thematic lectures, in-class exercises, studio work, field research, and student presentations. The class meetings are interactive and require attendance and ongoing engagement of the students.","{'Lectures': 30, 'Preparation': 60, 'Project work': 86, 'Exam Preparation': 29, 'Exam': 1, 'Total': 206}",Oral Collective Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment</div><div>Oral examination, 20 minutes</div></dd><dt>Type of assessment details</dt><dd>Specifically, the exam consists of two parts:
<br/><br/>
1. A group report based on the group project. In order to give an
individual grade it is required to specify in the submitted group
project report who wrote what parts.
<br/>
2. An individual oral examination (without preparation) based on
the group report and group project
<br/><br/>
The written and oral examination are not weighted, why only one
overall assessment is provided for the entire exam.</dd><dt>Exam registration requirements</dt><dd><p>Submission of weekly status updates. Specific guidelines
will be given during the course.</p></dd><dt>Aid</dt><dd>Only certain aids allowed 
<div><p>A laptop can be used for the presentation on the group
project.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as ordinary exam.</p><p>The written project report can be revised and resubmitted.</p><p>If a student has not qualified for the exam or handed in a
project report, then the student must prepare a full project
on their own and submit the project report. The exam
qualification must be met no later than three weeks prior to
the re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK19000U,"7,5 ECTS",Full Degree Master,1 block,Block 1,C,"40 students out of which 15 spaces are reserved for students from disciplines other than computer science (e.g. industry participants, students from business, mathematics, engineering, etc.). The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.",['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Boris Düdder (7-6471746b75306642666b306d7730666d)'],Saved on the 19-04-2024
https://kurser.ku.dk/course/ndab24009u/2025-2026,NDAB24009U Co-design af digital sundhed,Årgang 2025/2026,Bacheloruddannelsen i sundhed og informatik Bacheloruddannelsen i idræt og fysisk aktivitet,"Kurset giver et overblik over forskellige tilgange til design af digitale sundhedsteknologier og praktisk erfaring med co-design metoder. Formålet er at gøre den studerende i stand til at forstå sammenhæng mellem brugernes problemer og it-baserede løsninger og at kunne afveje styrker og svagheder ved forskellige designmetoder og -teknikker til digital design. Med udgangspunkt i projektarbejde, vil kurset øve den studerende i at arbejde praktisk og refleksivt med undersøgelser, der er baseret på brugerinvolvering og design. Fokus vil være på hvordan designrettede aktiviteter og -artefakter kan bruges til at udvikle en bedre forståelse for hverdagspraksisser og behov samt digitale sundhedsløsninger til borgere, patienter eller andre sundheds-it brugere. Efter kurset kan den studerende selvstændigt udvælge, planlægge og facilitere brugerinvolverende designaktiviteter til udvikling af digitale sundhedsløsninger.","Viden Redegøre for centrale tilgange til design af digitale sundhedsteknologier Redegøre for fordele og ulemper ved forskellige designtilgange Demonstrere grundlæggende viden om co-designmetoder og -teknikker Redegøre for etiske, sikkerheds- og forretningsmæssige udfordringer omkring design af digital sundhed Færdigheder Kan tilrettelægge og facilitere co-design aktiviteter Kan skabe sammenhæng mellem problemer og behov samt løsningsdesign Kan udvælge og prioritere designteknikker til specifikke formål Kompetencer Kan indgå i gruppearbejde omkring co-design workshops eller lignende designaktiviteter Kan selvstændigt planlægge og udføre en design-baseret undersøgelse med borgere, patienter eller andre sundheds-it brugere (i henhold til KUs regler for datasikkerhed og fortrolighed).",Undervisningsmateriale udgøres af udvalgte artikler og bogkapitler. Offentliggøres på kursets Absalon-side ved kursusstart.,"Det er ikke et krav, men det vil være en fordel Kurset kræver, at den studerende har indledende kendskab til kvalitative metoder og interaktionsdesign.","Undervisningen vil være projekt- og seminarbaseret og således indeholde en kombination af forelæsninger, projektarbejde, workshops, oplæg fra de studerende selv og evt. oplæg fra relevante forskere eller profesionelle.","{'Forelæsninger': 24, 'Forberedelse (anslået)': 92, 'Projektarbejde': 60, 'Eksamen': 30, 'I alt': 206}",Mundtlig Kollektiv Løbende feedback i undervisningsforløbet Peerfeedback (studerende giver hinanden feedback),Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Mundtlig prøve på baggrund af aflevering, 20 min. pr
studerende</div></dd><dt>Prøveformsdetaljer</dt><dd>Mundtlig eksamen
<br/>
Den individuelle skriftlige rapport (eksamensopgaven) er et oplæg
til den mundtlige individuelle eksamen, hvor der vil være en faglig
diskussion af rapporten og blive spurgt ind til det samlede pensum.
<br/><br/>
Individuel eksamensopgave
<br/>
I løbet af kurset udleveres en eksamensopgave, som udgøres af en
individuel skriftlig rapport med et omfang på min. 5 og maks. 10
normalsider (dvs. 2400 anslag inkl. mellemrum) uden bilag og
referencer.
<br/><br/>
For at gå til den mundtlige prøve skal afleveringen (individuel
eksamensopgave) være afleveret.</dd><dt>Eksamensforudsætninger</dt><dd><p>Gruppeopgaver 
<br/>
I løbet af kurset udarbejdes 1-3 obligatoriske gruppeopgaver i
relation til kursets centrale temaer. Som udgangspunkt arbejdes i
grupper af størrelsen 3-5 studerende. Gruppeopgaverne afleveres som
rapporter af et omfang på min. 5 og maks. 10 normalsider (dvs. 2400
anslag inkl. mellemrum) uden bilag og referencer. Aflevering og
godkendelse af gruppeopgaver er en forudsætning for indstilling til
eksamen.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt 
<div><p>Værktøjer, der er baseret på AI, herunder generativ AI/LLM, må
benyttes som hjælpemiddel. Det skal af beskrivelsen af metode
fremgå, hvordan disse er brugt. Det er den studerendes ansvar at
sikre besvarelsens nøjagtighed, integritet og originalitet inklusiv
at sikre, at besvarelsen ikke er faktuelt ukorrekt, plagieret eller
indeholder materiale med copyright.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Kvalificering til reeksamen opnås ved genaflevering og
godkendelse af de obligatoriske opgaver senest 3 uger før
reeksamen. Hvis den studerende ikke kan genaflevere en eller flere
af de obligatoriske gruppeopgaver pga. manglende deltagelse, så
udleveres en ny opgave efter aftale med
<br/>
underviser. Den nye opgave skal udarbejdes individuelt og afleveres
senest 3 uger før reeksame</p><p>En ny eksamenopgave udleveres, som består af en individuel
skriftlig rapport med et omfang på min. 5 og maks. 10 normalsider
(dvs. 2400 anslag inkl. mellemrum) uden bilag og referencer. Der
vil ikke være mundtlig eksamen, men den studerende skal aflevere en
videopræsentation som tillæg til den skriftilge rapport. Videoen
skal være på maks. 5 min. og filen skal være under
50MB og afleveres i MP4 format. </p><p> </p><p> </p><p> </p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>For at opnå karakteren 12, skal den studerende overbevisende og
præcist kunne demonstrere viden, færdigheder og kompetencer som
beskrevet under målbeskrivelsen.</p><p> </p></div></div>",,,,,,,,,,,,,Gemt den 28-04-2025
https://kurser.ku.dk/course/ndaa09007u/2024-2025,NDAA09007U Cancelled Computability and Complexity (CoCo),Volume 2024/2025,MSc Programme in Computer Science MSc Programme in Physics,"Computers are everywhere today—at work, in our cars, in our living rooms, and in our pockets—and have changed the world beyond our wildest imagination. Yet these marvellous devices are, at the core, amazingly simple and stupid: all they can do is to mechanically shuffle zeros and ones around. What is the true potential of such automated computational devices? And what are the limits of what can be done by mechanical calculations? Complexity theory gives these deep and fascinating philosophical questions a crisp mathematical meaning. A computational problem is any task that is in principle amenable to being solved by a computer—i.e., it can be solved by mechanical application of mathematical steps. Complexity theory focuses on classifying computational problems according to their inherent difficulty, and on relating those classes of problems to each other. The goal is to understand the power of computers but also—and above all—the limitations of what problems can be solved by them, or more broadly by any type of automated computational process. A problem is regarded as inherently difficult if its solution requires unreasonably large resources regardless of which approach is used to solve it (i.e., no matter which algorithm is employed). Complexity theory formalizes this notion by introducing mathematical models of computation and quantifying the amount of resources needed to solve the problems, such as running time, memory usage, parallelism, communication, et cetera. This course will give an introduction to computational complexity theory, survey some of the major research results, and present some of the open problems that are the focus of current research. While the intention is to give a fairly broad coverage, there might be a slight bias towards areas where researchers at DIKU have made significant contributions to the state of the art.","Knowledge of Basic concepts in computability and complexity theory and how these concepts are related to one another. Foundational research results in modern complexity theory. Computational models (e.g., Turing machines, circuits, interactive protocols) and techniques for showing their limitations. The power and limits of computability, with a focus on the computationally unsolvable Halting problem. Complexity classes such as P , NP , PSPACE , EXPSPACE , L , and NL . Tools and techniques for classifying problems according to their computational difficulty (including reductions). Computational problems that are computable in principle but appear to be intractable to solve efficiently with theoretical guarantees on algorithm performance. Skills in Using standard tools and techniques in modern complexity theory to solve problems amenable to such methods. Presenting foundational results (with proofs and constructions) in writing, using precise terminology and an appropriate level of technical detail. Modelling computational problems mathematically and classifying them with respect to computational hardness. Competences to Identify relevant tools and techniques for complexity-theoretic problems. Present complexity-theoretic arguments with mathematical stringency orally and in writing. Read and understand material on advanced topics in the computational complexity theory research literature.","Most likely, the course will mostly be following the textbook Computational Complexity: A Modern Approach by Sanjeev Arora and Boaz Barak, at least for the first half of the course. Towards the end of the course we might use separate lecture notes and/or research articles. More information will be provided on Absalon closer to the start date of the course.","This course is intended to be relevant and accessible to all students, but the main target audience are Master's and PhD students in computer science and mathematics. The course is also suitable for PhD students in mathematics or computer science who have not previously taken a dedicated course on computational complexity theory. You will need (knowledge equivalent to) basic courses in discrete mathematics and algorithms, and should have a firm grasp of such material. There are no additional formal prerequisites, but you will need mathematical maturity and a willingness to learn new, and sometimes conceptually challenging, material.",Lectures and exercise classes.,"{'Lectures': 42, 'Preparation': 116, 'Theory exercises': 16, 'Exam': 32, 'Total': 206}",Written Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>4-5 problem sets will be handed out at regular intervals
throughout the course. The final grade will be an overall
assessment of the results of the problem sets.</dd><dt>Aid</dt><dd>Written aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Students who do not pass on the problem sets will be given the
possibility to resubmit assignments and/or to work on and hand in
extra problem sets.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAA09007U,"7,5 ECTS",Full Degree Master,1 block,Block 3,A,The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Jakob Nordström (2-6c7042666b306d7730666d)'],Saved on the 31-01-2025
https://kurser.ku.dk/course/ndaa09007u/2025-2026,NDAA09007U Computability and Complexity (CoCo),Volume 2025/2026,MSc Programme in Computer Science MSc Programme in Physics,"Computers are everywhere today—at work, in our cars, in our living rooms, and in our pockets—and have changed the world beyond our wildest imagination. Yet these marvellous devices are, at the core, amazingly simple and stupid: all they can do is to mechanically shuffle zeros and ones around. What is the true potential of such automated computational devices? And what are the limits of what can be done by mechanical calculations? Complexity theory gives these deep and fascinating philosophical questions a crisp mathematical meaning. A computational problem is any task that is in principle amenable to being solved by a computer—i.e., it can be solved by mechanical application of mathematical steps. Complexity theory focuses on classifying computational problems according to their inherent difficulty, and on relating those classes of problems to each other. The goal is to understand the power of computers but also—and above all—the limitations of what problems can be solved by them, or more broadly by any type of automated computational process. A problem is regarded as inherently difficult if its solution requires unreasonably large resources regardless of which approach is used to solve it (i.e., no matter which algorithm is employed). Complexity theory formalizes this notion by introducing mathematical models of computation and quantifying the amount of resources needed to solve the problems, such as running time, memory usage, parallelism, communication, et cetera. This course will give an introduction to computational complexity theory, survey some of the major research results, and present some of the open problems that are the focus of current research. While the intention is to give a fairly broad coverage, there might be a slight bias towards areas where researchers at DIKU have made significant contributions to the state of the art.","Knowledge of Basic concepts in computability and complexity theory and how these concepts are related to one another. Foundational research results in modern complexity theory. Computational models (e.g., Turing machines, circuits, interactive protocols) and techniques for showing their limitations. The power and limits of computability, with a focus on the computationally unsolvable Halting problem. Complexity classes such as P , NP , PSPACE , EXPSPACE , L , and NL . Tools and techniques for classifying problems according to their computational difficulty (including reductions). Computational problems that are computable in principle but appear to be intractable to solve efficiently with theoretical guarantees on algorithm performance. Skills in Using standard tools and techniques in modern complexity theory to solve problems amenable to such methods. Presenting foundational results (with proofs and constructions) in writing, using precise terminology and an appropriate level of technical detail. Modelling computational problems mathematically and classifying them with respect to computational hardness. Competences to Identify relevant tools and techniques for complexity-theoretic problems. Present complexity-theoretic arguments with mathematical stringency orally and in writing. Read and understand material on advanced topics in the computational complexity theory research literature.","Most likely, the course will mostly be following the textbook Computational Complexity: A Modern Approach by Sanjeev Arora and Boaz Barak, at least for the first half of the course. Towards the end of the course we might use separate lecture notes and/or research articles. More information will be provided on Absalon closer to the start date of the course.","This course is intended to be relevant and accessible to all students, but the main target audience are Master's and PhD students in computer science and mathematics. The course is also suitable for PhD students in mathematics or computer science who have not previously taken a dedicated course on computational complexity theory. You will need (knowledge equivalent to) basic courses in discrete mathematics and algorithms, and should have a firm grasp of such material. There are no additional formal prerequisites, but you will need mathematical maturity and a willingness to learn new, and sometimes conceptually challenging, material.",Lectures and exercise classes.,"{'Lectures': 42, 'Preparation': 116, 'Theory exercises': 16, 'Exam': 32, 'Total': 206}",Written Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>4-5 problem sets will be handed out at regular intervals
throughout the course. The final grade will be an overall
assessment of the results of the problem sets.</dd><dt>Aid</dt><dd>Written aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Students who do not pass on the problem sets will be given the
possibility to resubmit assignments and/or to work on and hand in
extra problem sets.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAA09007U,"7,5 ECTS",Full Degree Master,1 block,Block 3,A,The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Jakob Nordström (2-6c7042666b306d7730666d)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak12006u/2025-2026,NDAK12006U Computational Methods in Simulation (CMIS),Volume 2025/2026,MSc Programme in Computer Science MSc Programme in Physics,"Computational methods in simulation are an important computer tool in many disciplines like bioinformatics, scientific computing, and computational physics, computational chemistry, computational biology, computer animation, and many more. A wide range of problems can be solved using computational methods like biomechanical modeling of humans such as computing the stress field of bones or computational fluid dynamics solving for the motion of liquids, gasses, and thin films. Dealing with the motion of atoms and molecules using molecular dynamics. Computing the dynamic motion of Robots or mechanical systems and many more. This course will build up a toolbox of simulation methods that the student can use when building solutions in their future studies. Therefore this course is an ideal supplement for students coming from many different fields in science. This course aims to create an overview of typically used simulation methods and techniques. The course seeks to give insight into the application of methods and techniques on examples such as the motion of deformable models, fluid flows, heat diffusion, etc. During the course, the student will be presented with mathematical models such as a system of partial differential equations. The course seeks to teach the student the classical approaches to reformulate and approximate mathematical models in such a way that they can be used for computations on a computer. This course teaches the basic theory of simulation methods. The focus is on deep learning of how the methods covered during the course works. Both at a theoretical level and also at the implementation level with a focus on computer science and good programming practice. There will be weekly programming exercises where students will implement the algorithms and methods introduced from theory and apply their implementations to case-study problems like computing the motion of gas or granular material. The course will cover topics such as finite difference approximations (FDM), finite volume method (FVM) and finite element method (FEM), etc.","Knowledge of Computer Simulation Theory of discretization methods (FEM, FVM, FDM, etc) Skills to Apply the finite element method (FEM) on a PDE Apply the finite volume method (FVM) on a PDE Apply the finite difference method (FDM) on a PDE Competences to Apply a discretization method to a given partial differential equation (PDE) to derive a computer simulation model Implement a computer simulator using a high-level programming language",See Absalon when the course is set up.,"It is expected that students know how to install and use Python or Matlab by themselves. Any programming language is allowed, but we only offer help in Python and Matlab. It is expected that students know what matrices and vectors are and that students can differentiate vector functions. Academic qualifications equivalent to a BSc degree is recommended. Hence, experience with setting up experiments and writing reports is expected. Theorems like fundamental theorem of calculus, mean value theorem or Taylors theorem will be used during the course. The inquisitive students may find more in-depth knowledge from Chapters 2, 3, 5, 6 and 13 of R. A. Adams, Calculus, 3rd ed. Addison Wesley.","A mixture of lectures, study groups, and project group work with individual hand-ins.","{'Lectures': 21, 'Preparation': 36, 'Exercises': 49, 'Project work': 100, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, 30 minutes (no preparation)</div></dd><dt>Type of assessment details</dt><dd>The exam takes an outset in theory taught over the course.
Students should be able to derive theory/math on the blackboard
during the examination</dd><dt>Examination prerequisites</dt><dd><p>To qualify for the exam the student must complete 3 out of
a maximum of 4 short reports which can be made as a group or
as individual reports. The written reports should be maximally 10
pages.</p><p>For programming tasks specifically, the use of GitHub Copilot or
similar AI-based programming tools is permitted.</p><p>The finite list of allowed AI-tools will be announced in
Absalon.</p></dd><dt>Aid</dt><dd>Only certain aids allowed (see description below) 
<div><p>For the oral examination only print outs of the student's
own hand-ins are permitted.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The reexam format and qualification for reexam are the same as
for the regular exam. The reports must be submitted no later than
two weeks before the re-exam week to qualify for the re-exam.</p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>To obtain the grade 12 the student should convincingly and
accurately demonstrate the knowledge, skills, and competences
described under Learning Outcome.</p></div></div>",English,NDAK12006U,"7,5 ECTS",Full Degree Master,1 block,Block 4,C,40 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Melanie Ganz-Benjaminsen (4-6e687581476b7035727c356b72)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak10009u/2024-2025,NDAK10009U Computational Geometry (CG),Volume 2024/2025,MSc Programme in Computer Science MSc Programme in Bioinformatics,"The purpose of this course is to introduce the students to the methods for solving problems where geometrical properties are of particular importance. We will look at some basic problems; at algorithmic paradigms especially suited to solve such problems, and at geometric data structures. We will also look at the applications of computational geometry in relation to the problems of for example molecular biology. No a priori knowledge of molecular biology is required. During the course, the students will be asked to make a project proposal (7.5 or 15 ECTS) which they will have the opportunity to work on in the following block. Computational Geometry is concerned with the design and analysis of algorithms and heuristics, exploiting the geometrical aspects of underlying problems (i.e. routing problems, network design, localization problems and intersection problems). Applications can be found in VLSI-design, pattern recognition, image processing, operations research, statistics and molecular biology.","Knowledge in Convex hulls and algorithms for their determination. Polygon triangulations and algorithms for their determination. Selected range search methods. Selected point location methods. Voronoi diagrams and Delaunay triangulations and algorithms for their determination. Selected algorithms for robot motion and visibility problems. Geometric paradigms (e.g. plane sweep, fractional cascading, prune-and-search). Skills to Describe, implement and use selected basic algorithms for solving geometric problems (e.g. convex hulls, localization, searching, visibility graphs). Apply geometric paradigms (e.g. plane sweep, fractional cascading, prune and search) and data structures (e.g. Voronoi diagrams, Delaunay triangulations, visibility graphs) to solve geometric problems. Present a scientific paper where computational geometry plays a crucial role. Read computational geometry papers in scientific journals. Competences to Evaluate which methods are best suited for solving problems involving geometrical properties.",See Absalon when the course is set up.,Bachelor's level course in algorithms and data structures or similar. Academic qualifications equivalent to a BSc degree is recommended.,"Lectures, group work and presentations.","{'Lectures': 20, 'Preparation': 115, 'Theory exercises': 60, 'Seminar': 10, 'Exam': 1, 'Total': 206}",Written Oral Individual Feedback by final exam (In addition to the grade) Peer feedback (Students give each other feedback),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, 20 minutes</div></dd><dt>Type of assessment details</dt><dd>The oral examination is without preparation.</dd><dt>Exam registration requirements</dt><dd><p>Seminar presentation and solution of what is corresponding to
50% out of 6 assignments.</p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as ordinary exam.</p><p>To qualify for the re-exam 50% out of 6 assignments must be
handed in and approved no later than two weeks prior to
re-exam date.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK10009U,"7,5 ECTS",Full Degree Master,1 block,Block 3,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Mikkel Vind Abrahamsen (4-6f6b636442666b306d7730666d)'],Saved on the 25-06-2024
https://kurser.ku.dk/course/ndak10009u/2025-2026,NDAK10009U Computational Geometry (CG),Volume 2025/2026,MSc Programme in Computer Science MSc Programme in Bioinformatics,"The purpose of this course is to introduce the students to the methods for solving computational problems involving geometric objects. We will look at various problems and study algorithmic paradigms and data structures especially suited to solve geometric problems. Computational Geometry is concerned with the design and analysis of algorithms and heuristics, exploiting the geometrical aspects of underlying problems (i.e. routing problems, network design, localization problems and intersection problems). Applications can be found in VLSI-design, pattern recognition, image processing, operations research, statistics and molecular biology.","Knowledge in Convex hulls and algorithms to find them. Polygon triangulations and algorithms to find them. Selected range search methods. Selected point location methods. Voronoi diagrams and Delaunay triangulations and algorithms to find them. Selected algorithms for robot motion and visibility problems. Geometric paradigms (e.g. plane sweep, fractional cascading, prune-and-search). Skills to Describe, implement and use selected basic algorithms for solving geometric problems (e.g. convex hulls, localization, searching, visibility graphs). Apply geometric paradigms (e.g. plane sweep, fractional cascading, prune and search) and data structures (e.g. Voronoi diagrams, Delaunay triangulations, visibility graphs) to solve geometric problems. Present a scientific paper where computational geometry plays a crucial role. Read computational geometry papers in scientific journals. Competences to Evaluate which methods are best suited for solving problems involving geometrical properties.",See Absalon when the course is set up.,Bachelor's level course in algorithms and data structures or similar. Academic qualifications equivalent to a BSc degree is recommended.,"Lectures, group work and presentations.","{'Lectures': 20, 'Preparation': 115, 'Theory exercises': 60, 'Seminar': 10, 'Exam': 1, 'Total': 206}",Written Oral Individual Feedback by final exam (In addition to the grade) Peer feedback (Students give each other feedback),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, 25 minutes</div></dd><dt>Type of assessment details</dt><dd>The oral examination is without preparation.</dd><dt>Examination prerequisites</dt><dd><p>Seminar presentation and solution of 50% of the problems (spread
over 6 assignments).</p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as ordinary exam.</p><p>To qualify for the re-exam 50% out of 6 assignments must be
handed in and approved no later than two weeks prior to
re-exam date.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK10009U,"7,5 ECTS",Full Degree Master,1 block,Block 3,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Mikkel Vind Abrahamsen (4-7c7870714f73783d7a843d737a)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak12006u/2024-2025,NDAK12006U Computational Methods in Simulation (CMIS),Volume 2024/2025,MSc Programme in Computer Science MSc Programme in Physics,"Computational methods in simulation are an important computer tool in many disciplines like bioinformatics, scientific computing, and computational physics, computational chemistry, computational biology, computer animation, and many more. A wide range of problems can be solved using computational methods like biomechanical modeling of humans such as computing the stress field of bones or computational fluid dynamics solving for the motion of liquids, gasses, and thin films. Dealing with the motion of atoms and molecules using molecular dynamics. Computing the dynamic motion of Robots or mechanical systems and many more. This course will build up a toolbox of simulation methods that the student can use when building solutions in his or her future studies. Therefore this course is an ideal supplement for students coming from many different fields in science. This course aims to create an overview of typically used simulation methods and techniques. The course seeks to give insight into the application of methods and techniques on examples such as the motion of deformable models, fluid flows, heat diffusion, etc. During the course, the student will be presented with mathematical models such as a system of partial differential equations. The course seeks to teach the student the classical approaches to reformulate and approximate mathematical models in such a way that they can be used for computations on a computer. This course teaches the basic theory of simulation methods. The focus is on deep learning of how the methods covered during the course works. Both at a theoretical level and also at the implementation level with a focus on computer science and good programming practice. There will be weekly programming exercises where students will implement the algorithms and methods introduced from theory and apply their implementations to case-study problems like computing the motion of gas or granular material. The course will cover topics such as finite difference approximations (FDM), finite volume method (FVM) and finite element method (FEM), etc.","Knowledge of Computer Simulation Theory of discretization methods (FEM, FVM, FDM, etc) Skills to Apply the finite element method (FEM) on a PDE Apply the finite volume method (FVM) on a PDE Apply the finite difference method (FDM) on a PDE Competences to Apply a discretization method to a given partial differential equation (PDE) to derive a computer simulation model Implement a computer simulator using a high-level programming language",See Absalon when the course is set up.,"It is expected that students know how to install and use Python or Matlab by themselves. Any programming language is allowed, but we only offer help in Python and Matlab. It is expected that students know what matrices and vectors are and that students can differentiate vector functions. Academic qualifications equivalent to a BSc degree is recommended. Hence, experience with setting up experiments and writing reports is expected. Theorems like fundamental theorem of calculus, mean value theorem or Taylors theorem will be used during the course. The inquisitive students may find more in-depth knowledge from Chapters 2, 3, 5, 6 and 13 of R. A. Adams, Calculus, 3rd ed. Addison Wesley.","A mixture of lectures, study groups, and project group work with individual hand-ins.","{'Lectures': 21, 'Preparation': 36, 'Exercises': 49, 'Project work': 100, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, 30 minutes (no preparation)</div></dd><dt>Type of assessment details</dt><dd>The exam takes an outset in theory taught over the course.
Students should be able to derive theory/math on the blackboard
during the examination</dd><dt>Exam registration requirements</dt><dd><p>To qualify for the exam the student must complete 3 out of
a maximum of 4 short reports which can be made as a group or
as individual reports. The written reports should be maximally 10
pages.</p></dd><dt>Aid</dt><dd>Without aids</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The reexam format and qualification for reexam are the same as
for the regular exam. The reports must be submitted no later than
two weeks before the re-exam week to qualify for the re-exam.</p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>To obtain the grade 12 the student should convincingly and
accurately demonstrate the knowledge, skills, and competences
described under Learning Outcome.</p></div></div>",English,NDAK12006U,"7,5 ECTS",Full Degree Master,1 block,Block 4,C,40 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Melanie Ganz-Benjaminsen (4-76707d894f73783d7a843d737a)'],Saved on the 24-04-2024
https://kurser.ku.dk/course/ndab16005u/2024-2025,NDAB16005U Computersystemer (CompSys),Årgang 2024/2025,Bacheloruddannelsen i datalogi,"Kurset ""Computersystemer"" giver et overblik over essensen af maskinarkitekturer, styresystemer, og datanetværk. Kurset er rettet mod datalogistuderende, og søger at udvikle en grundlæggende forståelse for koncepter indenfor datamater og it-systemer. Efter kurset vil den studerende besidde evnen til at reflektere over den praktiske ydeevne og udførsel af lavniveau programmer, samt besidde det faglige grundlag for senere praktiske og teoretiske kurser i datalogi. Kursets indhold er tematisk opdelt som følger: Talrepræsentationer, aritmetik og boolsk algebra Instruktionssæt, (symbolsk) maskinsprog, processorarkitektur, og lagerhierarkier Tråde, skedulering, og synkronisering Processer og virtuel hukommelse Filsystemer og I/O enheder Datanetværk Datasikkerhed Kurset vil undervejs introducere studerende til relevante systemprogrammeringssprog, samt relevante udviklingsværktøjer, koncepter og teknikker indenfor systemprogrammering.","Efter kurset forventes de studerende at have: Viden om Logiske komponenter til opbygning af beregningsenheder og hukommelseskomponenter, samt boolsk algebra. Forskellige talrepræsentationer i et edb-system. Basal pipelinet og out-of-order eksekverings processorarkitektur, samt flerkerne arkitektur. Enkelt og flere niveauers nærlager. I/O enheder og interrupt-håndtering. Styresystemers tråde- og procesabstraktioner. Lagerhierarkier, virtuelle adresserum og deres understøttelse i hardware. Klassiske synkroniseringsproblemer og associerede implementeringsmekanismer, såsom opdagelse af kapløbstilfælde og baglås. Logisk og fysisk opbygning af forskellige filsystemer. Lagdelt protokolstruktur i datanetværk (applikations-, transport-, netværks- og forbindelseslag). Mekanismerne bag klassiske datanetværk, heruder pålidelig datatransmission, pakkekobling og medieadgang. Opbygning af datacentre og klynger. Basal anvendt kryptografi, og operationelle metoder til at sikre styresystemsmekanismer, netværksprotokoller og applikationer. Færdigheder i at Implementere enkle programmer i (symbolsk) maskinsprog, og oversætte programstumper skrevet i et systemprogrammeringssprog til tilsvarende maskinsprog. Redegøre for de forskellige motivationer for samtidighed, lagerhierarkier, virtuel hukommelse og lagdelt protokolstruktur i edb-systemer. Benytte gængse værktøjer til at foretage udvikling, modifikation og udvidelse af evt. netværksforbundne, flertrådede programmer på systemniveau, heriblandt håndtering af virtuel hukommelse og I/O på maskinniveau. Systematisk afprøve, fejlrette og dokumentere programmel på systemniveau. Kompetencer i at Ræsonnere omkring processorarkitektur, lagerhierarkier, styresystemer og datanetværk. Analysere ydeevnen af programmer baseret på viden om processorarkitektur, lagerhierarkier og styresystemer. Designe og implementere den grundlæggende funktionalitet for forskellige styresystems- og netværkskomponenter. Ræsonnere omkring korrektheden af flertrådede programmer, herunder strategier for undvigelse af kapløbstilfælde og baglås. Ræsonnere omkring enkle sikkerhedsegenskaber for et givent system.",Offentliggøres på kursets Absalon-side ved kursusstart.,"Programmering og problemløsning (PoP), eller et tilsvarende kursus, efter godkendelse af den kursusansvarlige. Kendskab til programmering i et imperativt programmeringssprog, som gennemgået i Softwareudvikling, samt datastrukturer og basale algoritmer, som undervist i Diskret matematik og algoritmer (DMA).","Forelæsninger og øvelsestimer med praktiske og teoretiske hjemmeopgaver, samt programmeringsprojekter afrapporteret med skriftlige rapporter (i grupper).","{'Forelæsninger': 62, 'Forberedelse (anslået)': 109, 'Teoretiske øvelser': 62, 'Projektarbejde': 175, 'Eksamen': 4, 'I alt': 412}",Skriftlig Kollektiv Løbende feedback i undervisningsforløbet Nærmere information vedrørende feedback gives ved kursusstart.,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>15 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig stedprøve, 4 timer med opsyn.</div></dd><dt>Prøveformsdetaljer</dt><dd>Skriftlig prøve med opsyn.</dd><dt>Krav til indstilling til eksamen</dt><dd><p>Opnå 50 % af de mulige point, der kan opnås i 6-8
afleveringsopgaver af varierende størrelse, herunder
programmeringsprojekter og teoretiske opgaver, som vil skulle løses
både individuelt og i grupper. </p><p>Der kan stilles krav om opnåelse af point for en delmængde af
afleveringerne, som dog stadig højest kan være 50 % af samlede
mulige point af denne delmængde. Detaljer om størrelse af
afleveringer og opdelinger vil blive offentliggjort ved
kursusstart.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt</dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Skriftlig prøve, 4 timer med opsyn. </p><p>Kvalifikation til deltagelse i reeksamen opnås ved genaflevering
af afleveringer senest 3 uger før reeksamen, således at
samme krav som for indstillingskravet til den ordinær eksamen
opfyldes.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 14-02-2024
https://kurser.ku.dk/course/ndab16005u/2025-2026,NDAB16005U Computersystemer (CompSys),Årgang 2025/2026,Bacheloruddannelsen i datalogi,"Kurset ""Computersystemer"" giver et overblik over essensen af maskinarkitekturer, styresystemer, og datanetværk. Kurset er rettet mod datalogistuderende, og søger at udvikle en grundlæggende forståelse for koncepter indenfor datamater og it-systemer. Efter kurset vil den studerende besidde evnen til at reflektere over den praktiske ydeevne og udførsel af lavniveau programmer, samt besidde det faglige grundlag for senere praktiske og teoretiske kurser i datalogi. Kursets indhold er tematisk opdelt som følger: Talrepræsentationer, aritmetik og boolsk algebra Instruktionssæt, (symbolsk) maskinsprog, processorarkitektur, og lagerhierarkier Tråde, skedulering, og synkronisering Processer og virtuel hukommelse Filsystemer og I/O enheder Datanetværk Datasikkerhed Kurset vil undervejs introducere studerende til relevante systemprogrammeringssprog, samt relevante udviklingsværktøjer, koncepter og teknikker indenfor systemprogrammering.","Efter kurset forventes de studerende at have: Viden om Logiske komponenter til opbygning af beregningsenheder og hukommelseskomponenter, samt boolsk algebra. Forskellige talrepræsentationer i et edb-system. Basal pipelinet og out-of-order eksekverings processorarkitektur, samt flerkerne arkitektur. Enkelt og flere niveauers nærlager. I/O enheder og interrupt-håndtering. Styresystemers tråde- og procesabstraktioner. Lagerhierarkier, virtuelle adresserum og deres understøttelse i hardware. Klassiske synkroniseringsproblemer og associerede implementeringsmekanismer, såsom opdagelse af kapløbstilfælde og baglås. Logisk og fysisk opbygning af forskellige filsystemer. Lagdelt protokolstruktur i datanetværk (applikations-, transport-, netværks- og forbindelseslag). Mekanismerne bag klassiske datanetværk, heruder pålidelig datatransmission, pakkekobling og medieadgang. Opbygning af datacentre og klynger. Basal anvendt kryptografi, og operationelle metoder til at sikre styresystemsmekanismer, netværksprotokoller og applikationer. Færdigheder i at Implementere enkle programmer i (symbolsk) maskinsprog, og oversætte programstumper skrevet i et systemprogrammeringssprog til tilsvarende maskinsprog. Redegøre for de forskellige motivationer for samtidighed, lagerhierarkier, virtuel hukommelse og lagdelt protokolstruktur i edb-systemer. Benytte gængse værktøjer til at foretage udvikling, modifikation og udvidelse af evt. netværksforbundne, flertrådede programmer på systemniveau, heriblandt håndtering af virtuel hukommelse og I/O på maskinniveau. Systematisk afprøve, fejlrette og dokumentere programmel på systemniveau. Kompetencer i at Ræsonnere omkring processorarkitektur, lagerhierarkier, styresystemer og datanetværk. Analysere ydeevnen af programmer baseret på viden om processorarkitektur, lagerhierarkier og styresystemer. Designe og implementere den grundlæggende funktionalitet for forskellige styresystems- og netværkskomponenter. Ræsonnere omkring korrektheden af flertrådede programmer, herunder strategier for undvigelse af kapløbstilfælde og baglås. Ræsonnere omkring enkle sikkerhedsegenskaber for et givent system.",Offentliggøres på kursets Absalon-side ved kursusstart.,"Programmering og problemløsning (PoP), eller et tilsvarende kursus, efter godkendelse af den kursusansvarlige. Kendskab til programmering i et imperativt programmeringssprog, som gennemgået i Softwareudvikling, samt datastrukturer og basale algoritmer, som undervist i Diskret matematik og algoritmer (DMA).","Forelæsninger og øvelsestimer med praktiske og teoretiske hjemmeopgaver, samt programmeringsprojekter afrapporteret med skriftlige rapporter (i grupper).","{'Forelæsninger': 62, 'Forberedelse (anslået)': 109, 'Teoretiske øvelser': 62, 'Projektarbejde': 175, 'Eksamen': 4, 'I alt': 412}",Skriftlig Kollektiv Løbende feedback i undervisningsforløbet Nærmere information vedrørende feedback gives ved kursusstart.,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>15 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig stedprøve, 4 timer med opsyn.</div></dd><dt>Prøveformsdetaljer</dt><dd>Skriftlig prøve med opsyn.</dd><dt>Eksamensforudsætninger</dt><dd><p>Opnå 50 % af de mulige point, der kan opnås i 6-8
afleveringsopgaver af varierende størrelse, herunder
programmeringsprojekter og teoretiske opgaver, som vil skulle løses
både individuelt og i grupper. </p><p>Der kan stilles krav om opnåelse af point for en delmængde af
afleveringerne, som dog stadig højest kan være 50 % af samlede
mulige point af denne delmængde. Detaljer om størrelse af
afleveringer og opdelinger vil blive offentliggjort ved
kursusstart.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt undtagen Generativ AI og
internetadgang</dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Skriftlig prøve, 4 timer med opsyn. </p><p>Kvalifikation til deltagelse i reeksamen opnås ved genaflevering
af afleveringer senest 3 uger før reeksamen, således at
samme krav som for indstillingskravet til den ordinær eksamen
opfyldes.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 24-02-2025
https://kurser.ku.dk/course/ndak21006u/2025-2026,NDAK21006U Data Parallel Programming (DPP),Volume 2025/2026,,"Data parallel programming models express parallelism declaratively (explicitly) by means of higher-order language constructs, whose rich semantics allow high-level reasoning for exploring the large space of strategies for efficiently mapping application's parallelism to hardware. The aim of the course is to introduce the principles and practice of parallel programming (e.g., programming using multiple hardware cores or processors in order to gain speed) in a declarative programming setting. The course focuses on deterministic programming models that are easy for humans to reason about, yet possible to be compiled to efficient code. Potential topics of interest range from (i) compilation techniques for nested parallel programs, e.g., flattening, to (ii) locality optimizations, e.g., tiling and fusion of stencil computation, to (iii) supporting low-level data parallel programming (e.g., SPMD programming model), to (iv) optimization frameworks aimed at imperative loops with affine indexing. The course includes current research on these topics and relies heavily on scientific papers as its source materials. The course will demonstrate the presented parallelisation strategies on applications from various domains, such as machine-learning, image-processing and finance. The lectures will provide an overview of approaches to parallel programming and associated analysis and code-generation techniques, and give practical instructions to writing, testing, and optimising data-parallel programs. The topics covered in the lecture will be exercised in lab assignments, consisting of programming and analysis of programs as well as questions for theoretical discussion.","Knowledge of the difference between the concepts of concurrency and parallelism, and between data parallelism and task parallelism strategies for optimizing parallelism and locality, programming patterns different approaches to parallelism taken in various languages, with particular focus on how high-level description of parallelism may be mapped in a principled way to high-performance hardware. Skills to express a parallel computation in data-parallel paradigms write, modify, optimize and test data-parallel programs, in different programming environments, targeting different architectures such as multi-core CPUs and GPGPUs Competences to identify opportunities for using data-parallel programming to parallelise algorithms select a suitable programming language/dialect to implement a parallel algorithm on a given hardware platform",The course does not use a single textbook but instead provides tutorials and scientific papers available from the course pages.,"The course syllabus assumes basic knowledge and programming competences in a functional programming language, which, at DIKU, can be acquired through ”Advanced programming”, or through self-study. Academic qualifications equivalent to a BSc degree is recommended.","Lectures, in-class exercises, group work on programming and analysis assignments.","{'Lectures': 28, 'Preparation': 15, 'Exercises': 60, 'Laboratory': 14, 'Project work': 83, 'Exam Preparation': 5, 'Exam': 1, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment based on 3-4 individual assignments (that
account for 40% of the final grade) and a group mini-project with
individual oral defense 20-25 minutes (that account for 60% of the
final grade).
<br/><br/>
The two exams must be individually approved. The final grade is
based on an overall assessment.</dd><dt>Aid</dt><dd>Only certain aids allowed (see description below) 
<div><p>For the 3-4 individual assignments &amp; the group mini-project
all aids are allowed.</p><p>For the oral defense no aids other than presentation slides
are allowed.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Resubmission of (individual) assignments and (group)
mini-project and a 30 minutes oral examination without
preparation in full course syllabus.</p><p>The two exams must be individually approved. The final
grade is based on an overall assessment.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK21006U,"7,5 ECTS",Full Degree Master,1 block,Block 2,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Cosmin Eugen Oancea (13-667276706c713172647166686443676c316e7831676e)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak21006u/2024-2025,NDAK21006U Data Parallel Programming (DPP),Volume 2024/2025,,"Data parallel programming models express parallelism declaratively (explicitly) by means of higher-order language constructs, whose rich semantics allow high-level reasoning for exploring the large space of strategies for efficiently mapping application's parallelism to hardware. The aim of the course is to introduce the principles and practice of parallel programming (e.g., programming using multiple hardware cores or processors in order to gain speed) in a declarative programming setting. The course focuses on deterministic programming models that are easy for humans to reason about, yet possible to be compiled to efficient code. Potential topics of interest range from (i) compilation techniques for nested parallel programs, e.g., flattening, to (ii) locality optimizations, e.g., tiling and fusion of stencil computation, to (iii) supporting low-level data parallel programming (e.g., SPMD programming model), to (iv) optimization frameworks aimed at imperative loops with affine indexing. The course includes current research on these topics and relies heavily on scientific papers as its source materials. The course will demonstrate the presented parallelisation strategies on applications from various domains, such as machine-learning, image-processing and finance. The lectures will provide an overview of approaches to parallel programming and associated analysis and code-generation techniques, and give practical instructions to writing, testing, and optimising data-parallel programs. The topics covered in the lecture will be exercised in lab assignments, consisting of programming and analysis of programs as well as questions for theoretical discussion.","Knowledge of the difference between the concepts of concurrency and parallelism, and between data parallelism and task parallelism strategies for optimizing parallelism and locality, programming patterns different approaches to parallelism taken in various languages, with particular focus on how high-level description of parallelism may be mapped in a principled way to high-performance hardware. Skills to express a parallel computation in data-parallel paradigms write, modify, optimize and test data-parallel programs, in different programming environments, targeting different architectures such as multi-core CPUs and GPGPUs Competences to identify opportunities for using data-parallel programming to parallelise algorithms select a suitable programming language/dialect to implement a parallel algorithm on a given hardware platform",The course does not use a single textbook but instead provides tutorials and scientific papers available from the course pages.,"The course syllabus assumes basic knowledge and programming competences in a functional programming language, which, at DIKU, can be acquired through ”Advanced programming”, or through self-study. Academic qualifications equivalent to a BSc degree is recommended.","Lectures, in-class exercises, group work on programming and analysis assignments.","{'Lectures': 28, 'Preparation': 15, 'Exercises': 60, 'Laboratory': 14, 'Project work': 83, 'Exam Preparation': 5, 'Exam': 1, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment based on 3-4 individual assignments (that
account for 40% of the final grade) and a group mini-project with
individual oral defense 20-25 minutes (that account for 60% of the
final grade).
<br/><br/>
The two exams must be individually approved. The final grade is
based on an overall assessment.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Resubmission of (individual) assignments and (group)
mini-project and a 30 minutes oral examination without
preparation in full course syllabus.</p><p>The two exams must be individually approved. The final
grade is based on an overall assessment.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK21006U,"7,5 ECTS",Full Degree Master,1 block,Block 2,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Cosmin Eugen Oancea (13-677377716d723273657267696544686d326f7932686f)'],Saved on the 16-02-2024
https://kurser.ku.dk/course/ndab21010u/2024-2025,NDAB21010U Databases and Information Systems (DIS),Volume 2024/2025,BSc Programme in Bioinformatics BSc Programme in Computer Science and Economics BSc Programme in Computer Science BSc Programme in Machine Learning and Data Science,"This course introduces students to basic database concepts such as relational databases, normal forms, and transactions. In addition, the course covers system development (basic software development) and version control and includes the practical development of a smaller system (web system, mobile system, or the like, which must be decided before the course starts) as project work. Formal languages and reading of structured text are also covered.","Knowledge of Key database technical concepts such as the relational model, data independence and transactions. Entity-relationship modeling (ER modeling) and relational data modeling, including transformations from ER modeling to relational data modeling. Queries in database query languages, including relational calculus, relational algebra, and SQL. The theory of database normalization, including functional dependencies, keys, and relational decompositions. ACID (atomicity, consistency, isolation, durability) properties and use of transactions. Indexing techniques and their role in database query optimization. Use of constraints and triggers. Facilities for connecting databases, programming environments, and program libraries. Methods for reading structured texts (i.e. regular expressions, finite automata, context-free grammars). Data protection regulation (GDPR) Skills in Developing a data model and realizing database applications starting from the ER modeling, over relational modeling and normalization, to concrete relational, SQL-based database application. Planning and managing an agile, iterative, and learning-oriented system development process, which under given resource and time constraints leads to the realization of a new database application. Competence in Developing a database design and implement database applications. Effectively participating in an agile software development process as part of a group of developers.",See Absalon when the course is set up.,"Programming skills and experience in software development at a level corresponding to the completion of the DIKU courses ""Programming og problemløsning"" and either ""High Performance Programming and Systems"" or ""Computer Systems”.","A combination of lectures, exercise sessions and a practical group project.","{'Lectures': 28, 'Preparation': 78, 'Exercises': 14, 'Project work': 82, 'Exam': 4, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>On-site written exam, 4 hours under invigilation</div></dd><dt>Type of assessment details</dt><dd>The on-site written exam is an ITX exam.
<br/>
See important information about ITX-exams at Study Information,
menu point: Exams -&gt; Exam types and rules -&gt; Written on-site
exams (ITX)</dd><dt>Exam registration requirements</dt><dd><p>1. The group project must be approved.</p><p>2. Two mandatory assignments, marked as pass/fail, must be
passed.</p></dd><dt>Aid</dt><dd>Written aids allowed 
<div><p>Books, notes, printouts are allowed.</p><p>Books, notes, and similar materials can be brought in paper form
or uploaded before the exam and accessed digitally from the ITX
computer. Read more about this at Study Information.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>External censorship</dd><dt>Re-exam</dt><dd><p>4-hour written test with written aids (as in the ordinary
exam). </p><p>If there are 10 or fewer students registered, the re-exam will
be changed to an oral exam (30 min. including voting) without
preparation.</p><p>Exam registration requirements: Mandatory assignments and
the project (possibly as an individual project) must be resubmitted
and approved no later than 3 weeks before the
re-examination date.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAB21010U,"7,5 ECTS",Bachelor,1 block,Block 4,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Dmitriy Traytel (7-7b7968807b6c73476b7035727c356b72)'],Saved on the 20-11-2024
https://kurser.ku.dk/course/ndak17001u/2025-2026,NDAK17001U Data-Driven Financial Models (DatFin),Volume 2025/2026,,"The course gives the student a thorough introduction to financial theory, financial markets and products. Besides theory, students will be introduced to practical problems faced by Financial Engineers through a number of real-world case studies. The course will prepare the student to take other advanced courses within finance. The students who are interested in using big data in financial markets should consider taking this course. We will cover some of the following subjects in class: Introduction to finance and Matlab Delineating Efficient Portfolio and calculate the Efficient Frontier The Capital Asset Pricing Model (CAPM) Interest rate theory, bonds and management of bond portfolios Empirical tests of the CAPM Evaluation of portfolio performance","Knowledge of Financial securities and financial markets Basic statistical properties of financial data Selected financial models, e.g. Single index model (Sharpe's model), Black-Litterman model, CAPM The ideas behind diversification and modern portfolio theory Basic evaluation of financial portfolios and money managers The basic theory of fixed income markets Skills in Using Matlab to analyse financial data Modeling, implementing and evaluating basic trading strategies for risk management Applying mean-variance portfolio theory Competencies in Developing basic financial portfolios using quantitative analysis Performing quantitative evaluation of risk-return trade-offs Testing new trading strategies Using quantitative skills in financial markets","Textbooks are: Introduction to Matlab by MathWorks: https:/​/​www.mathworks.com/​moler/​intro.pdf E. Elton, M. Gruber, S. Brown, W. Goetzmann, Modern Portfolio Theory and Investment Analysis, Wiley",It is expected the students know how to install and use Matlab by themselves. It is also expected that students know what matrices and vectors are and basic statistics (such as linear regression) and basic knowledge of programming in any language. Academic qualifications equivalent to a BSc degree is recommended.,"Mixture of lectures, study groups and project group work with hand-ins.","{'Lectures': 30, 'Preparation': 60, 'Exercises': 30, 'Project work': 80, 'Exam Preparation': 5, 'Exam': 1, 'Total': 206}",Oral Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade),"Self Service at KUnet As an exchange, guest and credit student - click here! 3rd Year B.Sc. students are invited to sign up as well. Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 20
minutes</div></dd><dt>Type of assessment details</dt><dd>The oral examination is without preparation and is primarily
based on the group project report. The group project report is
written in groups of 2-4 students.
<br/><br/>
The grade is based on the group project report and the oral
examination. However, as the oral exam is done individually, grades
may vary significantly between team members, and it is required to
clearly state the individual contributions in the project
report.</dd><dt>Examination prerequisites</dt><dd><p> </p><p> </p></dd><dt>Aid</dt><dd>All aids allowed except Generative AI 
<div><p>Students are allowed to bring their group project
report.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners.</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>In order to qualify for the re-exam, the student must submit a
revised project report with clearly stated individual contributions
no later than 2 weeks prior to the re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK17001U,"7,5 ECTS",Full Degree Master,1 block,Block 2,B1 And D,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Omry Ross (4-716f746b42666b306d7730666d)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak17001u/2024-2025,NDAK17001U Data-Driven Financial Models (DatFin),Volume 2024/2025,,"The course gives the student a thorough introduction to financial theory, financial markets and products. Besides theory, students will be introduced to practical problems faced by Financial Engineers through a number of real-world case studies. The course will prepare the student to take other advanced courses within finance. The students who are interested in using big data in financial markets should consider taking this course. We will cover some of the following subjects in class: Introduction to finance and Matlab Delineating Efficient Portfolio and calculate the Efficient Frontier The Capital Asset Pricing Model (CAPM) Interest rate theory, bonds and management of bond portfolios Empirical tests of the CAPM Evaluation of portfolio performance","Knowledge of Financial securities and financial markets Basic statistical properties of financial data Selected financial models, e.g. Single index model (Sharpe's model), Black-Litterman model, CAPM The ideas behind diversification and modern portfolio theory Basic evaluation of financial portfolios and money managers The basic theory of fixed income markets Skills in Using Matlab to analyse financial data Modeling, implementing and evaluating basic trading strategies for risk management Applying mean-variance portfolio theory Competencies in Developing basic financial portfolios using quantitative analysis Performing quantitative evaluation of risk-return trade-offs Testing new trading strategies Using quantitative skills in financial markets","Suggested literature: Introduction to Matlab by MathWorks: https:/​/​www.mathworks.com/​moler/​intro.pdf E. Elton, M. Gruber, S. Brown, W. Goetzmann, Modern Portfolio Theory and Investment Analysis, Wiley",It is expected the students know how to install and use Matlab by themselves. It is also expected that students know what matrices and vectors are and basic statistics (such as linear regression) and basic knowledge of programming in any language. Academic qualifications equivalent to a BSc degree is recommended.,"Mixture of lectures, study groups and project group work with hand-ins.","{'Lectures': 30, 'Preparation': 60, 'Exercises': 30, 'Project work': 80, 'Exam Preparation': 5, 'Exam': 1, 'Total': 206}",Oral Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade),"Self Service at KUnet As an exchange, guest and credit student - click here! 3rd Year B.Sc. students are invited to sign up as well. Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, 20 minutes</div></dd><dt>Type of assessment details</dt><dd>The oral examination is without preparation and is primarily
based on the group project report.
<br/><br/>
The grade is based on the group project report and the oral
examination. However, as the oral exam is done individually, grades
may vary significantly between team members, and it is required to
clearly state the individual contributions in the project
report.</dd><dt>Exam registration requirements</dt><dd><p>The group project report must be submitted by the due date
in order to qualify for the exam.</p><p>The group project report is written in groups of 2-4
students.</p><p> </p></dd><dt>Aid</dt><dd>Only certain aids allowed 
<div><p>Students are allowed to bring their group project
report.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners.</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>In order to qualify for the re-exam, the student must submit a
revised project report with clearly stated individual contributions
no later than 2 weeks prior to the re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK17001U,"7,5 ECTS",Full Degree Master,1 block,Block 2,B1 And D,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Omry Ross (4-7472776e45696e33707a336970)'],Saved on the 15-02-2024
https://kurser.ku.dk/course/ndab21010u/2025-2026,NDAB21010U Databases and Information Systems (DIS),Volume 2025/2026,BSc Programme in Bioinformatics BSc Programme in Computer Science and Economics BSc Programme in Computer Science BSc Programme in Machine Learning and Data Science,"This course introduces students to basic database concepts such as relational databases, normal forms, and transactions. In addition, the course covers system development (basic software development) and version control and includes the practical development of a smaller system (web system, mobile system, or the like, which must be decided before the course starts) as project work. Formal languages and reading of structured text are also covered.","Knowledge of Key database technical concepts such as the relational model, data independence and transactions. Entity-relationship modeling (ER modeling) and relational data modeling, including transformations from ER modeling to relational data modeling. Queries in database query languages, including relational calculus, relational algebra, and SQL. The theory of database normalization, including functional dependencies, keys, and relational decompositions. ACID (atomicity, consistency, isolation, durability) properties and use of transactions. Indexing techniques and their role in database query optimization. Use of constraints and triggers. Facilities for connecting databases, programming environments, and program libraries. Methods for reading structured texts (i.e. regular expressions, finite automata, context-free grammars). Data protection regulation (GDPR) Skills in Developing a data model and realizing database applications starting from the ER modeling, over relational modeling and normalization, to concrete relational, SQL-based database application. Planning and managing an agile, iterative, and learning-oriented system development process, which under given resource and time constraints leads to the realization of a new database application. Competence in Developing a database design and implement database applications. Effectively participating in an agile software development process as part of a group of developers.",See Absalon when the course is set up.,"Programming skills and experience in software development at a level corresponding to the completion of the DIKU courses ""Programming og problemløsning"" and either ""High Performance Programming and Systems"" or ""Computer Systems”.","A combination of lectures, exercise sessions and a practical group project.","{'Lectures': 28, 'Preparation': 78, 'Exercises': 14, 'Project work': 82, 'Exam': 4, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>On-site written exam, 4 hours under invigilation</div></dd><dt>Examination prerequisites</dt><dd><ol><li>The group project must be approved.</li><li>Two mandatory assignments, marked as pass/fail, must be
passed.</li></ol></dd><dt>Aid</dt><dd>All aids allowed except Generative AI and internet access</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>External censorship</dd><dt>Re-exam</dt><dd><p>4-hour written test with written aids (as in the ordinary
exam). </p><p>If there are 10 or fewer students registered, the re-exam will
be changed to an oral exam (30 min. including voting) without
preparation.</p><p>Exam registration requirements: Mandatory assignments and
the project (possibly as an individual project) must be resubmitted
and approved no later than 3 weeks before the
re-examination date.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAB21010U,"7,5 ECTS",Bachelor,1 block,Block 4,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Dmitriy Traytel (7-7876657d78697044686d326f7932686f)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak24002u/2024-2025,NDAK24002U Deep Learning (DL),Volume 2024/2025,BSc Programme in Machine Learning and Data Science MSc Programme in Computer Science MSc Actuarial Mathematics MSc Mathematics-Economics Msc Statistics,Deep learning has pushed the boundaries in Artificial Intelligence (AI) and has been outperforming the state-of-the-art in numerous applications across a wide range of domains. These include object classification in images and natural language processing tasks such as automatic translation. This course will give you insight into the foundational methods in deep learning and techniques for effectively training deep networks.,"Knowledge of Convolutional neural networks Transformers Message passing and graph neural networks Generative neural networks such as variational autoencoders Basic strategies for interpretability of deep neural networks Training methodology Skills to Select appropriate methodology to solve deep learning problems Implement selected deep learning algorithms Design and train deep learning algorithms Competences to Reflect upon the capabilities and limitations of deep learning algorithms Recognise and describe possible applications of deep learning methodology Design, optimise and use deep models Apply the learned methodology to applications in analysis of real-world data such as images, sound and text Analyse deep learning algorithms",See Absalon for course litterature.,Academic qualifications corresponding to: 1. Linear algebra corresponding to the course Lineær Algebra i datalogi (LinAlgDat). 2. Calculus corresponding to the courses Introduktion til matematik i naturvidenskab (MatIntroNat) and Matematisk Analyse (MatAn). 3. Basic statistics and probability theory corresponding to the course Sandsynlighedsregning og statistik (SS). 4. Machine learning corresponding to Machine Learning A (MLA). Please note that this course includes basic deep learning. 5. Programming experience in Python.,"The course will mix lectures, exercise classes, and project work.","{'Lectures': 32, 'Preparation': 68, 'Exercises': 46, 'Exam': 60, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment of 3-4 written assignments. All
assignments must be passed. The final grade is based on an overall
assessment.</dd><dt>Aid</dt><dd>All aids allowed 
<div><p>For programming tasks specifically, this includes AI-based
programming tools such as github copilot or similar.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam is 25 minutes oral examination, without
preparation, in full course syllabus.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning outcome</p></div></div>",English,NDAK24002U,"7,5 ECTS",Full Degree Master,1 block,Block 2,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Stefan Sommer (6-77737171697644686d326f7932686f)'],Saved on the 14-02-2024
https://kurser.ku.dk/course/ndak24002u/2025-2026,NDAK24002U Deep Learning (DL),Volume 2025/2026,BSc Programme in Machine Learning and Data Science MSc Programme in Computer Science MSc Actuarial Mathematics MSc Mathematics-Economics Msc Statistics,Deep learning has pushed the boundaries in Artificial Intelligence (AI) and has been outperforming the state-of-the-art in numerous applications across a wide range of domains. These include object classification in images and natural language processing tasks such as automatic translation. This course will give you insight into the foundational methods in deep learning and techniques for effectively training deep networks.,"Knowledge of Convolutional neural networks Transformers Message passing and graph neural networks Generative neural networks such as variational autoencoders Basic strategies for interpretability of deep neural networks Training methodology Skills to Select appropriate methodology to solve deep learning problems Implement selected deep learning algorithms Design and train deep learning algorithms Competences to Reflect upon the capabilities and limitations of deep learning algorithms Recognise and describe possible applications of deep learning methodology Design, optimise and use deep models Apply the learned methodology to applications in analysis of real-world data such as images, sound and text Analyse deep learning algorithms",See Absalon for course litterature.,Academic qualifications corresponding to: 1. Linear algebra corresponding to the course Lineær Algebra i datalogi (LinAlgDat). 2. Calculus corresponding to the courses Introduktion til matematik i naturvidenskab (MatIntroNat) and Matematisk Analyse (MatAn). 3. Basic statistics and probability theory corresponding to the course Sandsynlighedsregning og statistik (SS). 4. Machine learning corresponding to Machine Learning A (MLA). Please note that this course includes basic deep learning. 5. Programming experience in Python.,"The course will mix lectures, exercise classes, and project work.","{'Lectures': 32, 'Preparation': 68, 'Exercises': 46, 'Exam': 60, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment of 3-4 written assignments. All
assignments must be passed. The final grade is based on an overall
assessment.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam is 25 minutes oral examination, without
preparation, in the course syllabus.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning outcome</p></div></div>",English,NDAK24002U,"7,5 ECTS",Full Degree Master,1 block,Block 2,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Stefan Sommer (6-7b7775756d7a486c7136737d366c73)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak23007u/2024-2025,NDAK23007U Designing Collaborative Technologies (DesignCoTech),Volume 2024/2025,,"In this course we will explore and experiment with applying new technologies (such as Blockchain, Augmented Reality and the Internet of Things) to support social interaction and collaboration in new ways. Students will start by learning how to study diverse workplaces, drawing on established theories of computer supported cooperative work (CSCW). The goal here will be to learn how to study users and their practices, and to learn from how technologies are used in 'real world’ organisations. Students will then bring these new insights into the Makerspace and start a design process learning how to develop and apply novel technologies in a user-centred way. The overall goal will be to help students to rethink and innovate the future of workplace, and build new collaborative technologies that fit with real users needs. The course has three parts: Ethnographic empirical study of a selected workplace drawing on theoretical theories of computer supported cooperative work Design and prototyping collaborative technologies in the Makerspace using user-centred approaches Re-thinking and innovating the future workplace creating design fictions",Knowledge of Theories in computer supported cooperative work (CSCW) Ethnographic field methods for design User centred design in Makerspaces Skills to Analyse the complexities of workplace using CSCW theories Design collaborative technologies for the future workplace Innovate through iterative prototyping in a Makerspace Competences to Analyse work practices in real life organisations Design workplace technologies supporting people needs Innovate the future of work,Research papers. See Absalon.,Academic qualifications equivalent to a BSc degree is recommended.,"Learning activities include seminars, workshops, explorative exercises, empirical data collection, where students will work theoretically and experimentally with CSCW concepts for analysis and design. Some learning activities will take place in a Makerspace. Moreover, there will be assignments which will require collaboration with students located at University of Maryland, Baltimore, USA - allowing students real-life experiences with globally distributed work.","{'Lectures': 24, 'Preparation': 32, 'Exercises': 24, 'Project work': 125, 'Exam': 1, 'Total': 206}",Oral Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 20 minutes (no
preparation time)</div></dd><dt>Type of assessment details</dt><dd>Specifically, the exam consists of two parts:
<br/><br/>
1. A group report (written assignment) based on the project.
<br/>
2. An individual oral examination (without preparation) based on
the report.
<br/><br/>
The written and oral examination are not weighted, why only one
overall assessment is provided for the two parts of the exam.</dd><dt>Aid</dt><dd>All aids allowed 
<div><p>The use of Large Language Models (LLM)/Large Multimodal Models
(LMM) – such as ChatGPT and GPT-4 - is permitted. The finite
list of allowed AI-tools will be announced in
Absalon.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam. </p><p>For the re-exam the student must submit a new individual report
or resubmit an edited version of the group report no later than 3
weeks before the re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK23007U,"7,5 ECTS",Full Degree Master,1 block,Block 3,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Pernille Bjørn (14-796e7b777275756e376b73787b77496d7237747e376d74)'],Saved on the 31-05-2024
https://kurser.ku.dk/course/ndab15008u/2025-2026,NDAB15008U Diskret matematik og algoritmer (DMA),Årgang 2025/2026,Bacheloruddannelsen i datalogi Bacheloruddannelsen i kognitions- og datavidenskab,"Kurset giver en introduktion til diskret matematik, algoritmer og datastrukturer. Fokus i den matematiske del af kurset er matematisk metode og matematiske værktøjer, som bruges i løsningen af datalogiske problemstillinger. Vidensemnerne i målbeskrivelsen introduceres, og der arbejdes med emnerne for at opbygge de forventede færdigheder og kompetencer.","Viden om grundlæggende matematisk metode logik, elementær talteori og tælleproblemer mængder og relationer funktioner asymptotisk tids- og pladskompleksitet (herunder opstilling og løsning af rekursionsligninger) samt eksempler på deres anvendelser pseudokode abstrakt beregningsmodel (RAM) sorteringsalgoritmer basale datastrukturer og operationer på disse (herunder lister, stakke, køer, binære søgetræer) grafer (herunder træer) og relaterede algoritmer Færdigheder i at formulere simple matematiske argumenter og beviser inden for kursets emner identificere relevante matematiske værktøjer blandt kursets emner til løsning af datalogiske problemstillinger foretage asymptotisk kompleksitetsanalyse af algoritmer og datastrukturer læse og beskrive algoritmer vha. pseudokode præsentere løsninger skriftligt Kompetencer til selvstændigt at anvende passende algoritmer og datastrukturer på nye problemstillinger udvikle nye simple algoritmer og datastrukturer",Offentliggøres på kursets Absalon-side ved kursusstart.,"Kompetencer svarende til at kurset ""Programmering og problemløsning"" følges senest samtidigt.","Kurset vil blande forelæsninger, klasseundervisning, gruppeopgaver og individuelle opgaver, samt multiple-choice quizzes.","{'Forelæsninger': 54, 'Forberedelse (anslået)': 124, 'Øvelser': 90, 'Projektarbejde': 142, 'Eksamen': 2, 'I alt': 412}",Skriftlig Individuel Kollektiv Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>15 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig stedprøve, 2 timer med opsyn.</div></dd><dt>Eksamensforudsætninger</dt><dd><p>Aflevering og godkendelse af alle på nær én af 10-12
obligatoriske skriftlige opgaver eller multiple-choice quizzes, der
stilles i løbet af kurset (højst én opgave per uge). Der vil være
mulighed for genaflevering opgaver og quizzes.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt undtagen Generativ AI og
internetadgang</dd><dt>Bedømmelsesform</dt><dd>bestået/ikke bestået</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere.</div></dd><dt>Reeksamen</dt><dd><p>Samme som ordinær eksamen.</p><p>Hvis 10 eller færre studerende er registreret til at tage
reeksamen, vil der i stedet afholdes en mundtlig prøve på 25
minutter uden forberedelse.
<br/><br/>
Kvalificering til reeksamen opnås ved aflevering og godkendelse af
alle på nær én af de obligatoriske skriftlige opgaver senest 3
uger før reeksamen.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 24-02-2025
https://kurser.ku.dk/course/ndab25000u/2025-2026,NDAB25000U Digital Fabrication and Makerspace Skills for Science (FAB),Volume 2025/2026,,"This course focuses on digital fabrication machines (like 3D printers and laser cutters) and electronic sensing technologies (like Arduinos and infrared cameras), and their ability to support research and laboratory tasks in various fields of science. We will get hands-on in the makerspace to build skills in creating new physical objects from digital designs, and new sensing devices that can understand the world. Then, we will break into groups and work on real problems in laboratories by building a novel solution to a scientist’s problem. The instructors will provide a series of sample cases that students can explore with their projects, or they can bring their own ideas for scientific problems to solve. We will also discuss the future of digital fabrication technologies for science, for example, in organ printing, construction, and other fields. Throughout the course, we will explore papers and projects that develop novel applications of makerspace technologies or use them in innovative ways, as well as get a basic grounding in iterative development. The skill-building component will include core makerspace skills like: 2D and 3D modeling Laser cutting and 3D printing objects which fit with existing objects or offer interactive capabilities Soldering Basic and advanced circuit prototyping and microcontroller programming Signal processing and machine learning for analyzing sensor signals The project component will focus on: Application of skills gained Documentation of the project in the format of, e.g., an Instructable Iterative development in connection with scientific, technical, and user feedback The course is highly hands-on, with lots of building and experimentation. Students will be taught and expected to apply safety practices around the machines. NB: Students are not expected to have any previous experience in programming, design, or working with digital fabrication machines. Bring your curiosity and excitement, and we will teach you everything you need to know!","At course completion, the successful student will have Knowledge of digital fabrication technologies; their basic underlying principles, advantages and disadvantages; and possible application to various scientific and engineering disciplines existing and up-and-coming applications of digital fabrication technologies in scientific fields like medicine and construction Skills in designing and manufacturing 2D and 3D objects with various digital fabrication technologies translating between real-world and virtual-world dimensions and data for precision fabrication at various physical scales exploring current research on new ways to use digital fabrication technologies in the sciences assembling and programming basic electronic circuits for sensing analyzing basic sensing signals using signal processing or machine learning techniques Competences to analyzing real-world needs of scientists and creating solutions with digital fabrication technologies practical digital fabrication technology usage",Selected papers and book chapters. See Absalon when the course is set up.,No particular pre-requisites. Basic programming knowledge is a bonus.,"This course is a mix of short lectures and demos, hands-on time in the lab, and field- and project-work in groups.","{'Lectures': 24, 'Preparation': 32, 'Practical exercises': 24, 'Project work': 110, 'Exam': 16, 'Total': 206}",Oral Continuous feedback during the course of the semester Peer feedback (Students give each other feedback),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 20 min.</div></dd><dt>Type of assessment details</dt><dd>The exam consists of two parts:
<br/><br/>
A) A group report in the form of a portfolio based on the group
project executed during the course.
<br/><br/>
B) An individual oral exam (without preparation) based on the group
project and group report as well as other material from the course
<br/><br/>
The written and oral examination are not weighted, only one overall
assessment is provided for the two parts of the exam.</dd><dt>Aid</dt><dd>All aids allowed 
<div><p>The student can use all aids for the project and
preparation for the oral exam, but during the oral exam they
are not allowed to use internet or AI.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship</dd><dt>Exam period</dt><dd><p>Several Internal examiners.</p></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.  </p><p>For the re-exam the student must submit a new individual report
or resubmit an edited version of the group report no later than 3
weeks before the re-exam. </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcomes.</p></div></div>",English,NDAB25000U,"7,5 ECTS",Bachelor,1 block,Block 1,C,16 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Valkyrie Savage (4-857082704f73783d7a843d737a)'],Saved on the 13-03-2025
https://kurser.ku.dk/course/ndak23007u/2025-2026,NDAK23007U Designing Collaborative Technologies (DesignCoTech),Volume 2025/2026,,"In this course we will explore and experiment with applying new technologies (such as Blockchain, Augmented Reality and the Internet of Things) to support social interaction and collaboration in new ways. Students will start by learning how to study diverse workplaces, drawing on established theories of computer supported cooperative work (CSCW). The goal here will be to learn how to study users and their practices, and to learn from how technologies are used in 'real world’ organisations. Students will then bring these new insights into the Makerspace and start a design process learning how to develop and apply novel technologies in a user-centred way. The overall goal will be to help students to rethink and innovate the future of workplace, and build new collaborative technologies that fit with real users needs. The course has three parts: Ethnographic empirical study of a selected workplace drawing on theoretical theories of computer supported cooperative work Design and prototyping collaborative technologies in the Makerspace using user-centred approaches Re-thinking and innovating the future workplace creating design fictions",Knowledge of Theories in computer supported cooperative work (CSCW) Ethnographic field methods for design User centred design in Makerspaces Skills to Analyse the complexities of workplace using CSCW theories Design collaborative technologies for the future workplace Innovate through iterative prototyping in a Makerspace Competences to Analyse work practices in real life organisations Design workplace technologies supporting people needs Innovate the future of work,Research papers. See Absalon.,Academic qualifications equivalent to a BSc degree is recommended.,"Learning activities include seminars, workshops, explorative exercises, empirical data collection, where students will work theoretically and experimentally with CSCW concepts for analysis and design. Some learning activities will take place in a Makerspace. Moreover, there will be assignments which will require collaboration with students located at University of Maryland, Baltimore, USA - allowing students real-life experiences with globally distributed work.","{'Lectures': 24, 'Preparation': 32, 'Exercises': 24, 'Project work': 125, 'Exam': 1, 'Total': 206}",Oral Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 20 minutes (no
preparation time)</div></dd><dt>Type of assessment details</dt><dd>Specifically, the exam consists of two parts:
<br/><br/>
1. A group report (written assignment) based on the project.
<br/>
2. An individual oral examination (without preparation) based on
the report.
<br/><br/>
The written and oral examination are not weighted, why only one
overall assessment is provided for the two parts of the exam.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam. </p><p>For the re-exam the student must submit a new individual report
or resubmit an edited version of the group report no later than 3
weeks before the re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK23007U,"7,5 ECTS",Full Degree Master,1 block,Block 3,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Pernille Bjørn (14-776c79757073736c356971767975476b7035727c356b72)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndab24008u/2025-2026,NDAB24008U Econometrics B (ØkB),Volume 2025/2026,BSc Programme in Computer Science and Economics,"Econometrics B covers a number of statistical models relevant for empirical economic analysis as well as mathematical methods for analyzing them. The course gives an account of classical principles for estimation and inference for both linear and nonlinear parametric models for cross section or panel data. Emphasis is placed on understanding the theoretical foundations for these methods, as well as the practical tools to implement them in an imperative programming language such as MATLAB or Python. The course will be developed along the following four axes (example topics included): 1) Linear models for panel data Estimation with strictly and weakly exogenous regressors Random effects, fixed effects, first differences 2) Estimation methods and numerical tools for nonlinear parametric models M-Estimation Generalized Method of Moments (GMM) Numerical optimization 3) Discrete-choice models and models for demand Binary and multinomial response models Demand estimation 4) Classical nonparametric methods The course will provide the student with a statistical toolbox that can be used for the estimation of a wide range of reduced form and structural micro-econometric models.","Knowledge of The central assumptions in the linear panel data model with unobserved effects; including how these assumptions are tested and how potential violation affect identification and estimation of parameters. The specification, identification and estimation issues that arise in static and dynamic binary response model for panel data models with and without unobserved effects (e.g. scale and level normalization, state dependence, initial conditions, endogeneity, neglected heterogeneity). The specification, identification and estimation issues that arise in multinomial discrete choice models and their implied predictions (substitution patterns). The principle of M-estimation in terms of estimation and inference, as well as key examples of M-estimators such as maximum likelihood and non-linear least squares. The properties of simulation-based estimators (consistency, asymptotic normality, rates of convergence and smoothness) and how they can be applied in the context of discrete choice models. The most common numerical optimizers and solution algorithms and how they work in an estimation context. Skills in Identifying the characteristic properties of a given economic cross-sectional or panel data set. Assessing the identification strategies in existing research papers as well as in their own analyses. Assessing which estimator is best suited to address the problem. Derivinging estimators of the statistical model’s parameters using the principles of M-estimation and estimate and interpret the parameters. This may involve deriving the sample objective function (such as the likelihood function), the gradient and the information matrix and implement the estimation method numerically using optimization methods. Programming the estimator and estimate the parameters of the model. Reporting and interpreting the results (marginal effects, elasticities, counterfactual simulations). Constructing misspecification tests, analyzing to what extent an econometric model is congruent with the data, formulate economic questions as hypotheses on the parameters of the statistical model and test these hypotheses. Using an imperative programing language such as Python or MATLAB to implement the mathematical representation of the econometric models and estimation methods covered in the course. This involves computing parameter estimates that are typically not available in closed form as well as computation of partial effects, elasticities, standard errors, test statistics, and simulation of counterfactual predictions based on the estimated model. Presenting a statistical model and empirical results clearly and consisely. This includes using statistic and econometric terms in the correct way, giving statistically sound and economically relevant interpretations of statistical results, and presenting results in a way such that they can be reproduced by others. Competencies to Suggest and construct an appropriate econometric model. Develop arguments supporting an identification strategy. Select a suitable estimation approach. Test specification(s) and economic hypotheses pertaining to the model. Read and critically evaluate research papers containing applied econometric cross-section and panel-data analyses. The acquired skills in micro econometric theory and practice provide a strong background that enables students to do empirical analyses at a level suitable for the bachelor thesis, but also relevant for answering empirical economic questions that could be encountered in a government agency or the private sector.",See Absalon,"Prerequisites equivalent to the courses PoP, MatIntro, Introductory Statistics and Probability Theory (GSS), Econometrics A (ØkA), and Numerical Methods (NuMe).","The course is a combination of lectures and exercise classes. There will be 3x2 hours of lectures and 3x2 hours of exercise classes per week for 7 weeks. The lectures cover the theory and the intuition behind the estimators, methods and econometric models. The exercise classes allow students to put the theory into practice through exercises, and also to obtain hands-on coding experience by implementing the estimators on real datasets using an imperative programming language such as MATLAB and Python. Students are expected to prepare the exercises before coming to the exercise classes.","{'Lectures': 42, 'Class Instruction': 42, 'Preparation': 69, 'Project work': 52, 'Exam': 1, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester Peer feedback (Students give each other feedback),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, 20 minutes (no preparation time)</div></dd><dt>Type of assessment details</dt><dd>The oral examination will be in the entire curriculum and the
written assignments.</dd><dt>Examination prerequisites</dt><dd><p>To qualify for the exam the student must:</p><ul><li>Hand in 2-4 mandatory written assignments. Assignments may
be completed individually or in groups of up to three
students.</li><li>Give individually written feedback on the work of two other
groups for each of the mandatory assignments.</li></ul><p> </p><p>Details on deadlines, group sizes and peer feedback will be
available on Absalon.</p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship</dd><dt>Exam period</dt><dd><p>Several internal examiners</p></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>If a student is not qualified for the exam, qualification
can be achieved by</p><ul><li>(Re)submitting the 2-4 mandatory assignments no later than
two weeks before the re-exam.</li><li>In addition, the students must hand in written reflections
of their work, choice of methods etc for each of the mandatory
assignments no later than two weeks before the
re-exam.</li></ul></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAB24008U,"7,5 ECTS",Bachelor,1 block,Block 3,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Jesper Riis-Vestergaard Sørensen (4-6f777b78456a68747333707a336970)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndab15008u/2024-2025,NDAB15008U Diskret matematik og algoritmer (DMA),Årgang 2024/2025,Bacheloruddannelsen i datalogi Bacheloruddannelsen i kognitions- og datavidenskab,"Kurset giver en introduktion til diskret matematik, algoritmer og datastrukturer. Fokus i den matematiske del af kurset er matematisk metode og matematiske værktøjer, som bruges i løsningen af datalogiske problemstillinger. Vidensemnerne i målbeskrivelsen introduceres, og der arbejdes med emnerne for at opbygge de forventede færdigheder og kompetencer.","Viden om grundlæggende matematisk metode logik, elementær talteori og tælleproblemer mængder og relationer funktioner asymptotisk tids- og pladskompleksitet (herunder opstilling og løsning af rekursionsligninger) samt eksempler på deres anvendelser abstrakt beregningsmodel (RAM) basale datastrukturer og operationer på disse (herunder lister, stakke, køer, binære søgetræer) grafer (herunder træer) og relaterede algoritmer sorteringsalgoritmer Færdigheder i at formulere simple matematiske argumenter og beviser, herunder knytte forbindelse mellem kursets matematiske emner og datalogiske problemstillinger, samt identificere relevante matematiske værktøjer blandt kursets emner til løsning af datalogiske problemstillinger udvælge metoder og teoridele til løsning af problemer inden for kursets vidensområde, herunder specielt udføre formelle logiske operationer på matematiske udsagn analysere kombinatoriske problemstillinger såvel ved brug af tælleargumenter som algebraiske operationer genkende forskellige former for grafer og anvende centrale algoritmer knyttet til sådanne opstilling af rekursive ligninger og løsning af disse ved brug af rekursionstræer bestemme køretid og pladsforbrug herunder gøre brug af asymptotisk notation til at angive størrelsesordenen af en funktion analysere fordele og ulemper ved udvalgte algoritmer og datastrukturer præsentere løsninger skriftligt Kompetencer til selvstændigt at løse problemer inden for udvalgte videnspunkter fra listen ovenfor herunder identificere relevante algoritmer udvikle simple algoritmer og datastrukturer",Offentliggøres på kursets Absalon-side ved kursusstart.,"Kompetencer svarende til at kurset ""Programmering og problemløsning"" følges senest samtidigt.","Kurset vil blande forelæsninger, klasseundervisning, gruppeøvelser og individuelle opgaver.","{'Forelæsninger': 54, 'Forberedelse (anslået)': 124, 'Øvelser': 90, 'Projektarbejde': 144, 'I alt': 412}",Skriftlig Individuel Kollektiv Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>15 ECTS</dd><dt>Prøveform</dt><dd><div>Løbende bedømmelse</div></dd><dt>Prøveformsdetaljer</dt><dd>Kurset organiseres ud fra en ugentlig cyklus med obligatoriske
opgaver (ialt 11-13), som alle på nær en skal bestås for at bestå
kurset. Der vil være mulighed for genaflevering. Størrelsen af
opgaverne vil variere. Opgaveaflevering sker i Absalon.</dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt</dd><dt>Bedømmelsesform</dt><dd>bestået/ikke bestået</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere.</div></dd><dt>Reeksamen</dt><dd><p>
Mundtlig eksamen uden forberedelse i fuldt pensum. 30 minutter inklusive
votering. 
<br/>
Skriftlige hjælpemidler (notater og bøger mv.) er
tilladt.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 20-02-2024
https://kurser.ku.dk/course/ndab24008u/2024-2025,NDAB24008U Econometrics B (ØkB),Volume 2024/2025,BSc Programme in Computer Science and Economics,"Econometrics B covers a number of statistical models relevant for empirical economic analysis as well as mathematical methods for analyzing them. The course gives an account of classical principles for estimation and inference for both linear and nonlinear parametric models for cross section or panel data. Emphasis is placed on understanding the theoretical foundations for these methods, as well as the practical tools to implement them in an imperative programming language such as MATLAB or Python. The course will be developed along the following four axes (example topics included): 1) Linear models for panel data Estimation with strictly and weakly exogenous regressors Random effects, fixed effects, first differences 2) Estimation methods and numerical tools for nonlinear parametric models M-Estimation Generalized Method of Moments (GMM) Numerical optimization 3) Discrete-choice models and models for demand Binary and multinomial response models Demand estimation 4) Classical nonparametric methods The course will provide the student with a statistical toolbox that can be used for the estimation of a wide range of reduced form and structural micro-econometric models.","Knowledge of The central assumptions in the linear panel data model with unobserved effects; including how these assumptions are tested and how potential violation affect identification and estimation of parameters. The specification, identification and estimation issues that arise in static and dynamic binary response model for panel data models with and without unobserved effects (e.g. scale and level normalization, state dependence, initial conditions, endogeneity, neglected heterogeneity). The specification, identification and estimation issues that arise in multinomial discrete choice models and their implied predictions (substitution patterns). The principle of M-estimation in terms of estimation and inference, as well as key examples of M-estimators such as maximum likelihood and non-linear least squares. The properties of simulation-based estimators (consistency, asymptotic normality, rates of convergence and smoothness) and how they can be applied in the context of discrete choice models. The most common numerical optimizers and solution algorithms and how they work in an estimation context. Skills in Identifying the characteristic properties of a given economic cross-sectional or panel data set. Assessing the identification strategies in existing research papers as well as in their own analyses. Assessing which estimator is best suited to address the problem. Derivinging estimators of the statistical model’s parameters using the principles of M-estimation and estimate and interpret the parameters. This may involve deriving the sample objective function (such as the likelihood function), the gradient and the information matrix and implement the estimation method numerically using optimization methods. Programming the estimator and estimate the parameters of the model. Reporting and interpreting the results (marginal effects, elasticities, counterfactual simulations). Constructing misspecification tests, analyzing to what extent an econometric model is congruent with the data, formulate economic questions as hypotheses on the parameters of the statistical model and test these hypotheses. Using an imperative programing language such as Python or MATLAB to implement the mathematical representation of the econometric models and estimation methods covered in the course. This involves computing parameter estimates that are typically not available in closed form as well as computation of partial effects, elasticities, standard errors, test statistics, and simulation of counterfactual predictions based on the estimated model. Presenting a statistical model and empirical results clearly and consisely. This includes using statistic and econometric terms in the correct way, giving statistically sound and economically relevant interpretations of statistical results, and presenting results in a way such that they can be reproduced by others. Competencies to Suggest and construct an appropriate econometric model. Develop arguments supporting an identification strategy. Select a suitable estimation approach. Test specification(s) and economic hypotheses pertaining to the model. Read and critically evaluate research papers containing applied econometric cross-section and panel-data analyses. The acquired skills in micro econometric theory and practice provide a strong background that enables students to do empirical analyses at a level suitable for the bachelor thesis, but also relevant for answering empirical economic questions that could be encountered in a government agency or the private sector.",See Absalon,"Prerequisites equivalent to the courses PoP, MatIntro, Introductory Statistics and Probability Theory (GSS), Econometrics A (ØkA), and Numerical Methods (NuMe).","The course is a combination of lectures and exercise classes. There will be 3x2 hours of lectures and 3x2 hours of exercise classes per week for 7 weeks. The lectures cover the theory and the intuition behind the estimators, methods and econometric models. The exercise classes allow students to put the theory into practice through exercises, and also to obtain hands-on coding experience by implementing the estimators on real datasets using an imperative programming language such as MATLAB and Python. Students are expected to prepare the exercises before coming to the exercise classes.","{'Lectures': 42, 'Class Instruction': 42, 'Preparation': 69, 'Project work': 52, 'Exam': 1, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester Peer feedback (Students give each other feedback),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, 20 minutes (no preparation time)</div></dd><dt>Type of assessment details</dt><dd>The oral examination will be in the entire curriculum and the
written assignments.</dd><dt>Exam registration requirements</dt><dd><p>To qualify for the exam the student must:</p><ul><li>Hand in 2-4 mandatory written assignments. Assignments may
be completed individually or in groups of up to three
students.</li><li>Give individually written feedback on the work of two other
groups for each of the mandatory assignments.</li></ul><p> </p><p>Details on deadlines, group sizes and peer feedback will be
available on Absalon.</p></dd><dt>Aid</dt><dd>All aids allowed 
<div><p>The use of Large Language Models (LLM)/Large Multimodal Models
(LMM) – such as ChatGPT and GPT-4 – is permitted.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship</dd><dt>Exam period</dt><dd><p>Several internal examiners</p></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>If a student is not qualified for the exam, qualification
can be achieved by (re)submitting the 2-4
mandatory assignments no later than two weeks prior to the
re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAB24008U,"7,5 ECTS",Bachelor,1 block,Block 3,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Jesper Riis-Vestergaard Sørensen (4-6e767a774469677372326f7932686f)'],Saved on the 14-02-2024
https://kurser.ku.dk/course/ndak22005u/2025-2026,NDAK22005U Fair and Transparent Machine Learning Methods (FTML),Volume 2025/2026,,"Deploying machine learning models for downstream applications brings with it a wealth of possibilities. However, there is also a non-negligible risk of potential harm if models are not developed carefully. Data can encode undesired societal biases, which can in turn be perpetuated by machine learning models if trained on such data. There may be risks in developing automated solutions for certain application tasks altogether. Moreover, ML models are often black boxes whose decisions are not transparent to end-users, creating imbalances and issues regarding the accountability of models. Therefore, it is imperative to reflect on the benefits and risks of ML models, to develop methods to detect and mitigate biases in ML models, and to create solutions to make the inner workings of models more transparent. This course focuses on the technical solutions needed to improve the fairness, accountability and transparency of machine learning models. As such, it assumes students have prior knowledge of machine learning. This course covers the following tentative topic list: Statistical notions of fairness and bias The intended usage of ML models, e.g. datasheets, model cards Learning fair representations, e.g. counterfactual data augmentation, adversarial training, model calibration Model interpretability and transparency Generating explanations, e.g. post-hoc explainability, generating free-text explanations Evaluating model explanations Probing representations for bias, e.g. functional testing, subspace probing, generative approaches","Knowledge of ML fairness: how to operationalise and measure fairness Model bias: how to automatically detect and mitigate ML model biases Transparency: interpretability and explainability for ML models Skills to Develop methods to automatically detect, measure and mitigate biases in ML models Develop methods to interpret features deep neural networks have learned Develop methods to explain decisions made by ML models Transparently document the intended usage of ML models Competences to Understand methods for bias detection and mitigation, interpretability and explainability Plan and carry out fairness and bias analyses on datasets and ML tasks",Selected papers and book chapters. See Absalon when the course is set up.,"Knowledge of machine learning (probability theory, linear algebra, classification) and programming is required corresponding to NDAK15007U Machine Learning or NDAB21005U Machine Learning A or similar.","The format of the class consists of lectures (including guest lectures), presentations by students, and project work.","{'Lectures': 16, 'Preparation': 90, 'Practical exercises': 0, 'Project work': 100, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester Peer feedback (Students give each other feedback),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD students can register for MSc course by following the same procedure as credit students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, during course</div><div>Written assignment, during course</div></dd><dt>Type of assessment details</dt><dd>The exam consists of two parts:
<br/><br/>
1) A class presentation of an academic paper (oral part).
<br/>
2) An individual mini project on a topic covered in the course, the
findings of which are to be documented in a short report (written
part).
<br/><br/>
The final grade is based on an overall assessment of the
assignments and the presentation.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam consists of two parts: </p><ol><li>A (potentially revised) version of the mini-project incl. the
short report, to be submitted no later than 3 weeks
before the re-exam week</li><li>A 20 minute oral examination with no preparation time and with
no aids allowed.</li></ol></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK22005U,"7,5 ECTS",Full Degree Master,1 block,Block 2,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Christina Lioma (7-6934726f757367466a6f34717b346a71)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak25001u/2025-2026,NDAK25001U Empirical Research Methods in Computer Science (ERMCS),Volume 2025/2026,MSc Programme in Computer Science MSc Programme in Computer Science with a minor subject,"This course teaches students to design and evaluate empirical research in computer science. Students will acquire knowledge of central ideas about research quality and an understanding of how research is planned, conducted and analysed. On completion of the course, students will be prepared to select and use research methods in their projects (e.g. master's theses and dissertations) and to read and use the results of empirical research. Participants will also learn to critically evaluate results and sources of bias/error in the research of others. The course focuses on empirical research in all areas of computer science, including software engineering, human-computer interaction, natural language processing, graphics, and artificial intelligence.","Knowledge of Notions of research quality, including validity, credibility, reliability, transparency, ethics, and integrity Types of empirical research methods, including observation, experiments, field studies, interviews, surveys, archival research, crowdsourcing Tradeoffs in research, including between realism, precision, and generalizability Different research traditions and their underlying philosophies Skills in Formulating research questions Planning and analyzing research of the types noted above Analysis and representation of qualitative and quantitative data Competences in Analyzing research papers with respect to their quality and choice of method Interpreting and drawing conclusions from quantitative and qualitative data",Selected papers. See Absalon when the course is set up.,Academic qualifications equivalent to a BSc degree are recommended.,The aim of the course is to give participants practical and theoretical insight into research methods. Practical insight is obtained through compulsory assignments on planning or analysis of empirical research. The theoretical insight is obtained through the reading and discussing selected papers and book chapters.,"{'Lectures': 32, 'Preparation': 78, 'Project work': 96, 'Total': 206}","Written Oral Written and oral feedback on assignments, oral feedback on oral presentations.","Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment of 5 written assignments. All assignments
must pass. The final grade is based on an overall assessment of the
assignments.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Oral examination, 20 minutes (including grading)
without preparation.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK25001U,"7,5 ECTS",Full Degree Master,1 block,Block 1,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Kasper Hornbæk (4-6e64766b43676c316e7831676e)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak25002u/2025-2026,NDAK25002U Extended Reality (ExR),Volume 2025/2026,MSc Programme in Computer Science,"This course teaches students to understand and address a research problem within the field of extended reality (XR). XR is an umbrella term for technologies combining physical and digital worlds, including virtual reality (VR), augmented reality (AR), and mixed reality (MR). The course discusses various research areas that either (1) employ an XR technology to understand a phenomenon (e.g., as a research tool for controlled experiments), (2) address a problem with an XR technology (e.g., developing techniques for XR to support behavior change), or (3) apply new methods or theories to an existing problem in XR (e.g., the use of motor learning to develop interaction techniques). The course combines theoretical lectures, student research presentations, and hands-on project work. In the lectures, students learn about the conceptual and technological differences of virtual, augmented, and mixed reality. They also learn about common measures and design goals in XR, such as presence and body ownership. Through the research presentations and project work, the students learn about the main XR research areas both theoretically and practically. For their projects, the students work in groups and will choose one main XR research area based on pre-defined problem statements. The course goal is to present the research area in class, develop a concept suitable for addressing the given research problem, implementing the concept as an XR application, and running a study.","Knowledge of The fundamental concepts and design goals of different extended reality technologies (i.e., virtual, augmented, and mixed reality), and their advantages and disadvantages. The main extended reality research areas and the methods to address research problems in those areas. Skills in Finding and understanding the latest research in the field of extended reality. Understanding and inferring the technical requirements of different XR technologies and their suitability for addressing a given research problem. Presenting research findings, both in writing and orally, through project work and presentations. Competences in Developing a concept to address an extended reality research problem. Working collaboratively in groups to implement an extended reality prototype and conducting a study with it.",Selected papers and book chapters. See Absalon when the course is set up.,"Programming skills corresponding to those obtained with a bachelor degree in Computer Science or equivalent are expected; Experience in XR development software, such as Unity3D or Unreal Engine, is beneficial but not required (for example through courses on Virtual Reality or Augmented Reality). Some knowledge about human-centred computing, for instance through courses on Interaction Design, Human-Computer Interaction, User-Centred Design, Computer Supported Cooperative Work or the like is beneficial. Academic qualifications equivalent to a BSc degree are recommended.","The course will consist of theoretical lectures introducing core concepts for extended reality. The lectures will be accompanied by classroom discussions. Furthermore, the students will give research presentations of papers related to their research area in class and lead an accompanying discussion. Finally, the students will work on a project; they will develop a concept for a given problem statement and implement a prototype using extended reality technology. They will regularly report on the project and get feedback on their progress in class.","{'Lectures': 32, 'Preparation': 40, 'Project work': 133, 'Exam': 1, 'Total': 206}",Oral Collective Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 20
minutes</div></dd><dt>Type of assessment details</dt><dd>The overall assessment is based on a group project report and
an oral exam (without preparation).
<br/><br/>
The exam is a group exam, meaning that the groups present their
project in a 10-minute group presentation followed by a 10-minute
individual examination.</dd><dt>Examination prerequisites</dt><dd><p>The students must fulfill two assignments that must be
passed to qualify for the exam.</p><p>The assignments are:</p><p>1) give a student research presentations, </p><p>2) hand-in a written project report proposal.</p></dd><dt>Aid</dt><dd>All aids allowed 
<div><p>The student can use all aids for the project and
preparation for the oral exam, but during the oral exam they
are not allowed to use internet or AI.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>As in the ordinary exam, the assessment is based on a project
report and an oral exam. If the project report uses parts of a
project done in a group during the course, the student must detail
their contributions on the hand-in for the re-exam. In
the re-exam, both the oral presentation and the exam
are individual.</p><p>If the student is not yet qualified, then qualification can
be achieved by resubmitting a written project report
proposal and have it approved. The presentation part of
the qualification can be obtained by doing a presentation in
the HCC XR research seminar or the HCC general research
seminar.</p><p>The assignment must be submitted and the presentation must
be held no later than three weeks before the re-exam date.</p><p> </p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>In order to earn the grade 12, students must demonstrate the
knowledge, skills and competences described in the Learning
Outcome.</p></div></div>",English,NDAK25002U,"7,5 ECTS",Full Degree Master,1 block,Block 4,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Teresa Hirzle (4-7c6d7071486c7136737d366c73)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndab23000u/2025-2026,NDAB23000U Grundlæggende Data Science (GDS),Årgang 2025/2026,Bacheloruddannelsen i bioinformatik Bacheloruddannelsen i datalogi Bacheloruddannelse i Machine Learning og Datavidenskab,"Dette kursus gennemgår de forskellige komponenter der indgår i en komplet data science pipeline, fra indsamling, processering og oprensning af data, til implementation af statistiske modeller, og udforskning af data gennem visualisering. Kurset vil omhandle håndtering af data fra flere kilder, og der lægges vægt på fundamentelle udfordringer i data science, såsom bias i data, og hvordan dette kan påvirke beslutningstagning på baggrund og trænede modeller.","Viden om Model design og implementation Basale begreber i modellering Struktureret model design Model test strategier Data udforskning og visualisering Eksplorativ data analyse Nøglebegreber i visualisering Færdigheder Skrive scripts til indsamling og processering af data, og indlæsning af struktureret tekst Design af modulær pipeline til dataanalyse af et konkret problem Design af meningsfulde visualiseringer Kompetencer Den studerende forstår de centrale udfordringer i at designe et effektivt data science work-flow, der understøtter data fra flere kilder og flere forskellige analyser. Den studerende er i stand til at designe og forstå modulære data science pipelines kan producere meningsfulde visualiseringer af data kan klart og præcist dokumentere data science workflows, metoder og resultater",Offentliggøres på kursets Absalon-side ved kursusstart.,"Den studerende bør have grundlæggende viden om programmering, algoritmer, lineær algebra, matematisk analyse og statistik. Denne viden kan opnås via følgende kurser: PoP MASD og MAD eller MatIntro og SS DMA eller IDMA (tidligere kaldet DMFS). IDMA kan følges sideløbende i blok 3. LinAlgDat (LinAlgDat kan følges sideløbende i blok 4)","Forelæsninger, øvelser og projekt","{'Forelæsninger': 36, 'Forberedelse (anslået)': 78, 'Teoretiske øvelser': 36, 'Projektarbejde': 56, 'I alt': 206}",Kollektiv Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig aflevering, i løbet af kurset</div></dd><dt>Prøveformsdetaljer</dt><dd>Et gruppeprojekt, der afleveres i løbet af kurset,
gruppeprojektet er en rapport med specificerede individuelle
bidrag.</dd><dt>Eksamensforudsætninger</dt><dd><p>3-5 individuelle obligatoriske opgaver, hvoraf alle undtagen 1
skal afleveres og godkendes for at kvalificere sig til
eksamen. </p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt 
<div><p>For programming tasks specifically, the use of GitHub Copilot or
similar AI-based programming tools is permitted. The finite list of
allowed AI-tools will be announced in Absalon.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere.</div></dd><dt>Reeksamen</dt><dd><p>Reeksamen afholdes som en mundtlig eksamen 30 minutter
uden forberedelse i hele pensum, alle hjælpemidler er
tilladt.</p><p>Kvalificering til reeksamen opnås ved genaflevering og
godkendelse af de obligatoriske opgaver senest 3 uger før
reeksamen. </p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 24-02-2025
https://kurser.ku.dk/course/ndak22005u/2024-2025,NDAK22005U Cancelled Fair and Transparent Machine Learning Methods (FTML),Volume 2024/2025,,"Deploying machine learning models for downstream applications brings with it a wealth of possibilities. However, there is also a non-negligible risk of potential harm if models are not developed carefully. Data can encode undesired societal biases, which can in turn be perpetuated by machine learning models if trained on such data. There may be risks in developing automated solutions for certain application tasks altogether. Moreover, ML models are often black boxes whose decisions are not transparent to end-users, creating imbalances and issues regarding the accountability of models. Therefore, it is imperative to reflect on the benefits and risks of ML models, to develop methods to detect and mitigate biases in ML models, and to create solutions to make the inner workings of models more transparent. This course focuses on the technical solutions needed to improve the fairness, accountability and transparency of machine learning models. As such, it assumes students have prior knowledge of machine learning. This course covers the following tentative topic list: Statistical notions of fairness and bias The intended usage of ML models, e.g. datasheets, model cards Learning fair representations, e.g. counterfactual data augmentation, adversarial training, model calibration Model interpretability and transparency Generating explanations, e.g. post-hoc explainability, generating free-text explanations Evaluating model explanations Probing representations for bias, e.g. functional testing, subspace probing, generative approaches","Knowledge of ML fairness: how to operationalise and measure fairness Model bias: how to automatically detect and mitigate ML model biases Transparency: interpretability and explainability for ML models Skills to Develop methods to automatically detect, measure and mitigate biases in ML models Develop methods to interpret features deep neural networks have learned Develop methods to explain decisions made by ML models Transparently document the intended usage of ML models Competences to Understand methods for bias detection and mitigation, interpretability and explainability Plan and carry out fairness and bias analyses on datasets and ML tasks",Selected papers and book chapters. See Absalon when the course is set up.,"Knowledge of machine learning (probability theory, linear algebra, classification) and programming is required corresponding to NDAK15007U Machine Learning or NDAB21005U Machine Learning A or similar.","The format of the class consists of lectures (including guest lectures), presentations by students, and project work.","{'Lectures': 16, 'Preparation': 90, 'Practical exercises': 0, 'Project work': 100, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester Peer feedback (Students give each other feedback),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD students can register for MSc course by following the same procedure as credit students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, during course</div><div>Written assignment, during course</div></dd><dt>Type of assessment details</dt><dd>The exam consists of two parts:
<br/><br/>
1) A class presentation of an academic paper (oral part).
<br/>
2) An individual mini project on a topic covered in the course, the
findings of which are to be documented in a short report (written
part).
<br/><br/>
The final grade is based on an overall assessment of the
assignments and the presentation.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam consists of two parts: </p><ol><li>A (potentially revised) version of the mini-project incl. the
short report, to be submitted no later than 3 weeks
before the re-exam week</li><li>A 20 minute oral examination with no preparation
time</li></ol></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK22005U,"7,5 ECTS",Full Degree Master,1 block,Block 2,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Christina Lioma (7-75407e7b817f7352767b407d8740767d)'],Saved on the 25-06-2024
https://kurser.ku.dk/course/ndab23000u/2024-2025,NDAB23000U Grundlæggende Data Science (GDS),Årgang 2024/2025,Bacheloruddannelsen i bioinformatik Bacheloruddannelsen i datalogi Bacheloruddannelse i Machine Learning og Datavidenskab,"Dette kursus gennemgår de forskellige komponenter der indgår i en komplet data science pipeline, fra indsamling, processering og oprensning af data, til implementation af statistiske modeller, og udforskning af data gennem visualisering. Kurset vil omhandle håndtering af data fra flere kilder, og der lægges vægt på fundamentelle udfordringer i data science, såsom bias i data, og hvordan dette kan påvirke beslutningstagning på baggrund og trænede modeller.","Viden om Model design og implementation Basale begreber i modellering Struktureret model design Model test strategier Data udforskning og visualisering Eksplorativ data analyse Nøglebegreber i visualisering Færdigheder Skrive scripts til indsamling og processering af data, og indlæsning af struktureret tekst Design af modulær pipeline til dataanalyse af et konkret problem Design af meningsfulde visualiseringer Kompetencer Den studerende forstår de centrale udfordringer i at designe et effektivt data science work-flow, der understøtter data fra flere kilder og flere forskellige analyser. Den studerende er i stand til at designe og forstå modulære data science pipelines kan producere meningsfulde visualiseringer af data kan klart og præcist dokumentere data science workflows, metoder og resultater",Offentliggøres på kursets Absalon-side ved kursusstart.,"Den studerende bør have grundlæggende viden om programmering, algoritmer, lineær algebra, matematisk analyse og statistik. Denne viden kan opnås via følgende kurser: PoP MASD og MAD eller MatIntro og SS DMA eller IDMA (tidligere kaldet DMFS). IDMA kan følges sideløbende i blok 3. LinAlgDat (LinAlgDat kan følges sideløbende i blok 4)","Forelæsninger, øvelser og projekt","{'Forelæsninger': 36, 'Forberedelse (anslået)': 78, 'Teoretiske øvelser': 36, 'Projektarbejde': 56, 'I alt': 206}",Kollektiv Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig aflevering, i løbet af kurset</div></dd><dt>Prøveformsdetaljer</dt><dd>Et gruppeprojekt, der afleveres i løbet af kurset,
gruppeprojektet er en rapport med specificerede individuelle
bidrag.</dd><dt>Krav til indstilling til eksamen</dt><dd><p>3-5 individuelle obligatoriske opgaver, hvoraf alle undtagen 1
skal afleveres og godkendes for at kvalificere sig til
eksamen. </p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt 
<div><p>For programming tasks specifically, the use of GitHub Copilot or
similar AI-based programming tools is permitted. The finite list of
allowed AI-tools will be announced in Absalon.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere.</div></dd><dt>Reeksamen</dt><dd><p>Reeksamen afholdes som en mundtlig eksamen 30 minutter
uden forberedelse i hele pensum, alle hjælpemidler er
tilladt.</p><p>Kvalificering til reeksamen opnås ved genaflevering og
godkendelse af de obligatoriske opgaver senest 3 uger før
reeksamen. </p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 14-02-2024
https://kurser.ku.dk/course/ndab20001u/2024-2025,NDAB20001U High Performance programmering og systemer (HPPS),Årgang 2024/2025,Bacheloruddannelsen i bioinformatik Bacheloruddannelsen i biokemi Bacheloruddannelsen i datalogi-økonomi Bacheloruddannelsen i machine learning og datavidenskab Bacheloruddannelsen i kognitions- og datavidenskab,"Kurset introducerer de studerende til emnerne computerarkitektur og datanetværk, hukommelsesarkitektur, styresystemer, task-parallelisme og samtidighed, samt til massivt data-paralleliserede arkitekturer. Der vil være fokus på effektiv data-processering (big data) og effektive beregninger (big compute). Kurset er rettet mod studerende på kombinationsuddannelserne datalogi-økonomi og machine learning og datavidenskab, og søger at udvikle en grundlæggende forståelse for koncepter indenfor datamater og it-systemer. Efter kurset vil den studerende besidde evnen til at reflektere over den praktiske ydeevne og udførsel af lavniveau programmer, samt besidde det faglige grundlag for senere praktiske og teoretiske kurser indenfor datalogien. Kursets indhold er tematisk opdelt som følger: Talrepræsentationer, aritmetik og boolsk algebra Instruktionssæt, (symbolsk) maskinsprog, processorarkitektur, og lagerhierarkier Tråde, skedulering, og synkronisering Processer og virtuel hukommelse Datanetværk Parallelle arkitekturer Kurset vil undervejs introducere studerende til lav-niveau systemprogrammeringssprog, såsom C, samt til relevante udviklingsværktøjer, koncepter og teknikker indenfor systemprogrammering. Parallelliseringsteknikker implementeret i gængse lineær algebra-biblioteker vil blive introduceret.","Viden om talrepræsentationer, aritmetik og boolsk algebra instruktionssæt, (symbolsk) maskinsprog, processorarkitektur, og lagerhierarkier tråde, skedulering, og synkronisering processer og virtuel hukommelse indkodning af data i filer datanetværk parallelle arkitekturer Færdigheder i at implementere enkle programmer i et systemprogrammeringssprog med eksplicit lagerhåndtering redegøre for de forskellige motivationer for samtidighed, lagerhierarkier, og virtuel hukommelse benytte gængse værktøjer til at foretage udvikling, modifikation og udvidelse af programmer på systemniveau systematisk afprøve, fejlrette, og måle ydelse af programmel på systemniveau implementere enkle programmer på en parallel platform Kompetencer til at ræsonnere omkring processorarkitektur, lagerhierarkier, styresystemer og datanetværk analysere ydeevnen af programmer baseret på viden om processorarkitektur, lagerhierarkier og styresystemer implementere enkle programmer i et systemprogrammeringssprog ræsonnere omkring korrektheden af simple flertrådede programmer implementere enkle programmer på en parallel platform",Se Absalon for kursuslitteratur.,Programmering og Problemløsning (PoP) samt Diskret Matematik og Formelle Sprog (DMFS) (eller Diskret matematik og algoritmer (DMA)) .,"Forelæsninger og øvelsestimer med praktiske og teoretiske hjemmeopgaver, samt programmeringsprojekter afrapporteret med skriftlige rapporter (i grupper).","{'Forelæsninger': 32, 'Forberedelse (anslået)': 62, 'Øvelser': 32, 'Projektarbejde': 50, 'Eksamensforberedelse': 10, 'Eksamen': 20, 'I alt': 206}",Skriftlig Individuel Kollektiv Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig aflevering, 51 timer</div></dd><dt>Prøveformsdetaljer</dt><dd>Individuel tag-hjem skriftlig eksamen med udarbejdelse af
program og rapport.</dd><dt>Krav til indstilling til eksamen</dt><dd><p>Der stilles 3-5 afleveringsopgaver af varierende størrelse,
herunder programmeringsprojekter og teoretiske opgaver.</p><p>Det udmeldes på Absalon ved kursusstart præcis hvor mange
afleveringsopgaver, der stilles. </p><p>Alle undtagen 1 af opgaverne skal godkendes for at kvalificere
sig til eksamen.</p><p>Detaljer for afleveringerne, herunder størrelserne på opgaverne
og om de enkelte opgaver skal løses individuelt eller i
grupper, offentliggøres ved kursusstart.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt 
<div><p>Det er tilladt at anvende Large Language Models (LLM)/Large
Multimodal Models (LMM) – fx ChatGPT og GPT-4. Den endelige liste
med tilladte Ai-værktøjer offentliggøres på Absalon.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Samme som den ordinære eksamen.</p><p>Kvalifikation til deltagelse i reeksamen opnås ved
(gen)aflevering af afleveringsopgaver senest 3 uger før
reeksamen, således at samme krav som for indstillingskravet til den
ordinær eksamen opfyldes. Dvs. alle undtagen 1 af
afleveringsopgaverne skal godkendes for at kvalificere sig til
reeksamen.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 14-02-2024
https://kurser.ku.dk/course/ndab19003u/2024-2025,NDAB19003U Grundlæggende statistik og sandsynlighedsregning (GSS),Årgang 2024/2025,Bacheloruddannelsen i datalogi-økonomi,"Kurset giver en introduktion til sandsynlighedsregning og statistik og omfatter følgende emner: Sandsynlighed, betinget sandsynlighed, uafhængighed. Stokastiske variable, middelværdi og varians, forventning, transformation. Simultane og marginale fordelinger, kovarians og korrelation. Diskrete og kontinuerte sandsynlighedsfordelinger. Transformationer af normalfordelte variable. Maksimum likelihood-(ML-)estimation. Konstruktion af konfidensinterval og hypoteseafprøvning i basale normalfordelingsmodeller. Introduktion til store tals lov og den centrale grænseværdisætning (der anvendes i økonometrifagene). Computersimulation i Python Kurset bidrager til opfyldelsen af målet om, at de studerende på datalogi-økonomi får Teoretisk og praktisk indsigt fra kurser i statistik Erfaring i at arbejde med programmering (Python)","Viden om Aksiomer og regneregler for sandsynligheder samt af stokastiske variable. Betingede sandsynligheder, uafhængighed og tilhørende regneregler. Sandsynlighedsfunktioner og –tætheder i én og to dimensioner, middelværdi og varians, kovarians og korrelation, samt forskellen mellem marginale og simultane fordelinger. De statistiske grundbegreber: statistisk model, estimation, princippet om ML-estimation, konfidensinterval og hypoteseafprøvning. Store tals lov og den centrale grænseværdisætning. Færdigheder i at Beregne sandsynligheder og betingede sandsynligheder ved brug af deres definitioner og regneregler Gennemføre beregninger vedrørende marginale, simultane og betingede sandsynligheder samt momenter for diskrete stokastiske variable. Gennemføre beregninger vedrørende marginale tætheder og simple transformationer for kontinuerte stokastiske variable. Gennemføre simple computersimulationseksperimenter ved hjælp af Python med henblik på at undersøge egenskaber ved stokastiske variable og deres fordelinger. Estimere simple statistiske modeller (både vha. Python og uden hjælpemidler), beregne konfidensintervaller og udføre simple hypoteseafprøvninger i de præsenterede statistiske modeller Begrunde valg af Python-kommandoer. Udføre simple ændringer af Python-kode. Kompetencer til at Oversætte oplysninger (givet som tekst) om sandsynligheder, betingede sandsynligheder og eksperimenter til de relevante matematiske formler og udtryk Opstille simple statistiske modeller, kunne vurdere deres relevans for at afklare konkrete videnskabelige spørgsmål, og kunne kvantificere usikkerhed vedrørende deres konklusioner Udføre estimation af en række statistiske modeller i Python og uden hjælpemidler samt aflæse og fortolke estimationsoutput Designe, udføre og fortolke simple computersimulationseksperimenter, der undersøger egenskaber ved stokastiske variable og deres fordelinger","Se Absalon, når kurset er oprettet. Eksempelvis kunne følgende indgå i pensum: M. Sørensen: En introduktion til sandsynlighedsregning. 9. udgave. H. B. Nielsen: Introduction to likelihood based estimation and inference. Third edition.",Introduktion til matematik (MatIntro).,"6 timers forelæsning og 6 timers øvelser om ugen i 7 uger. Øvelser er en kombination af selvstændigt arbejde og gennemgang af opgaver med hjælp fra øvelseslærere. Forelæsninger vil være en kombination af slides, der tager udgangspunkt i pensum, tavlegennemgang, videoer med ekstramateriale, dialog mellem underviser og studerende, quizzer, og diskussioner i mindre grupper blandt de studerende.","{'Forelæsninger': 42, 'Forberedelse (anslået)': 118, 'Teoretiske øvelser': 42, 'Eksamen': 4, 'I alt': 206}",Skriftlig Mundtlig Individuel Løbende feedback i undervisningsforløbet Peerfeedback (studerende giver hinanden feedback) Der gives skriftlig feedback på obligatoriske afleveringsopgaver. Derudover løbende mundtlig kollektiv feedback i undervisningsforløbet fra øvelseslærere samt feedback fra quizzer i forelæsninger og som del af forberedelsen.,Selvbetjeningen på KUnet Som meritstuderende – klik her!Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig stedprøve, 4 timer med opsyn.</div></dd><dt>Krav til indstilling til eksamen</dt><dd><p>Det er et krav for at deltage i eksamen, at minimum
tre ud af kursets fire obligatoriske opgaver er godkendte
og gyldige. De første tre afleveringer kan genafleveres
én gang, mens den fjerde opgave ikke kan
genafleveres. </p></dd><dt>Hjælpemidler</dt><dd>Kun visse hjælpemidler tilladt 
<div><p>Følgende hjælpemidler er tilladt:</p><p>Computer, bøger, noter og slides fra undervisningen;
Lommeregner (ikke CAS-værktøjer); Tekstbehandlingsprogrammer som
Word og LyX; Excel og Python (herunder Jupyter
Notebook); PDF viewers; Editors som Sublime eller VS
Code.</p><p> </p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p><u>Prøveform:</u> Samme som ved ordinær eksamen. 
<br/>
 </p><p><u>Indstilling:</u> Det er et krav for at deltage i
reeksamen, at enten (1) minimum tre ud af kursets fire
obligatoriske opgaver er gyldige og blevet godkendt i løbet af det
ordinære kursusforløb, eller (2) man får godkendt en
længere eksamenslignende opgave, såfremt (1) ikke er
opfyldt. Opgaven tilsendes på mail efter henvendelse til den
kursusansvarlige, og besvarelsen sendes til den kursusansvarlige på
mail senest tre uger før første dag i reeksamensperioden.</p><p> </p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 31-03-2025
https://kurser.ku.dk/course/ndab19003u/2025-2026,NDAB19003U Grundlæggende statistik og sandsynlighedsregning (GSS),Årgang 2025/2026,Bacheloruddannelsen i datalogi-økonomi,"Kurset giver en introduktion til sandsynlighedsregning og statistik og omfatter følgende emner: Sandsynlighed, betinget sandsynlighed, uafhængighed. Stokastiske variable, middelværdi og varians, forventning, transformation. Simultane og marginale fordelinger, kovarians og korrelation. Diskrete og kontinuerte sandsynlighedsfordelinger. Transformationer af normalfordelte variable. Maksimum likelihood-(ML-)estimation. Konstruktion af konfidensinterval og hypoteseafprøvning i basale normalfordelingsmodeller. Introduktion til store tals lov og den centrale grænseværdisætning (der anvendes i økonometrifagene). Computersimulation i Python Kurset bidrager til opfyldelsen af målet om, at de studerende på datalogi-økonomi får Teoretisk og praktisk indsigt fra kurser i statistik Erfaring i at arbejde med programmering (Python)","Viden om Aksiomer og regneregler for sandsynligheder samt af stokastiske variable. Betingede sandsynligheder, uafhængighed og tilhørende regneregler. Sandsynlighedsfunktioner og –tætheder i én og to dimensioner, middelværdi og varians, kovarians og korrelation, samt forskellen mellem marginale og simultane fordelinger. De statistiske grundbegreber: statistisk model, estimation, princippet om ML-estimation, konfidensinterval og hypoteseafprøvning. Store tals lov og den centrale grænseværdisætning. Færdigheder i at Beregne sandsynligheder og betingede sandsynligheder ved brug af deres definitioner og regneregler Gennemføre beregninger vedrørende marginale, simultane og betingede sandsynligheder samt momenter for diskrete stokastiske variable. Gennemføre beregninger vedrørende marginale tætheder og simple transformationer for kontinuerte stokastiske variable. Gennemføre simple computersimulationseksperimenter ved hjælp af Python med henblik på at undersøge egenskaber ved stokastiske variable og deres fordelinger. Estimere simple statistiske modeller (både vha. Python og uden hjælpemidler), beregne konfidensintervaller og udføre simple hypoteseafprøvninger i de præsenterede statistiske modeller Begrunde valg af Python-kommandoer. Udføre simple ændringer af Python-kode. Kompetencer til at Oversætte oplysninger (givet som tekst) om sandsynligheder, betingede sandsynligheder og eksperimenter til de relevante matematiske formler og udtryk Opstille simple statistiske modeller, kunne vurdere deres relevans for at afklare konkrete videnskabelige spørgsmål, og kunne kvantificere usikkerhed vedrørende deres konklusioner Udføre estimation af en række statistiske modeller i Python og uden hjælpemidler samt aflæse og fortolke estimationsoutput Designe, udføre og fortolke simple computersimulationseksperimenter, der undersøger egenskaber ved stokastiske variable og deres fordelinger","Se Absalon, når kurset er oprettet. Eksempelvis kunne følgende indgå i pensum: M. Sørensen: En introduktion til sandsynlighedsregning. 9. udgave. H. B. Nielsen: Introduction to likelihood based estimation and inference. Third edition.",Introduktion til matematik (MatIntro).,"6 timers forelæsning og 6 timers øvelser om ugen i 7 uger. Øvelser er en kombination af selvstændigt arbejde og gennemgang af opgaver med hjælp fra øvelseslærere. Forelæsninger vil være en kombination af slides, der tager udgangspunkt i pensum, tavlegennemgang, videoer med ekstramateriale, dialog mellem underviser og studerende, quizzer, og diskussioner i mindre grupper blandt de studerende.","{'Forelæsninger': 42, 'Forberedelse (anslået)': 118, 'Teoretiske øvelser': 42, 'Eksamen': 4, 'I alt': 206}",Skriftlig Mundtlig Individuel Løbende feedback i undervisningsforløbet Peerfeedback (studerende giver hinanden feedback) Der gives skriftlig feedback på obligatoriske afleveringsopgaver. Derudover løbende mundtlig kollektiv feedback i undervisningsforløbet fra øvelseslærere samt feedback fra quizzer i forelæsninger og som del af forberedelsen.,Selvbetjeningen på KUnet Som meritstuderende – klik her!Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig stedprøve, 4 timer med opsyn.</div></dd><dt>Eksamensforudsætninger</dt><dd><p>Det er et krav for at deltage i eksamen, at minimum
tre ud af kursets fire obligatoriske opgaver er godkendte
og gyldige. De første tre afleveringer kan genafleveres
én gang, mens den fjerde opgave ikke kan
genafleveres. </p></dd><dt>Hjælpemidler</dt><dd>Kun visse hjælpemidler tilladt (se beskrivelse nedenfor) 
<div><p>Følgende hjælpemidler er tilladt:</p><p>Computer, bøger, noter og slides fra undervisningen;
Lommeregner (ikke CAS-værktøjer).</p><p> </p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p><u>Prøveform:</u> Samme som ved ordinær eksamen. 
<br/>
 </p><p><u>Indstilling:</u> Det er et krav for at deltage i
reeksamen, at enten (1) minimum tre ud af kursets fire
obligatoriske opgaver er gyldige og blevet godkendt i løbet af det
ordinære kursusforløb, eller (2) man får godkendt en
længere eksamenslignende opgave, såfremt (1) ikke er
opfyldt. Opgaven tilsendes på mail efter henvendelse til den
kursusansvarlige, og besvarelsen sendes til den kursusansvarlige på
mail senest tre uger før første dag i reeksamensperioden.</p><p> </p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 24-02-2025
https://kurser.ku.dk/course/ndab16006u/2024-2025,NDAB16006U Implementering af programmeringssprog (IPS),Årgang 2024/2025,Bacheloruddannelsen i bioinformatik Bacheloruddannelsen i datalogi,"Formål : At give de studerende indsigt i, hvordan programmer skrevet i højniveausprog implementeres på en computer. I undervisningen gennemgås forskellige elementer af fortolkning og oversættelse af programmeringssprog: leksikalsk analyse, syntaksanalyse, typecheck, fortolkning, kodegenerering, registerallokering og lagerhåndtering. De grundlæggende metoder til implementering af disse elementer gennemgås, inklusive brug og virkemåde af semi-automatiske værktøjer. I forbindelse med leksikalsk analyse og syntaksanalyse vises det, hvordan beskrivelser, der er bekvemme for mennesker (hhv. regulære udtryk og kontekstfri grammatikker) bliver omformet til automater, som er bekvemme for maskiner. Disse omformninger er grundlaget for værktøjer, der automatisk kan lave leksikalske analysatorer og syntaksanalysatorer ud fra beskrivelser. Afgørlighed af egenskaber ved grammatikker og automater berøres. I forbindelse med generering af mellem- og maskinkode gennemgås, hvordan man på basis af den syntaktiske struktur af et program kan danne maskinkode. Der bliver vist forskellige metoder til optimering af kode. Kurset er mest relevant for datalogistuderende, men specielt indholdet om grammatikker og automater er relevant for matematikere, og den praktiske del af kurset er relevant for alle, der vil implementere domænespecifikke programmeringssprog til brug i eget fag.","Viden at redegøre for faseopdeling af oversættelses- og fortolkningsprocessen og fasernes formål; at anvende teoretisk indsigt om formelle sprog, regulære udtryk, kontekstfri grammatikker, afgørlighed og graffarvning; at forklare, hvordan oversætterværktøjer arbejder og deres begrænsninger. Færdigheder at bruge værktøjer til leksikalsk og syntaktisk analyse; at beskrive og vurdere oversætterudvikling i skriftlig form ; at være i stand til at arbejde med en ikke-triviel kodebase og at udvide denne væsentligt. Kompetencer at designe og implementere en oversætter fra et højniveausprog til maskinkode; at vurdere og bruge passende værktøjer og biblioteker til oversættelsesprocessen; at vurdere ressourceforbrug (tid og plads) af højniveauprogrammer ud fra kendskab til deres implementering.","Se Absalon, når kurset er blevet oprettet. Forventes at være: Torben Æ. Mogensen, ""Introduction to Compiler Design (3rd edition)"", Springer, evt. suppleret med noter.","Kendskab til maskinkodeprogrammering, samt programmering i F#. Kurset forudsætter desuden et grundlæggende kendskab til regulære udtryk, automater og kontekstfri grammatikker, som kan opnås ved at følge kurset ""Databases and Information Systems (DIS)"" (2023/24-udgaven eller senere) senest samtidigt, eller ved selvstudium.","Undervisningen vil foregå med en kombination af forelæsninger, øvelser og et praktisk projekt (med rapport). Rapportopgaven stilles ved kursets start og afleveres to uger før eksamen, og løses i grupper på indtil tre personer. Desuden er der fem mindre, individuelle opgaver.","{'Forelæsninger': 39, 'Forberedelse (anslået)': 90, 'Øvelser': 21, 'Projektarbejde': 40, 'Eksamensforberedelse': 12, 'Eksamen': 4, 'I alt': 206}","Skriftlig Mundtlig Individuel Kollektiv Løbende feedback i undervisningsforløbet De studerende får individuel skriftlig feedback på ugeopgaverne og gruppevis på projektet. Generel, kollektiv feedback på opgaver og projekt kan også gives ifm. øvelserne.",Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig stedprøve, 4 timer med opsyn.</div></dd><dt>Prøveformsdetaljer</dt><dd>Den skriftlige stedprøve er en ITX-eksamen.
<br/>
Se vigtig information om ITX-stedprøver på Studieinformation under
punktet: Eksamen -&gt; Eksamensform og regler -&gt; Skriftlig
stedprøve (ITX-prøve)</dd><dt>Krav til indstilling til eksamen</dt><dd><p>1. Projekt-rapporten skal være godkendt.
<br/>
2. En (ved kursusstart fastsat) brøkdel af de 4-6 individuelle
ugeopgaver skal være godkendt.</p></dd><dt>Hjælpemidler</dt><dd>Skriftlige hjælpemidler tilladt 
<div><p>Noter og kursets bog. </p><p>Bøger, noter og lignende kan medbringes i papirform eller
uploades før eksamen og tilgås digitalt fra ITX-computeren. Læs
mere om dette på Studieinformation.</p><p> </p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>4 timers skriftlig prøve med skriftlige hjælpemidler (som
ordinær eksamen).</p><p>Krav til indstilling til re-eksamen:</p><p>Såfremt den studerende ikke blev indstillet til den ordinære
eksamen, er det muligt at gen-/efteraflevere manglende opgaver
og/eller projektrapport fra indeværende studieår, senest 3
uger før reeksamensdatoen.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelse</p></div></div>",,,,,,,,,,,,,Gemt den 20-11-2024
https://kurser.ku.dk/course/ndab20001u/2025-2026,NDAB20001U High Performance programmering og systemer (HPPS),Årgang 2025/2026,Bacheloruddannelsen i bioinformatik Bacheloruddannelsen i biokemi Bacheloruddannelsen i datalogi-økonomi Bacheloruddannelsen i machine learning og datavidenskab Bacheloruddannelsen i kognitions- og datavidenskab,"Kurset introducerer de studerende til emnerne computerarkitektur og datanetværk, hukommelsesarkitektur, styresystemer, task-parallelisme og samtidighed, samt til massivt data-paralleliserede arkitekturer. Der vil være fokus på effektiv data-processering (big data) og effektive beregninger (big compute). Kurset er rettet mod studerende på kombinationsuddannelserne datalogi-økonomi og machine learning og datavidenskab, og søger at udvikle en grundlæggende forståelse for koncepter indenfor datamater og it-systemer. Efter kurset vil den studerende besidde evnen til at reflektere over den praktiske ydeevne og udførsel af lavniveau programmer, samt besidde det faglige grundlag for senere praktiske og teoretiske kurser indenfor datalogien. Kursets indhold er tematisk opdelt som følger: Talrepræsentationer, aritmetik og boolsk algebra Instruktionssæt, (symbolsk) maskinsprog, processorarkitektur, og lagerhierarkier Tråde, skedulering, og synkronisering Processer og virtuel hukommelse Datanetværk Parallelle arkitekturer Kurset vil undervejs introducere studerende til lav-niveau systemprogrammeringssprog, såsom C, samt til relevante udviklingsværktøjer, koncepter og teknikker indenfor systemprogrammering. Parallelliseringsteknikker implementeret i gængse lineær algebra-biblioteker vil blive introduceret.","Viden om talrepræsentationer, aritmetik og boolsk algebra instruktionssæt, (symbolsk) maskinsprog, processorarkitektur, og lagerhierarkier tråde, skedulering, og synkronisering processer og virtuel hukommelse indkodning af data i filer datanetværk parallelle arkitekturer Færdigheder i at implementere enkle programmer i et systemprogrammeringssprog med eksplicit lagerhåndtering redegøre for de forskellige motivationer for samtidighed, lagerhierarkier, og virtuel hukommelse benytte gængse værktøjer til at foretage udvikling, modifikation og udvidelse af programmer på systemniveau systematisk afprøve, fejlrette, og måle ydelse af programmel på systemniveau implementere enkle programmer på en parallel platform Kompetencer til at ræsonnere omkring processorarkitektur, lagerhierarkier, styresystemer og datanetværk analysere ydeevnen af programmer baseret på viden om processorarkitektur, lagerhierarkier og styresystemer implementere enkle programmer i et systemprogrammeringssprog ræsonnere omkring korrektheden af simple flertrådede programmer implementere enkle programmer på en parallel platform",Se Absalon for kursuslitteratur.,Programmering og Problemløsning (PoP) samt Diskret Matematik og Formelle Sprog (DMFS) (eller Diskret matematik og algoritmer (DMA)) .,"Forelæsninger og øvelsestimer med praktiske og teoretiske hjemmeopgaver, samt programmeringsprojekter afrapporteret med skriftlige rapporter (i grupper).","{'Forelæsninger': 32, 'Forberedelse (anslået)': 62, 'Øvelser': 32, 'Projektarbejde': 50, 'Eksamensforberedelse': 10, 'Eksamen': 20, 'I alt': 206}",Skriftlig Individuel Kollektiv Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig aflevering, 51 timer</div></dd><dt>Prøveformsdetaljer</dt><dd>Individuel tag-hjem skriftlig eksamen med udarbejdelse af
program og rapport.</dd><dt>Eksamensforudsætninger</dt><dd><p>Der stilles 3-5 afleveringsopgaver af varierende størrelse,
herunder programmeringsprojekter og teoretiske opgaver.</p><p>Det udmeldes på Absalon ved kursusstart præcis hvor mange
afleveringsopgaver, der stilles. </p><p>Alle undtagen 1 af opgaverne skal godkendes for at kvalificere
sig til eksamen.</p><p>Detaljer for afleveringerne, herunder størrelserne på opgaverne
og om de enkelte opgaver skal løses individuelt eller i
grupper, offentliggøres ved kursusstart.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt</dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Samme som den ordinære eksamen.</p><p>Kvalifikation til deltagelse i reeksamen opnås ved
(gen)aflevering af afleveringsopgaver senest 3 uger før
reeksamen, således at samme krav som for indstillingskravet til den
ordinær eksamen opfyldes. Dvs. alle undtagen 1 af
afleveringsopgaverne skal godkendes for at kvalificere sig til
reeksamen.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 24-02-2025
https://kurser.ku.dk/course/ndab16006u/2025-2026,NDAB16006U Implementering af programmeringssprog (IPS),Årgang 2025/2026,Bacheloruddannelsen i bioinformatik Bacheloruddannelsen i datalogi,"Formål : At give de studerende indsigt i, hvordan programmer skrevet i højniveausprog implementeres på en computer. I undervisningen gennemgås forskellige elementer af fortolkning og oversættelse af programmeringssprog: leksikalsk analyse, syntaksanalyse, typecheck, fortolkning, kodegenerering, registerallokering og lagerhåndtering. De grundlæggende metoder til implementering af disse elementer gennemgås, inklusive brug og virkemåde af semi-automatiske værktøjer. I forbindelse med leksikalsk analyse og syntaksanalyse vises det, hvordan beskrivelser, der er bekvemme for mennesker (hhv. regulære udtryk og kontekstfri grammatikker) bliver omformet til automater, som er bekvemme for maskiner. Disse omformninger er grundlaget for værktøjer, der automatisk kan lave leksikalske analysatorer og syntaksanalysatorer ud fra beskrivelser. Afgørlighed af egenskaber ved grammatikker og automater berøres. I forbindelse med generering af mellem- og maskinkode gennemgås, hvordan man på basis af den syntaktiske struktur af et program kan danne maskinkode. Der bliver vist forskellige metoder til optimering af kode. Kurset er mest relevant for datalogistuderende, men specielt indholdet om grammatikker og automater er relevant for matematikere, og den praktiske del af kurset er relevant for alle, der vil implementere domænespecifikke programmeringssprog til brug i eget fag.","Viden at redegøre for faseopdeling af oversættelses- og fortolkningsprocessen og fasernes formål; at anvende teoretisk indsigt om formelle sprog, regulære udtryk, kontekstfri grammatikker, afgørlighed og graffarvning; at forklare, hvordan oversætterværktøjer arbejder og deres begrænsninger. Færdigheder at bruge værktøjer til leksikalsk og syntaktisk analyse; at beskrive og vurdere oversætterudvikling i skriftlig form ; at være i stand til at arbejde med en ikke-triviel kodebase og at udvide denne væsentligt. Kompetencer at designe og implementere en oversætter fra et højniveausprog til maskinkode; at vurdere og bruge passende værktøjer og biblioteker til oversættelsesprocessen; at vurdere ressourceforbrug (tid og plads) af højniveauprogrammer ud fra kendskab til deres implementering.","Se Absalon, når kurset er blevet oprettet. Forventes at være: Torben Æ. Mogensen, ""Introduction to Compiler Design (3rd edition)"", Springer, evt. suppleret med noter.","Kendskab til maskinkodeprogrammering, samt programmering i F#. Kurset forudsætter desuden et grundlæggende kendskab til regulære udtryk, automater og kontekstfri grammatikker, som kan opnås ved at følge kurset ""Databases and Information Systems (DIS)"" (2023/24-udgaven eller senere) senest samtidigt, eller ved selvstudium.","Undervisningen vil foregå med en kombination af forelæsninger, øvelser og et praktisk projekt (med rapport). Rapportopgaven stilles ved kursets start og afleveres ca. to uger før eksamen, og løses i grupper på indtil tre personer. Desuden er der fem mindre, individuelle opgaver.","{'Forelæsninger': 39, 'Forberedelse (anslået)': 90, 'Øvelser': 21, 'Projektarbejde': 40, 'Eksamensforberedelse': 12, 'Eksamen': 4, 'I alt': 206}","Skriftlig Mundtlig Individuel Kollektiv Løbende feedback i undervisningsforløbet De studerende får individuel skriftlig feedback på ugeopgaverne og gruppevis på projektet. Generel, kollektiv feedback på opgaver og projekt kan også gives ifm. øvelserne.",Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig stedprøve, 4 timer med opsyn.</div></dd><dt>Eksamensforudsætninger</dt><dd><p>1. Projekt-rapporten skal være godkendt.
<br/>
2. En (ved kursusstart fastsat) brøkdel af de 4-6 individuelle
ugeopgaver skal være godkendt.</p></dd><dt>Hjælpemidler</dt><dd>Skriftlige hjælpemidler tilladt 
<div><p>Noter og kursets bog.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>4 timers skriftlig prøve med skriftlige hjælpemidler (som
ordinær eksamen).</p><p>Krav til indstilling til re-eksamen:</p><p>Såfremt den studerende ikke blev indstillet til den ordinære
eksamen, er det muligt at gen-/efteraflevere manglende opgaver
og/eller projektrapport fra indeværende studieår, senest 3
uger før reeksamensdatoen.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelse</p></div></div>",,,,,,,,,,,,,Gemt den 24-02-2025
https://kurser.ku.dk/course/nbik10013u/2024-2025,NBIK10013U Individual Project in Bioinformatics,Volume 2024/2025,MSc Programme in Bioinformatics,The exact content is decided with the supervisor.,"The aim of these projects is to get deeply into a bioinformatics topic, often related to a research project. This is often used as a warm-up for the Master’s project. Students completing the course will be able to: motivate their work, clearly present the background information, methods and results of the work without errors, discuss the implications of the results and draw scientifically sound conclusions based on the work. search for relevant literature and understand the relevant parts. write a project in a scientifically precise way with adequate references. present the work. answer questions about any part of the project in reasonable depth and explain the core methods and results of the project in great detail. put the work in context and discuss possible future directions of research in the area and judge the relevance of such work. Knowledge : The aim with these projects is to get a deep understanding of a bioinformatics topic often related to a research project. This is often used as a warm-up for the Master’s project. The exact content is decided with the supervisor. Skills : Write a bioinformatics report Search for background material Select and use relevant bioinformatics tools for a specific project Competences : The student will obtain these general competences: Ability to do project work Writing a scientific report Analyze complex real-world problems",See Absalon.,All the mandatory courses in the bioinformatics program. Knowledge within bioinformatics. Programming at least at the level of “Linux and Python Programming” is recommended. Academic qualifications equivalent to a BSc degree is recommended.,Individual project with a supervisor.,"{'Preparation': 19, 'Project work': 372, 'Guidance': 20, 'Exam': 1, 'Total': 412}",Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade) Written and/or oral feedback during the project work. Oral feedback at the exam.,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>15 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment</div><div>Oral examination, 60 min. (no preparation)</div></dd><dt>Type of assessment details</dt><dd>Written assignment (2/3 of final grade)
<br/>
- Ongoing preparation throughout the course with submission at the
end of the course.
<br/>
Oral examination (1/3 of final grade)</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The same as the ordinary exam.</p><p>Students must pass both exams to pass the overall exam. The
passed part of the exam may be reused in a reexam.</p><p>If the written assignment is not passed it may be
revised and submitted no later than three weeks
before the reexam.</p><p>If the written assignment is not submitted witin the
deadline it must be submitted no later than three weeks
before the reexam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>In order to obtain the grade 12 the student should
convincingly and accurately demonstrate the knowledge, skills and
competences described under Learning
Outcome.</p></div></div>",English,NBIK10013U,15 ECTS,Full Degree Master,1 block,"Block 1, Block 2, Block 3, Block 4 And Summer Block 5 - Week 27-35",Meetings with supervisor.,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board for the Biological Area'],"['Department of Biology', 'Department of Computer Science']",['Faculty of Science'],['Rasmus Heller (7-7c726f76766f7c4a6c737938757f386e75)'],Saved on the 20-02-2024
https://kurser.ku.dk/course/nbik10013u/2025-2026,NBIK10013U Individual Project in Bioinformatics,Volume 2025/2026,MSc Programme in Bioinformatics,The exact content is decided with the supervisor.,"Knowledge: The aim with these projects is to get a deep understanding of a bioinformatics topic often related to a research project. The exact content is decided with the supervisor. Skills: The student will acquire and apply these skills under supervision: Write a bioinformatics report Search for background material Select and use relevant bioinformatics tools for a specific project Competences: Students completing the course will be able to: Motivate their work, clearly present the background information, methods and results of their work, discuss the implications of the results and draw scientifically sound conclusions based on the work. Search for relevant literature and understand the relevant parts. Write a project in a scientifically precise way with adequate references. Present the work orally. Answer questions about any part of the project in reasonable depth and explain the core methods and results of the project in great detail. Put the work in context and discuss possible future directions of research in the area and judge the relevance of such work.",See Absalon.,All the mandatory courses in the bioinformatics program. Knowledge within bioinformatics. Programming at least at the level of “Linux and Python Programming” is recommended. Academic qualifications equivalent to a BSc degree is recommended.,Individual project with a supervisor.,"{'Preparation': 19, 'Project work': 372, 'Guidance': 20, 'Exam': 1, 'Total': 412}",Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade) Written and/or oral feedback during the project work. Oral feedback at the exam.,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>15 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 45 min (no
preparation)</div></dd><dt>Type of assessment details</dt><dd>Written assignment
<br/>
- Ongoing preparation throughout the course with submission at the
end of the course.
<br/><br/>
The student must submit the written assignment in order to
participate in the subsequent oral examination.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>In order to obtain the grade 12 the student should
convincingly and accurately demonstrate the knowledge, skills and
competences described under Learning
Outcome.</p></div></div>",English,NBIK10013U,15 ECTS,Full Degree Master,1 block,"Block 1, Block 2, Block 3, Block 4 And Summer Block 5 - Week 27-35",Meetings with supervisor.,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board for the Biological Area'],"['Department of Biology', 'Department of Computer Science']",['Faculty of Science'],['Rasmus Heller (7-756b686f6f687543656c72316e7831676e)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/nbik22004u/2025-2026,NBIK22004U Integrative Structural Biology,Volume 2025/2026,MSc Programme in Biochemistry MSc Programme in Biology MSc Programme in Nanoscience,"The course introduces students to the many advanced techniques researchers use to capture biological structure including various X-ray and neutron techniques, single molecule fluorescence methods, cryo-electron microscopy, nuclear magnetic resonance spectroscopy and hydrogen deuterium exchange mass spectrometry. This will involve hands on experimental exercises during which students learn how to use these methods in order to derive the three-dimensional structures of proteins. To become properly familiar with the different techniques, students will visit and conduct exercises at the large-scale infrastructure facilities in the region, such as ESS and MAX-IV in Lund, as well as the state-of-the-art facilities at UCPH such as the Core Facility for Integrated Microscopy, the cOpenNMR facility for nuclear magnetic resonance spectroscopy and the facility for biological small-angle X-ray scattering, CPHSAXS. Building on this, the course will provide an overview of how computational methods in structural biology, e.g. molecular dynamics simulations and Monte Carlo methods, can be used to study the structure and dynamics of proteins. The course will also teach students to integrate data obtained from various structural biology techniques using state-of-the-art computational modelling and machine learning methods. This will involve hands-on experience in computational experiments. The course is highly interdisciplinary and relevant to students from biology, physics, chemistry and health science backgrounds. As such, after the initial introduction, students receive a crash course in either Protein Science (specifically for students with a physics, chemistry or computer science background) or Computer Science (for students with a background in the bio- and health sciences), depending on their background. The format will be a mixture of lectures, journal clubs, practical exercises, group discussions, facility visits and hands-on introductions to e.g. software used in protein structure determination and molecular simulations. A substantial part of the reading material is expected to be primary research articles and review articles. This course is part of a network of four advanced, experimental and interdisciplinary courses being offered at the University of Copenhagen, Aarhus University, the Technical University of Denmark and SydDansk University. The network is called the Interdisciplinary Teaching in Natural & Technical Science network is funded by the Novo Nordisk Foundation. Students enrolled in this course will have the opportunity to participate in networking activities such as a seminar series, research facility visits and summer camps.","Knowledge: Knowledge on advanced structural biology techniques and instrumentation including X-ray crystallography, NMR spectroscopy, cryo-EM, mass-spectrometry, single molecule methods and small angle scattering. Understand how protein structures are determined via X-ray crystallography, NMR or cryo-EM. Understand how different methods may be integrated to study complex and dynamic macromolecules and their assemblies. Understand the time and length scales that different methods can access. Understand the basic principles of computer simulation techniques and how they can be used together with experimental methods. Have an overview of methods for protein structure prediction. Skills: Ability to read and critically evaluate publications containing structural biology data including X-ray crystallography, cryo-EM, NMR spectroscopy and small angle scattering. Be able to, at a basic level, design strategies for structural studies of proteins. Can differentiate between methods according to resolution in both time and length scales. To compare the strengths, limitations and complementary potential of structural data obtained using different techniques. Be able to use simple methods for protein structure determination. Be able to perform and visualize results from structure prediction methods and molecular simulations. Can read and extract key scientific findings from primary literature on integrative structural biology. Can perform experiments within structural biology and use computational tools to evaluate structural biology data. Competences: Critically evaluate data obtained in structural biology research. Combine a broad range of biophysical methods, including those based on computational methods to envisage how these methods can be integrated in structural studies of proteins. Ability to combine methods to study the structure, dynamics and functions of proteins for use in both pharmaceutical sciences (for example as drug targets or protein pharmaceuticals) or biotechnology (for example enzymes)",See Absalon for a list of course literature,"The course is an advanced interdisciplinary course and students interested in biological structure are encouraged to apply from a wide variety of disciplines, including chemistry, biology, physics, computer sciences, human biology, neuroscience, and the pharmaceutical sciences. It will be beneficial to have some basic knowledge of protein science and students who do not should expect to supplement their knowledge on this topic during the course. To make it possible for students from a variety of disciplines to participate, students will receive a brief six-hour introductory crash course to either protein science or computer science, depending on their background.","Lectures, journal clubs, practical exercises, facility visits, group discussions","{'Lectures': 67, 'Preparation': 301, 'Practical exercises': 23, 'Excursions': 15, 'Exam Preparation': 6}",Oral,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>15 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, 30 minutes</div></dd><dt>Type of assessment details</dt><dd>Students will have 48 hours to prepare with an assigned journal
article which will then be discussed in a 30-minute exam.</dd><dt>Examination prerequisites</dt><dd><p>To be allowed to the final exam, the student has to have
participated in minimum 60% of the practical exercises
assigned to them. In addition, the student must have submitted a
poster. If the student has not completed at least 60% of the
practical exercises assigned to them, the student is permitted to
submit 2-page written reports on the topic of the missed practical
exercises.</p><p> </p></dd><dt>Aid</dt><dd>No aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Two internal examiners</div></dd><dt>Re-exam</dt><dd><p>The same as the ordinary exam.</p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NBIK22004U,15 ECTS,Full Degree Master,2 blocks,Block 3 And Block 4,A,40 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board for the Biological Area'],"['Department of Biology', 'Department of Computer Science', 'Department of Pharmacy', 'Department of Drug Design and Pharmacology', 'Department of Chemistry', 'The Niels Bohr Institute']",['Faculty of Science'],['Kresten Lindorff-Larsen (8-716e736974776b6b45676e7433707a336970)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak23006u/2025-2026,NDAK23006U Interactive Proof Assistants (IPA),Volume 2025/2026,,"Interactive theorem proving is concerned with carrying out machine-checked proofs and developing the systems that check these proofs—proof assistants. Proof assistants, like Coq, Lean, and Isabelle, are used today to build highly critical systems and verify deep mathematical results. Landmark achievements in this area include formally verified compilers, operating system kernels, and distributed systems, as well as formal proofs of deep mathematical results, such as the four-colour, the Feit–Thompson, and Gödel's incompleteness theorems, and the Kepler conjecture. The IPA course is a hands-on course about using a proof assistant to construct formal models of algorithms, protocols, and programming languages and to reason about their properties. The focus is on applying logical methods to concrete problems. The course will demonstrate the challenges of formal rigour and the benefits of machine support in modeling, proving and validating. In the course, we will use the Isabelle proof assistant. The course is structured in two parts: The first part introduces basic and advanced modeling techniques (functional programs, inductive definitions, modules), the associated proof techniques (term rewriting, resolution, induction, proof automation), and compilation of the models to certified executable code. In the second part, the students work in groups on a project assignment in which they apply these techniques: they build a formal model and prove its desired properties. The project lies in the area of programming languages, model checking, and information security.","Knowledge of Logic and natural deduction Modeling techniques Proof techniques Skills to Effectively use a proof assistant to write precise and concise models and specifications (i.e., apply the above modeling techniques). Use the proof assistant as a tool for checking and analyzing such models and for taming their complexity (i.e., apply the above proof techniques). Extract certified executable implementations from specifications. Competences to Create unambiguous formal models and analyse them. Discuss what it means for a program/​algorithm/​system/​model to be correct and rigorously demonstrate correctness.",See Absalon for the course literature.,"It is expected that students have a working knowledge of programming and programming languages corresponding to the course Advanced Programming (AP) or equivalent. Semantics and Types (SaT) is recommended, but not required. Academic qualifications equivalent to a BSc degree is recommended.","The course progresses from teaching (lectures with exercises) to project work and finally preparation for presentation/oral exam: ▪ Lecture phase: lectures and exercises, formation of project groups (4 weeks) ▪ Project phase: project work (4 weeks) ▪ Presentation and exam preparation (1 week)","{'Lectures': 16, 'Exercises': 24, 'Project work': 145, 'Exam Preparation': 20, 'Exam': 1, 'Total': 206}",Oral Collective Continuous feedback during the course of the semester Peer feedback (Students give each other feedback) Students receive feedback from the instructors during the exercise sessions and during project work. Students give each other feedback within the project groups.,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 30 minutes (no
preparation time)</div></dd><dt>Type of assessment details</dt><dd>Specifically, the exam consists of two parts:
<br/><br/>
1. Submission of the developed Isabelle formalization as part of
the group project (written assignment).
<br/>
2. An individual oral examination (without preparation) based on
the project work (with a special emphasis on the part of the
project the student has co-authored) and on the general course
topics.
<br/><br/>
The project and oral examination are not weighted, and thus only a
single overall assessment is provided for the two parts of the
exam.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>For the re-exam, the student must complete and submit a
similar project to the regular one. The deadline for submitting the
new report is 2 weeks before the re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK23006U,"7,5 ECTS",Full Degree Master,1 block,Block 1,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Dmitriy Traytel (7-7775647c77686f43676c316e7831676e)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak23006u/2024-2025,NDAK23006U Interactive Proof Assistants (IPA),Volume 2024/2025,,"Interactive theorem proving is concerned with carrying out machine-checked proofs and developing the systems that check these proofs—proof assistants. Proof assistants, like Coq, Lean, and Isabelle, are used today to build highly critical systems and verify deep mathematical results. Landmark achievements in this area include formally verified compilers, operating system kernels, and distributed systems, as well as formal proofs of deep mathematical results, such as the four-colour, the Feit–Thompson, and Gödel's incompleteness theorems, and the Kepler conjecture. The IPA course is a hands-on course about using a proof assistant to construct formal models of algorithms, protocols, and programming languages and to reason about their properties. The focus is on applying logical methods to concrete problems. The course will demonstrate the challenges of formal rigour and the benefits of machine support in modeling, proving and validating. In the course, we will use the Isabelle proof assistant. The course is structured in two parts: The first part introduces basic and advanced modeling techniques (functional programs, inductive definitions, modules), the associated proof techniques (term rewriting, resolution, induction, proof automation), and compilation of the models to certified executable code. In the second part, the students work in groups on a project assignment in which they apply these techniques: they build a formal model and prove its desired properties. The project lies in the area of programming languages, model checking, and information security.","Knowledge of Logic and natural deduction Modeling techniques Proof techniques Skills to Effectively use a proof assistant to write precise and concise models and specifications (i.e., apply the above modeling techniques). Use the proof assistant as a tool for checking and analyzing such models and for taming their complexity (i.e., apply the above proof techniques). Extract certified executable implementations from specifications. Competences to Create unambiguous formal models and analyse them. Discuss what it means for a program/​algorithm/​system/​model to be correct and rigorously demonstrate correctness.",See Absalon for the course literature.,"It is expected that students have a working knowledge of programming and programming languages corresponding to the course Advanced Programming (AP) or equivalent. Semantics and Types (SaT) is recommended, but not required. Academic qualifications equivalent to a BSc degree is recommended.","The course progresses from teaching (lectures with exercises) to project work and finally preparation for presentation/oral exam: ▪ Lecture phase: lectures and exercises, formation of project groups (4 weeks) ▪ Project phase: project work (4 weeks) ▪ Presentation and exam preparation (1 week)","{'Lectures': 16, 'Exercises': 24, 'Project work': 145, 'Exam Preparation': 20, 'Exam': 1, 'Total': 206}",Oral Collective Continuous feedback during the course of the semester Peer feedback (Students give each other feedback) Students receive feedback from the instructors during the exercise sessions and during project work. Students give each other feedback within the project groups.,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 30 minutes (no
preparation time)</div></dd><dt>Type of assessment details</dt><dd>Specifically, the exam consists of two parts:
<br/><br/>
1. Submission of the developed Isabelle formalization as part of
the group project (written assignment).
<br/>
2. An individual oral examination (without preparation) based on
the project work (with a special emphasis on the part of the
project the student has co-authored) and on the general course
topics.
<br/><br/>
The project and oral examination are not weighted, and thus only a
single overall assessment is provided for the two parts of the
exam.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>For the re-exam, the student must complete and submit a
similar project to the regular one. The deadline for submitting the
new report is 2 weeks before the re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK23006U,"7,5 ECTS",Full Degree Master,1 block,Block 1,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Dmitriy Traytel (7-8684738b86777e52767b407d8740767d)'],Saved on the 14-02-2024
https://kurser.ku.dk/course/nbik22004u/2024-2025,NBIK22004U Integrative Structural Biology,Volume 2024/2025,MSc Programme in Biochemistry MSc Programme in Biology MSc Programme in Nanoscience,"The course introduces students to the many advanced techniques researchers use to capture biological structure including various X-ray and neutron techniques, single molecule fluorescence methods, cryo-electron microscopy, nuclear magnetic resonance spectroscopy and hydrogen deuterium exchange mass spectrometry. This will involve hands on experimental exercises during which students learn how to use these methods in order to derive the three-dimensional structures of proteins. To become properly familiar with the different techniques, students will visit and conduct exercises at the large-scale infrastructure facilities in the region, such as ESS and MAX-IV in Lund, as well as the state-of-the-art facilities at UCPH such as the Core Facility for Integrated Microscopy, the cOpenNMR facility for nuclear magnetic resonance spectroscopy and the facility for biological small-angle X-ray scattering, CPHSAXS. Building on this, the course will provide an overview of how computational methods in structural biology, e.g. molecular dynamics simulations and Monte Carlo methods, can be used to study the structure and dynamics of proteins. The course will also teach students to integrate data obtained from various structural biology techniques using state-of-the-art computational modelling and machine learning methods. This will involve hands-on experience in computational experiments. The course is highly interdisciplinary and relevant to students from biology, physics, chemistry and health science backgrounds. As such, after the initial introduction, students receive a crash course in either Protein Science (specifically for students with a physics, chemistry or computer science background) or Computer Science (for students with a background in the bio- and health sciences), depending on their background. The format will be a mixture of lectures, journal clubs, practical exercises, group discussions, facility visits and hands-on introductions to e.g. software used in protein structure determination and molecular simulations. A substantial part of the reading material is expected to be primary research articles and review articles. This course is part of a network of four advanced, experimental and interdisciplinary courses being offered at the University of Copenhagen, Aarhus University, the Technical University of Denmark and SydDansk University. The network is called the Interdisciplinary Teaching in Natural & Technical Science network is funded by the Novo Nordisk Foundation. Students enrolled in this course will have the opportunity to participate in networking activities such as a seminar series, research facility visits and summer camps.","Knowledge: Knowledge on advanced structural biology techniques and instrumentation including X-ray crystallography, NMR spectroscopy, cryo-EM, mass-spectrometry, single molecule methods and small angle scattering. Understand how protein structures are determined via X-ray crystallography, NMR or cryo-EM. Understand how different methods may be integrated to study complex and dynamic macromolecules and their assemblies. Understand the time and length scales that different methods can access. Understand the basic principles of computer simulation techniques and how they can be used together with experimental methods. Have an overview of methods for protein structure prediction. Skills: Ability to read and critically evaluate publications containing structural biology data including X-ray crystallography, cryo-EM, NMR spectroscopy and small angle scattering. Be able to, at a basic level, design strategies for structural studies of proteins. Can differentiate between methods according to resolution in both time and length scales. To compare the strengths, limitations and complementary potential of structural data obtained using different techniques. Be able to use simple methods for protein structure determination. Be able to perform and visualize results from structure prediction methods and molecular simulations. Can read and extract key scientific findings from primary literature on integrative structural biology. Can perform experiments within structural biology and use computational tools to evaluate structural biology data. Competences: Critically evaluate data obtained in structural biology research. Combine a broad range of biophysical methods, including those based on computational methods to envisage how these methods can be integrated in structural studies of proteins. Ability to combine methods to study the structure, dynamics and functions of proteins for use in both pharmaceutical sciences (for example as drug targets or protein pharmaceuticals) or biotechnology (for example enzymes)",See Absalon for a list of course literature,"The course is an advanced interdisciplinary course and students interested in biological structure are encouraged to apply from a wide variety of disciplines, including chemistry, biology, physics, computer sciences, human biology, neuroscience, and the pharmaceutical sciences. It will be beneficial to have some basic knowledge of protein science and students who do not should expect to supplement their knowledge on this topic during the course. To make it possible for students from a variety of disciplines to participate, students will receive a brief six-hour introductory crash course to either protein science or computer science, depending on their background.","Lectures, journal clubs, practical exercises, facility visits, group discussions","{'Lectures': 67, 'Preparation': 301, 'Practical exercises': 23, 'Excursions': 15, 'Exam Preparation': 6}",Oral,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>15 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, 30 minutes</div></dd><dt>Type of assessment details</dt><dd>Students will have 48 hours to prepare with an assigned journal
article which will then be discussed in a 30-minute exam.</dd><dt>Exam registration requirements</dt><dd><p>To be allowed to the final exam, the student has to have
participated in minimum 60% of the practical exercises
assigned to them. In addition, the student must have submitted a
poster. If the student has not completed at least 60% of the
practical exercises assigned to them, the student is permitted to
submit 2-page written reports on the topic of the missed practical
exercises.</p><p> </p></dd><dt>Aid</dt><dd>Without aids</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Two internal examiners</div></dd><dt>Re-exam</dt><dd><p>The same as the ordinary exam.</p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NBIK22004U,15 ECTS,Full Degree Master,2 blocks,Block 3 And Block 4,A,40 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board for the Biological Area'],"['Department of Biology', 'Department of Computer Science', 'Department of Pharmacy', 'Department of Drug Design and Pharmacology', 'Department of Chemistry', 'The Niels Bohr Institute']",['Faculty of Science'],['Kresten Lindorff-Larsen (8-6e6b70667174686842646b71306d7730666d)'],Saved on the 14-02-2024
https://kurser.ku.dk/course/ndab15003u/2024-2025,NDAB15003U Interaktionsdesign (Inter),Årgang 2024/2025,Bacheloruddannelsen i datalogi Bacheloruddannelsen i kognitions- og datavidenskab Bacheloruddannelsen i sundhed og informatik Kandidatuddannelsen i datalogi med sidefag,"Kursets formål er at give deltagerne en indføring i de centrale begreber, problemstillinger og metoder i fagområderne menneske-datamaskine interaktion og interaktionsdesign. Gennem en kombination af forelæsninger og øvelser skal deltagerne lære, hvad brugsvenlighed er, hvordan brugsvenlige systemer designes, og hvordan man kan evaluere brugergrænseflader. Kurset vedrører interaktion mellem mennesker og interaktive IT-systemer. Denne belyses ved følgende tre hovedområder: (a) Brugsvenlighed: Omfanget, hvormed et IT-system støtter brugernes aktiviteter på en for brugerne effektiv og bekvem måde. Herunder behandles vigtigheden af brugsvenligt design, facetter af brugsvenlighed, grundlæggende principper for brugsvenligt design, brugeres evner og behov, teorier for menneske-datamaskine- interaktion, og de særlige udfordringer som er knyttet til design af brugsvenlige interaktive systemer; (b) Design og konstruktion: Planlægning og udformning af IT-systemer, så de er brugsvenlige. Herunder behandles analyser af brugeres arbejde, fordele og ulemper ved forskellige interaktionsformer, opbygning af brugergrænseflader, og prototyper af brugergrænseflader; (c) Evaluering af brugergrænseflader: Hvordan IT-systemers brugsvenlighed kan undersøges rigoristisk. Herunder behandles valg af evalueringsteknikker, eksperimentel udførelse af evalueringer, fortolkning af evalueringsresultater, samt effektiv kommunikation af evalueringsresultater. Alle tre emner vil blive behandlet både ud fra kursuslitteraturen og ved praktiske øvelser.","Ved kurset afslutning har den studerende opnået følgende: Viden Grundlæggende viden om gængs teori og praksis for menneske-datamaskine-interaktion og interaktionsdesign. Viden om brugeres evner, færdigheder og behov, og kendskab til metoder til at afdække disse. Basal viden om interaktionsformer og de bagvedliggende principper. Viden om teori og praksis bag evalueringsformer for brugsvenlige IT-systemer generelt. Færdigheder Designe og re-designe brugsvenlige IT-systemer og evaluere samme under anvendelse af usability-evaluering, inspektion og øvrige, udvalgte, klassiske evalueringsmetoder. Skitsere og prototype brugergrænseflader og interaktionsformer ud fra en forståelse af brugeres evner og behov. Kompetencer Planlægge og udføre design og re-design af IT-systemer under anvendelse af brugsvenlighedsprincipper. Planlægge og udføre design og re-design af IT-systemer med feedback fra eksperimentelle evalueringer af brugsvenlighed. Formidle og kommunikere kriterier for brugsvenlighed og resultater af evalueringer af brugsvenlighed under design af IT-systemer.","Se Absalon, når kurset er oprettet.",Kendskab til grundlæggende programmering.,Forelæsninger og klasseøvelser.,"{'Forelæsninger': 32, 'Forberedelse (anslået)': 90, 'Praktiske øvelser': 32, 'Eksamensforberedelse': 30, 'Eksamen': 22, 'I alt': 206}",Skriftlig Individuel Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig aflevering, 4 dage</div></dd><dt>Prøveformsdetaljer</dt><dd>Eksamen er individuel</dd><dt>Krav til indstilling til eksamen</dt><dd><p>Det er en forudsætning for at kunne gå til eksamen, at den
studerende har fået godkendt de 4-6 obligatoriske opgaver
(individuelle- og gruppeopgaver). Aflevering sker i
Absalon.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt 
<div><p>Det er tilladt at anvende værktøjer baseret på kunstig
intelligens i eksamensopgaven hvis den studerende redegører for
hvilke værktøjer, der er brugt, hvordan de er brugt og i hvilke
dele af opgaven de er brugt.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Som ordinær ekamen.</p><p>Hvis der er 10 eller færre tilmeldte, afholdes reeksamen som en
mundtlig eksamen af 20 minutters varighed, uden
forberedelsestid.</p><p>Hvis den studerende ikke er kvalificeret til ordinær eksamen kan
kvalifikation til reeksamen opnås ved aflevering og godkendelse af
de obligatoriske opgaver. Aflevering sker i Absalon senest 2 uger
før reeksamen.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 19-02-2024
https://kurser.ku.dk/course/ndak16003u/2025-2026,NDAK16003U Introduction to Data Science (IDS),Volume 2025/2026,MSc Programme in Bioinformatics MSc Programme in IT and Cognition MSc Programme in Molecular Biomedicine MSc Programme in Environmental Science MSc Programme in Agriculture MSc Programme in Climate Change,"The amount and complexity of available data are steadily increasing. To make use of this wealth of information, computing systems are needed that turn data into knowledge. Machine learning is about developing the required software that automatically analyses data for making predictions, categorisations, and recommendations. Machine learning algorithms are already an integral part of today's computing systems - for example in search engines, recommender systems, or biometrical applications. Machine learning provides a set of tools that is widely applicable for data analysis within a diverse set of problem domains such as data mining, search engines, digital image and signal analysis, natural language modelling, bioinformatics, physics, economics, biology, etc. The purpose of the course is to introduce non-Computer Science students to probabilistic data modelling and the most common techniques from statistical machine learning and data mining. The students will obtain a working knowledge of basic data modelling and data analysis using fundamental machine learning techniques. This course is relevant for students from, among others, the studies of Cognition and IT, Bioinformatics, Physics, Biology, Chemistry, Economics, and Psychology. The course covers the following tentative topic list: Foundations of statistical learning, probability theory. Classification methods, such as Linear models, K-Nearest Neighbor. Regression methods, such as Linear regression. Bayesian Statistics Clustering. Dimensionality reduction and visualisation techniques such as principal component analysis (PCA).","At course completion, the successful student will have: Knowledge of the general principles of data analysis; elementary probability theory for modelling and analysing data; elementary Bayesian statistics; the basic concepts underlying classification, regression, and clustering; common pitfalls in machine learning. Skills in applying linear and non-linear techniques for classification and regression; elementary data clustering; visualising and evaluating results obtained with machine learning techniques; identifying and handling common pitfalls in machine learning; using machine learning and data mining toolboxes. Competences in recognising and describing possible applications of machine learning and data analysis in their field of science; comparing, appraising and selecting machine learning methods for specific tasks; solving real-world data mining and pattern recognition problems by using machine learning techniques.","See Absalon when the course is set up. However, a brush-up in Calculus such as ""Calculus for Dummies"" could be of help for students who did not have mathematics since high school.",Basic calculus and Python programming knowledge is required. Academic qualifications equivalent to a BSc degree is recommended.,Lecture and exercise classes,"{'Lectures': 28, 'Preparation': 30, 'Theory exercises': 74, 'Practical exercises': 74, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Assessment of 4-5 assignments weighted equally. Passed
assignments cannot be transferred to another block. Assignments are
individual.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners.</div></dd><dt>Re-exam</dt><dd><p>A 20 minutes oral exam without preparation in course
curriculum.</p><p>No aids allowed.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK16003U,"7,5 ECTS",Full Degree Master,1 block,Block 3,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Daniel Hershcovich (2-666a42666b306d7730666d)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndab15003u/2025-2026,NDAB15003U Interaktionsdesign (Inter),Årgang 2025/2026,Bacheloruddannelsen i datalogi Bacheloruddannelsen i kognitions- og datavidenskab Bacheloruddannelsen i sundhed og informatik Kandidatuddannelsen i datalogi med sidefag,"Kursets formål er at give deltagerne en indføring i de centrale begreber, problemstillinger og metoder i fagområderne menneske-datamaskine interaktion og interaktionsdesign. Gennem en kombination af forelæsninger og øvelser skal deltagerne lære, hvad brugsvenlighed er, hvordan brugsvenlige systemer designes, og hvordan man kan evaluere brugergrænseflader. Kurset vedrører interaktion mellem mennesker og interaktive IT-systemer. Denne belyses ved følgende tre hovedområder: (a) Brugsvenlighed: Omfanget, hvormed et IT-system støtter brugernes aktiviteter på en for brugerne effektiv og bekvem måde. Herunder behandles vigtigheden af brugsvenligt design, facetter af brugsvenlighed, grundlæggende principper for brugsvenligt design, brugeres evner og behov, teorier for menneske-datamaskine- interaktion, og de særlige udfordringer som er knyttet til design af brugsvenlige interaktive systemer; (b) Design og konstruktion: Planlægning og udformning af IT-systemer, så de er brugsvenlige. Herunder behandles analyser af brugeres arbejde, fordele og ulemper ved forskellige interaktionsformer, opbygning af brugergrænseflader, og prototyper af brugergrænseflader; (c) Evaluering af brugergrænseflader: Hvordan IT-systemers brugsvenlighed kan undersøges rigoristisk. Herunder behandles valg af evalueringsteknikker, eksperimentel udførelse af evalueringer, fortolkning af evalueringsresultater, samt effektiv kommunikation af evalueringsresultater. Alle tre emner vil blive behandlet både ud fra kursuslitteraturen og ved praktiske øvelser.","Ved kurset afslutning har den studerende opnået følgende: Viden Grundlæggende viden om gængs teori og praksis for menneske-datamaskine-interaktion og interaktionsdesign. Viden om brugeres evner, færdigheder og behov, og kendskab til metoder til at afdække disse. Basal viden om interaktionsformer og de bagvedliggende principper. Viden om teori og praksis bag evalueringsformer for brugsvenlige IT-systemer generelt. Færdigheder Designe og re-designe brugsvenlige IT-systemer og evaluere samme under anvendelse af usability-evaluering, inspektion og øvrige, udvalgte, klassiske evalueringsmetoder. Skitsere og prototype brugergrænseflader og interaktionsformer ud fra en forståelse af brugeres evner og behov. Kompetencer Planlægge og udføre design og re-design af IT-systemer under anvendelse af brugsvenlighedsprincipper. Planlægge og udføre design og re-design af IT-systemer med feedback fra eksperimentelle evalueringer af brugsvenlighed. Formidle og kommunikere kriterier for brugsvenlighed og resultater af evalueringer af brugsvenlighed under design af IT-systemer.","Se Absalon, når kurset er oprettet.",Kendskab til grundlæggende programmering.,Forelæsninger og klasseøvelser.,"{'Forelæsninger': 32, 'Forberedelse (anslået)': 90, 'Praktiske øvelser': 32, 'Eksamensforberedelse': 30, 'Eksamen': 22, 'I alt': 206}",Skriftlig Individuel Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig aflevering, 4 dage</div></dd><dt>Prøveformsdetaljer</dt><dd>Eksamen er individuel</dd><dt>Eksamensforudsætninger</dt><dd><p>Det er en forudsætning for at kunne gå til eksamen, at den
studerende har fået godkendt de 4-6 obligatoriske opgaver
(individuelle- og gruppeopgaver). Aflevering sker i
Absalon.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt</dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Som ordinær ekamen.</p><p>Hvis der er 10 eller færre tilmeldte, afholdes reeksamen som en
mundtlig eksamen af 20 minutters varighed, uden
forberedelsestid.</p><p>Hvis den studerende ikke er kvalificeret til ordinær eksamen kan
kvalifikation til reeksamen opnås ved aflevering og godkendelse af
de obligatoriske opgaver. Aflevering sker i Absalon senest 2 uger
før reeksamen.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 24-02-2025
https://kurser.ku.dk/course/ndak16003u/2024-2025,NDAK16003U Introduction to Data Science (IDS),Volume 2024/2025,MSc Programme in Bioinformatics MSc Programme in IT and Cognition MSc Programme in Molecular Biomedicine MSc Programme in Environmental Science MSc Programme in Agriculture MSc Climate Change,"The amount and complexity of available data are steadily increasing. To make use of this wealth of information, computing systems are needed that turn data into knowledge. Machine learning is about developing the required software that automatically analyses data for making predictions, categorisations, and recommendations. Machine learning algorithms are already an integral part of today's computing systems - for example in search engines, recommender systems, or biometrical applications. Machine learning provides a set of tools that is widely applicable for data analysis within a diverse set of problem domains such as data mining, search engines, digital image and signal analysis, natural language modelling, bioinformatics, physics, economics, biology, etc. The purpose of the course is to introduce non-Computer Science students to probabilistic data modelling and the most common techniques from statistical machine learning and data mining. The students will obtain a working knowledge of basic data modelling and data analysis using fundamental machine learning techniques. This course is relevant for students from, among others, the studies of Cognition and IT, Bioinformatics, Physics, Biology, Chemistry, Economics, and Psychology. The course covers the following tentative topic list: Foundations of statistical learning, probability theory. Classification methods, such as Linear models, K-Nearest Neighbor. Regression methods, such as Linear regression. Bayesian Statistics Clustering. Dimensionality reduction and visualisation techniques such as principal component analysis (PCA).","At course completion, the successful student will have: Knowledge of the general principles of data analysis; elementary probability theory for modelling and analysing data; elementary Bayesian statistics; the basic concepts underlying classification, regression, and clustering; common pitfalls in machine learning. Skills in applying linear and non-linear techniques for classification and regression; elementary data clustering; visualising and evaluating results obtained with machine learning techniques; identifying and handling common pitfalls in machine learning; using machine learning and data mining toolboxes. Competences in recognising and describing possible applications of machine learning and data analysis in their field of science; comparing, appraising and selecting machine learning methods for specific tasks; solving real-world data mining and pattern recognition problems by using machine learning techniques.","See Absalon when the course is set up. However, a brush-up in Calculus such as ""Calculus for Dummies"" could be of help for students who did not have mathematics since high school.",Basic calculus and programming knowledge is required. We use Python as programming language. Students who have experience with programming should be able to learn the necessary Python elements with little difficulty. Academic qualifications equivalent to a BSc degree is recommended.,Lecture and exercise classes,"{'Lectures': 28, 'Preparation': 30, 'Theory exercises': 74, 'Practical exercises': 74, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Assessment of 4-5 assignments weighted equally. Passed
assignments cannot be transferred to another block. Assignments are
individual.</dd><dt>Aid</dt><dd>All aids allowed 
<div><p>The use of AI assistance powered by Large Language Models
(LLM)/Large Multimodal Models (LMM) – such as ChatGPT and GPT-4 –
is permitted for the written assignments, under conditions that
will be specified during the course.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners.</div></dd><dt>Re-exam</dt><dd><p>A 20 minutes oral exam without preparation in course
curriculum.</p><p>No aids allowed.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK16003U,"7,5 ECTS",Full Degree Master,1 block,Block 3,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Daniel Hershcovich (2-71754d71763b78823b7178)'],Saved on the 15-02-2024
https://kurser.ku.dk/course/ndab10003u/2024-2025,NDAB10003U Introduktion til computergrafik (Grafik),Årgang 2024/2025,,"Kurset sigter mod at give en indføring i 3-dimensionel grafisk databehandling samt billedsyntese. Det tilstræbes, at undervisningen tilrettelægges således, at praktiske færdigheder inden for programmering af 3-dimensionelle grafiske systemer indøves gennem løsning af skriftlige ugeopgaver. Indhold : Indføring i grafisk databehandling bestående af: skankonvertering af primitiver, geometriske transformationer, projektioner fra 3 til 2 dimensioner, repræsentation og visualisering af 3-dimensionelle kurver og flader, lys- og refleksionsmodeller samt centrale algoritmer i visualiseringsprocessen.","Ved kursets afslutning skal den studerende have opnået følgende: Viden om Teori og metoder/algoritmer, der anvendes indenfor 3 dimensional grafik. Algoritmer til klipning af linjer og polygoner. Algoritmer til fjernelse af skjulte flader. Algoritmer til visualisering af parametriske kurver. Færdigheder i at Forklare og implementere geometriske transformationer i 3 dimensioner. Forklare og implementere projektioner fra 3 dimensioner til 2 dimensioner Forklare og implementere skankonvertering af linjer. Forklare og implementere skankonvertering af polygoner. Forklare og implementere simple lysmodeller, som benyttes i 3D grafik. Forklare og implementere algoritmer til visualisering af polygongitre. Forklare og implementere visualisering af parametriske flader. Kompetencer til at Implementere et simpelt 3D grafiksystem, der kan visualisere parametriske flader med lyslægning og fjernelse af skjulte flader. Udfærdige delrapporter over eget arbejde, f.eks. gennem løsning af ugeopgaver.","Se Absalon, når kurset er blevet oprettet.","Programmering og Problemløsning (PoP) og Lineær algebra (LinAlg)/Lineær algebra i datalogi (LinAlgDat) eller tilsvarende kurser. Det vil være en fordel at have arbejdet med objektorienteret programmering i et sprog såsom C++. Det forventes, at de studerende på egen hånd kan anvende diverse krydsplatformsværktøjer såsom cmake samt installere open-source software såsom glew, glwf med mere.",Forelæsninger samt praktiske og teoretiske øvelser.,"{'Forelæsninger': 30, 'Forberedelse (anslået)': 82, 'Teoretiske øvelser': 14, 'Praktiske øvelser': 80, 'I alt': 206}",Skriftlig Mundtlig Individuel Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Løbende bedømmelse</div></dd><dt>Prøveformsdetaljer</dt><dd>Gennem kurset afleveres der 4-6 skriftlige ugeopgaver.
Opgaverne afleveres i Absalon. Den endelige karakter er baseret på
en samlet vurdering af de afleverede opgaver.</dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt 
<div><p>Det er tilladt at anvende Large Language Models (LLM)/Large
Multimodal Models (LMM) – fx ChatGPT og GPT-4.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere.</div></dd><dt>Reeksamen</dt><dd><p>Mundtlig eksamen uden forberedelse (30 min.) i fuldt
pensum.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 17-04-2024
https://kurser.ku.dk/course/ndab10003u/2025-2026,NDAB10003U Introduktion til computergrafik (Grafik),Årgang 2025/2026,,"Kurset sigter mod at give en indføring i 3-dimensionel grafisk databehandling samt billedsyntese. Det tilstræbes, at undervisningen tilrettelægges således, at praktiske færdigheder inden for programmering af 3-dimensionelle grafiske systemer indøves gennem løsning af skriftlige ugeopgaver. Indhold : Indføring i grafisk databehandling bestående af: skankonvertering af primitiver, geometriske transformationer, projektioner fra 3 til 2 dimensioner, repræsentation og visualisering af 3-dimensionelle kurver og flader, lys- og refleksionsmodeller samt centrale algoritmer i visualiseringsprocessen.","Ved kursets afslutning skal den studerende have opnået følgende: Viden om Teori og metoder/algoritmer, der anvendes indenfor 3 dimensional grafik. Algoritmer til klipning af linjer og polygoner. Algoritmer til fjernelse af skjulte flader. Algoritmer til visualisering af parametriske kurver. Færdigheder i at Forklare og implementere geometriske transformationer i 3 dimensioner. Forklare og implementere projektioner fra 3 dimensioner til 2 dimensioner Forklare og implementere skankonvertering af linjer. Forklare og implementere skankonvertering af polygoner. Forklare og implementere simple lysmodeller, som benyttes i 3D grafik. Forklare og implementere algoritmer til visualisering af polygongitre. Forklare og implementere visualisering af parametriske flader. Kompetencer til at Implementere et simpelt 3D grafiksystem, der kan visualisere parametriske flader med lyslægning og fjernelse af skjulte flader. Udfærdige delrapporter over eget arbejde, f.eks. gennem løsning af ugeopgaver.","Se Absalon, når kurset er blevet oprettet.","Programmering og Problemløsning (PoP) og Lineær algebra (LinAlg)/Lineær algebra i datalogi (LinAlgDat) eller tilsvarende kurser. Det vil være en fordel at have arbejdet med objektorienteret programmering i et sprog såsom C++. Det forventes, at de studerende på egen hånd kan anvende diverse krydsplatformsværktøjer såsom cmake samt installere open-source software såsom glew, glwf med mere.",Forelæsninger samt praktiske og teoretiske øvelser.,"{'Forelæsninger': 30, 'Forberedelse (anslået)': 82, 'Teoretiske øvelser': 14, 'Praktiske øvelser': 80, 'I alt': 206}",Skriftlig Mundtlig Individuel Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Løbende bedømmelse</div></dd><dt>Prøveformsdetaljer</dt><dd>Gennem kurset afleveres der 4-6 skriftlige ugeopgaver.
Opgaverne afleveres i Absalon. Den endelige karakter er baseret på
en samlet vurdering af de afleverede opgaver.</dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt</dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere.</div></dd><dt>Reeksamen</dt><dd><p>Mundtlig eksamen uden forberedelse (30 min.) i fuldt
pensum.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 24-02-2025
https://kurser.ku.dk/course/ndaa09030u/2025-2026,NDAA09030U It-projektledelse (ITP),Årgang 2025/2026,Bacheloruddannelsen i sundhed og informatik,"Kurset giver en indføring i centrale udfordringer, begreber og metoder, som er vigtige i arbejdet med styring og realisering af større it-baserede projekter i almindeligt forekommende organisatoriske sammenhænge. Kurset har fokus på, hvordan den organisation, der skal have et it-system indført, sikrer sig at få de ønskede forretningsmæssige gevinster heraf - med et styret omkostnings- og risikoniveau. I kurset behandles emner som ideudvikling, foranalyse, udarbejdelse af business case, estimering, interessentanalyse, kvalitetsstyring, risikostyring, kravfastlæggelse, kontraktindgåelse, leverandørstyring og beslutningsprocesser i it-baserede projekter. Der gives også eksempler på vigtige typer af systemudviklingsmetoder, både strukturerede og agile udviklingsmetoder. Endelig er der fokus på den organisatoriske implementering, herunder fastlæggelse af nye arbejdsgange, medarbejderinddragelse, uddannelse mv. Kurset tager ikke fat om, eller udgangspunkt i, særlige it-tekniske emner, men har fokus på, hvordan der sikres en forretningsmæssig gevinst for anvenderne af systemet.","Den studerende skal efter kurset have opnået følgende: Viden En grundlæggende viden om de centrale udfordringer, begreber og metoder indenfor it-projektledelse, set fra anvenderorganisationens side. En forståelse af samspillet mellem den tekniske og den organisatoriske implementering af et it-projekt. Færdigheder Evnen til at analysere og diskutere projektledelsesproblemstillinger og handlemuligheder i it-projekter i forbindelse med vigtige typer af systemudviklingsmetoder og gængse udfordringer. Evnen til at gennemføre en systematisk analyse af et forelagt it-projektforløb og herigennem redegøre for projektets projektledelsesmæssige situation (status, stærke og svage sider, risici og handlingsmuligheder). Kompetencer Evnen til at planlægge og styre et mindre it-projekt på en måde, så der løbende sker en systematisk styring af realiseringen af forretningsmæssig nytteværdi i forhold til omkostninger, tidsforbrug og risikoniveau.","Se Absalon, når kurset er oprettet.",,"Forelæsninger, gæsteforelæsninger, hjemmeopgaver og øvelser. Kurset afholdes som blended learning: Forelæsningerne er on-line, øvelserne er med fysisk tilstedeværelse.","{'Forelæsninger': 14, 'Forberedelse (anslået)': 151, 'Praktiske øvelser': 21, 'Eksamen': 20, 'I alt': 206}",Skriftlig Individuel Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig aflevering, 5 dage</div></dd><dt>Prøveformsdetaljer</dt><dd>Omfanget af eksamensbesvarelsen er max 15 sider.
<br/><br/>
Eksamensbesvarelsens afsnit skal indeholde specifikke henvisninger
til kilder (pensum og øvrig litteratur), der er troværdige og lever
op til god akademisk kildepraksis.</dd><dt>Eksamensforudsætninger</dt><dd><p>Det er en forudsætning for at kunne gå til eksamen, at et antal
ugeopgaver svarende til én mindre end antallet af stillede
ugeopgaver er godkendt.</p><p>Der stilles 4-6 ugeopgaver. Af den
enkelte ugeopgave vil det fremgå, om det er et krav, at den
skal afleveres individuelt, eller om den kan afleveres i
grupper, samt hvor mange studerende, der kan indgå i en
gruppe.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt undtagen Generativ AI</dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Som ordinær eksamen.</p><p>Hvis den studerende ikke er kvalificeret til den ordinære
eksamen kan kvalifikation opnås ved aflevering og godkendelse af
tilsvarende opgaver. Indstillingskravet skal være opfyldt
senest to uger inden reeksamen.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen</p></div></div>",,,,,,,,,,,,,Gemt den 12-05-2025
https://kurser.ku.dk/course/ndab23002u/2025-2026,NDAB23002U Introduktion til diskret matematik og algoritmer (IDMA),Årgang 2025/2026,Bacheloruddannelsen i bioinformatik Bacheloruddannelsen i datalogi-økonomi Bacheloruddannelsen i machine learning og datavidenskab Bacheloruddannelsen i kognitions- og datavidenskab,"Kurset giver en introduktion til diskret matematik, algoritmer og datastrukturer. Fokus er på matematisk metode og matematiske værktøjer, som bruges i løsningen af datalogiske problemstillinger. Emner der dækkes inkluderer logik, grafteori, elementær talteori og tælleproblemer, mængder og relationer, samt funktioner.","Viden om grundlæggende matematisk metode logik, elementær talteori og tælleproblemer mængder, relationer, og funktioner asymptotisk tids- og pladskompleksitet basale datastrukturer (herunder lister, stakke, køer, binære søgetræer) og operationer på disse grafer og træer og relaterede algoritmer Færdigheder i at formulere simple matematiske argumenter og beviser, samt identificere relevante matematiske værktøjer blandt kursets emner til løsning af datalogiske problemstillinger at analysere kombinatoriske problemstillinger såvel ved brug af tælleargumenter som algebraiske operationer at bestemme køretid herunder gøre brug af asymptotisk notation til at angive størrelsesordenen af en funktion at analysere fordele og ulemper ved udvalgte algoritmer og datastrukturer Kompetencer til selvstændigt at løse problemer inden for udvalgte videnspunkter fra listen ovenfor at udvælge metoder og teoridele til løsning af problemer inden for kursets vidensområde, herunder specielt udføre formelle logiske operationer på matematiske udsagn",Offentliggøres på kursets Absalon-side ved kursusstart.,"Kompetencer svarende til kurserne ""Programmering og problemløsning"" samt MatIntroNat/MatIntroKem.","Kurset vil blande forelæsninger, klasseundervisning, gruppeøvelser og individuelle opgaver.","{'Forelæsninger': 27, 'Forberedelse (anslået)': 107, 'Øvelser': 43, 'Eksamensforberedelse': 25, 'Eksamen': 4, 'I alt': 206}",Skriftlig Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig stedprøve, 4 timer med opsyn.</div></dd><dt>Eksamensforudsætninger</dt><dd><p>Det er en forudsætning for at kunne gå til eksamen, at den
studerende har fået godkendt de 4-6 obligatoriske opgaver
(individuelle opgaver). Aflevering sker i Absalon.</p></dd><dt>Hjælpemidler</dt><dd>Skriftlige hjælpemidler tilladt 
<div><p>Udskrifter (fx af løsninger til gamle eksamener) er ikke tilladt
mens håndskrevne noter og lærebøger er tilladt.</p><p>Skriftlige hjælpemidler inkluderer ikke e-bøger og
internetadgang.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere</div></dd><dt>Reeksamen</dt><dd><p>Mundtlig eksamen uden forberedelse i fuldt pensum. 30 minutter
inklusive votering. Udskrifter (fx af løsninger til gamle
eksamener) er ikke tilladt mens håndskrevne noter og lærebøger er
tilladt.</p><p>Hvis den studerende ikke er kvalificeret til ordinær eksamen kan
kvalifikation til reeksamen opnås ved aflevering og godkendelse af
ekstra opgaver der vil erstatte de obligatoriske opgaver.
Aflevering sker i Absalon senest 3 uger før
reeksamen.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen</p></div></div>",,,,,,,,,,,,,Gemt den 24-02-2025
https://kurser.ku.dk/course/ndab23002u/2024-2025,NDAB23002U Introduktion til diskret matematik og algoritmer (IDMA),Årgang 2024/2025,Bacheloruddannelsen i bioinformatik Bacheloruddannelsen i datalogi-økonomi Bacheloruddannelsen i machine learning og datavidenskab Bacheloruddannelsen i kognitions- og datavidenskab,"Kurset giver en introduktion til diskret matematik, algoritmer og datastrukturer. Fokus er på matematisk metode og matematiske værktøjer, som bruges i løsningen af datalogiske problemstillinger. Emner der dækkes inkluderer logik, grafteori, elementær talteori og tælleproblemer, mængder og relationer, samt funktioner.","Viden om grundlæggende matematisk metode logik, elementær talteori og tælleproblemer mængder, relationer, og funktioner asymptotisk tids- og pladskompleksitet basale datastrukturer (herunder lister, stakke, køer, binære søgetræer) og operationer på disse grafer og træer og relaterede algoritmer Færdigheder i at formulere simple matematiske argumenter og beviser, samt identificere relevante matematiske værktøjer blandt kursets emner til løsning af datalogiske problemstillinger at analysere kombinatoriske problemstillinger såvel ved brug af tælleargumenter som algebraiske operationer at bestemme køretid herunder gøre brug af asymptotisk notation til at angive størrelsesordenen af en funktion at analysere fordele og ulemper ved udvalgte algoritmer og datastrukturer Kompetencer til selvstændigt at løse problemer inden for udvalgte videnspunkter fra listen ovenfor at udvælge metoder og teoridele til løsning af problemer inden for kursets vidensområde, herunder specielt udføre formelle logiske operationer på matematiske udsagn",Offentliggøres på kursets Absalon-side ved kursusstart.,"Kompetencer svarende til kurserne ""Programmering og problemløsning"" samt MatIntroNat/MatIntroKem.","Kurset vil blande forelæsninger, klasseundervisning, gruppeøvelser og individuelle opgaver.","{'Forelæsninger': 27, 'Forberedelse (anslået)': 107, 'Øvelser': 43, 'Eksamensforberedelse': 25, 'Eksamen': 4, 'I alt': 206}",Skriftlig Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig stedprøve, 4 timer med opsyn.</div></dd><dt>Krav til indstilling til eksamen</dt><dd><p>Det er en forudsætning for at kunne gå til eksamen, at den
studerende har fået godkendt de 4-6 obligatoriske opgaver
(individuelle opgaver). Aflevering sker i Absalon.</p></dd><dt>Hjælpemidler</dt><dd>Skriftlige hjælpemidler tilladt 
<div><p>Udskrifter (fx af løsninger til gamle eksamener) er ikke tilladt
mens håndskrevne noter og lærebøger er tilladt.</p><p>Skriftlige hjælpemidler inkluderer ikke e-bøger og
internetadgang.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere</div></dd><dt>Reeksamen</dt><dd><p>Mundtlig eksamen uden forberedelse i fuldt pensum. 30 minutter
inklusive votering. Udskrifter (fx af løsninger til gamle
eksamener) er ikke tilladt mens håndskrevne noter og lærebøger er
tilladt.</p><p>Hvis den studerende ikke er kvalificeret til ordinær eksamen kan
kvalifikation til reeksamen opnås ved aflevering og godkendelse af
ekstra opgaver der vil erstatte de obligatoriske opgaver.
Aflevering sker i Absalon senest 3 uger før
reeksamen.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen</p></div></div>",,,,,,,,,,,,,Gemt den 06-03-2024
https://kurser.ku.dk/course/ndaa09025u/2025-2026,NDAA09025U It-sikkerhed (ITS),Årgang 2025/2026,Bacheloruddannelsen i datalogi,"Dette kursus har til formål, at give en introduktion til basale begreber inden for it-sikkerhed, som giver en helhedsforståelse af it-sikkerhed og sikkerhedsprocessen. Kurset omhandler principper inden for computer- og netværkssikkerhed, og vi vil diskutere forskellige angrebsteknikker, og hvordan man kan imødegå dem. Kurset introducerer bl.a. sikkerhedsanalyse, analyse af trusselsaktør, usikker software, sårbarheder i web-applikationer, netværksangreb og -forsvar, adgangskontrol og operativsystemsikkerhed, kryptografi, ondsindet programmel, social engineering angreb, privatlivsbekymringer samt juridiske og ledelsesmæssige aspekter ved it-sikkerhed. Kursusprojekter vil fokusere på sikkerhedsanalyse, at bygge sikker kode og analysere angreb.","Efter kursusafslutning vil den studerende have opnået Viden om De vigtigste problemstillinger, der skal adresseres i en sikkerhedsanalyse af et givent system. Mulige foranstaltninger mod de normale trusler, sårbarheder og risici i et givent sikkerhedssystem. Værktøjer og metoder til sikkerhedsanalyse. Væsentlige teknologier indenfor it-sikkerhed og herunder kryptografiske teknikker og protokoller. Færdigheder i at Dokumentere deres arbejde med sikkerhedsprocessen i en velskrevet og koncis rapport. Analysere og diskutere de nødvendige sikkerhedsmekanismer i et givent sikkerhedssystem. Foretage en (ikke formel) evaluering af en samling af sikkerhedspolitikker og -mekanismer med henblik på at afgøre, om de tilfredsstiller en given liste af sikkerhedsmål. Definere operationelle sikkerhedsmål for et givent system. Kompetencer i at Analysere en systemanvendelse og identifikation af normale trusler, sårbarheder og risici. Implementere (dele af) et sikkerhedssystem.",Se Absalon.,"Kurset bygger på viden opnået gennem kurserne Computersystemer eller High Performance programmering og systemer (HPPS), såsom systemprogrammering (herunder viden om organisering af hob og kaldstak), lagerhierarkier, opbygning af filsystemer, datanetværk (herunder viden om de enkelte dele af de lagdelte protokolstrukturere samt mekanismer for pålidelig datatransmission) og basal kryptering. Særligt for betalende deltidsstuderende og studerende på datalogis gymnasierettede specialisering: Manglende forudsætninger kan udbedres løbende under kurset, hvis du er villig til at gøre en ekstra indsats. Hvis du er i tvivl om dine manglende forudsætninger kan opnås sideløbende eller op til kursusstart vil vi opfordre dig til at kontakte den kursusansvarlige.",Ugentlige forelæsninger og praktiske øvelser.,"{'Forelæsninger': 28, 'Forberedelse (anslået)': 93, 'Teoretiske øvelser': 60, 'Praktiske øvelser': 21, 'Eksamen': 4, 'I alt': 206}",Skriftlig Individuel Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig stedprøve, 4 timer med opsyn.</div></dd><dt>Prøveformsdetaljer</dt><dd>Den skriftlige opgave kan indeholde sand/falsk, multiple-choice
og tekstuelle spørgsmål samt spørgsmål af teknisk karakter. Dog
ikke større programmeringsopgaver. Opgaven vil være opdelt i
underemner, som dækker dele eller hele kursets pensum, men
bedømmelsen vil ske på grundlag af en samlet vurdering af hele
besvarelsen.</dd><dt>Eksamensforudsætninger</dt><dd><p>Der stilles 5-7 opgaver i løbet af kurset, hvoraf alle undtagen
én skal godkendes for at deltage i eksamen.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt undtagen Generativ AI og
internetadgang</dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere</div></dd><dt>Reeksamen</dt><dd><p>Mundtlig eksamen uden forberedelse (ca. af 30 min. varighed
inkl. votering) i hele kursets pensum.</p><p>Det er et krav for at deltage i reeksamen, at indstillingskravet
til ordinær eksamen er opnået. Indstillingskravet skal være
opfyldt senest tre uger inden reeksamen.</p><p> </p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>For at opnå karakteren 12, skal den studerende overbevisende og
præcist kunne demonstrere viden, færdigheder og kompetencer som
beskrevet under målbeskrivelsen.</p><p> </p><p> </p><p> </p></div></div>",,,,,,,,,,,,,Gemt den 24-02-2025
https://kurser.ku.dk/course/ndaa09025u/2024-2025,NDAA09025U It-sikkerhed (ITS),Årgang 2024/2025,Bacheloruddannelsen i datalogi,"Dette kursus har til formål, at give en introduktion til basale begreber inden for it-sikkerhed, som giver en helhedsforståelse af it-sikkerhed og sikkerhedsprocessen. Kurset omhandler principper inden for computer- og netværkssikkerhed, og vi vil diskutere forskellige angrebsteknikker, og hvordan man kan imødegå dem. Kurset introducerer bl.a. sikkerhedsanalyse, analyse af trusselsaktør, usikker software, sårbarheder i web-applikationer, netværksangreb og -forsvar, adgangskontrol og operativsystemsikkerhed, kryptografi, ondsindet programmel, social engineering angreb, privatlivsbekymringer samt juridiske og ledelsesmæssige aspekter ved it-sikkerhed. Kursusprojekter vil fokusere på sikkerhedsanalyse, at bygge sikker kode og analysere angreb.","Efter kursusafslutning vil den studerende have opnået Viden om De vigtigste problemstillinger, der skal adresseres i en sikkerhedsanalyse af et givent system. Mulige foranstaltninger mod de normale trusler, sårbarheder og risici i et givent sikkerhedssystem. Værktøjer og metoder til sikkerhedsanalyse. Væsentlige teknologier indenfor it-sikkerhed og herunder kryptografiske teknikker og protokoller. Færdigheder i at Dokumentere deres arbejde med sikkerhedsprocessen i en velskrevet og koncis rapport. Analysere og diskutere de nødvendige sikkerhedsmekanismer i et givent sikkerhedssystem. Foretage en (ikke formel) evaluering af en samling af sikkerhedspolitikker og -mekanismer med henblik på at afgøre, om de tilfredsstiller en given liste af sikkerhedsmål. Definere operationelle sikkerhedsmål for et givent system. Kompetencer i at Analysere en systemanvendelse og identifikation af normale trusler, sårbarheder og risici. Implementere (dele af) et sikkerhedssystem.",Se Absalon.,"Kurset bygger på viden opnået gennem kurserne Computersystemer eller High Performance programmering og systemer (HPPS), såsom systemprogrammering (herunder viden om organisering af hob og kaldstak), lagerhierarkier, opbygning af filsystemer, datanetværk (herunder viden om de enkelte dele af de lagdelte protokolstrukturere samt mekanismer for pålidelig datatransmission) og basal kryptering. Særligt for betalende deltidsstuderende og studerende på datalogis gymnasierettede specialisering: Manglende forudsætninger kan udbedres løbende under kurset, hvis du er villig til at gøre en ekstra indsats. Hvis du er i tvivl om dine manglende forudsætninger kan opnås sideløbende eller op til kursusstart vil vi opfordre dig til at kontakte den kursusansvarlige.",Ugentlige forelæsninger og praktiske øvelser.,"{'Forelæsninger': 28, 'Forberedelse (anslået)': 93, 'Teoretiske øvelser': 60, 'Praktiske øvelser': 21, 'Eksamen': 4, 'I alt': 206}",Skriftlig Individuel Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig stedprøve, 4 timer med opsyn.</div></dd><dt>Prøveformsdetaljer</dt><dd>Den skriftlige opgave kan indeholde sand/falsk, multiple-choice
og tekstuelle spørgsmål samt spørgsmål af teknisk karakter. Dog
ikke større programmeringsopgaver. Opgaven vil være opdelt i
underemner, som dækker dele eller hele kursets pensum, men
bedømmelsen vil ske på grundlag af en samlet vurdering af hele
besvarelsen.</dd><dt>Krav til indstilling til eksamen</dt><dd><p>Der stilles 5-7 opgaver i løbet af kurset, hvoraf alle undtagen
én skal godkendes for at deltage i eksamen.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt</dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere</div></dd><dt>Reeksamen</dt><dd><p>Mundtlig eksamen uden forberedelse (ca. af 30 min. varighed
inkl. votering) i hele kursets pensum.</p><p>Det er et krav for at deltage i reeksamen, at indstillingskravet
til ordinær eksamen er opnået. Indstillingskravet skal være
opfyldt senest tre uger inden reeksamen.</p><p> </p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>For at opnå karakteren 12, skal den studerende overbevisende og
præcist kunne demonstrere viden, færdigheder og kompetencer som
beskrevet under målbeskrivelsen.</p><p> </p><p> </p><p> </p></div></div>",,,,,,,,,,,,,Gemt den 11-04-2024
https://kurser.ku.dk/course/ndaa09030u/2024-2025,NDAA09030U It-projektledelse (ITP),Årgang 2024/2025,Bacheloruddannelsen i sundhed og informatik,"Kurset giver en indføring i centrale udfordringer, begreber og metoder, som er vigtige i arbejdet med styring og realisering af større it-baserede projekter i almindeligt forekommende organisatoriske sammenhænge. Kurset har fokus på, hvordan den organisation, der skal have et it-system indført, sikrer sig at få de ønskede forretningsmæssige gevinster heraf - med et styret omkostnings- og risikoniveau. I kurset behandles emner som ideudvikling, foranalyse, udarbejdelse af business case, estimering, interessentanalyse, kvalitetsstyring, risikostyring, kravfastlæggelse, kontraktindgåelse, leverandørstyring og beslutningsprocesser i it-baserede projekter. Der gives også eksempler på vigtige typer af systemudviklingsmetoder, både strukturerede og agile udviklingsmetoder. Endelig er der fokus på den organisatoriske implementering, herunder fastlæggelse af nye arbejdsgange, medarbejderinddragelse, uddannelse mv. Kurset tager ikke fat om, eller udgangspunkt i, særlige it-tekniske emner, men har fokus på, hvordan der sikres en forretningsmæssig gevinst for anvenderne af systemet.","Den studerende skal efter kurset have opnået følgende: Viden En grundlæggende viden om de centrale udfordringer, begreber og metoder indenfor it-projektledelse, set fra anvenderorganisationens side. En forståelse af samspillet mellem den tekniske og den organisatoriske implementering af et it-projekt. Færdigheder Evnen til at analysere og diskutere projektledelsesproblemstillinger og handlemuligheder i it-projekter i forbindelse med vigtige typer af systemudviklingsmetoder og gængse udfordringer. Evnen til at gennemføre en systematisk analyse af et forelagt it-projektforløb og herigennem redegøre for projektets projektledelsesmæssige situation (status, stærke og svage sider, risici og handlingsmuligheder). Kompetencer Evnen til at planlægge og styre et mindre it-projekt på en måde, så der løbende sker en systematisk styring af realiseringen af forretningsmæssig nytteværdi i forhold til omkostninger, tidsforbrug og risikoniveau.","Se Absalon, når kurset er oprettet.",,"Forelæsninger, gæsteforelæsninger, hjemmeopgaver og øvelser. Kurset afholdes som blended learning: Forelæsningerne er on-line, øvelserne er med fysisk tilstedeværelse.","{'Forelæsninger': 14, 'Forberedelse (anslået)': 151, 'Praktiske øvelser': 21, 'Eksamen': 20, 'I alt': 206}",Skriftlig Individuel Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig aflevering, 5 dage</div></dd><dt>Prøveformsdetaljer</dt><dd>Omfanget af eksamensbesvarelsen er max 15 sider.
<br/><br/>
Eksamensbesvarelsens afsnit skal indeholde specifikke henvisninger
til kilder (pensum og øvrig litteratur), der er troværdige og lever
op til god akademisk kildepraksis.</dd><dt>Krav til indstilling til eksamen</dt><dd><p>Det er en forudsætning for at kunne gå til eksamen, at et antal
ugeopgaver svarende til én mindre end antallet af stillede
ugeopgaver er godkendt.</p><p>Der stilles 4-6 ugeopgaver. Af den
enkelte ugeopgave vil det fremgå, om det er et krav, at den
skal afleveres individuelt, eller om den kan afleveres i
grupper, samt hvor mange studerende, der kan indgå i en
gruppe.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt</dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Som ordinær eksamen.</p><p>Hvis den studerende ikke er kvalificeret til den ordinære
eksamen kan kvalifikation opnås ved aflevering og godkendelse af
tilsvarende opgaver. Indstillingskravet skal være opfyldt
senest to uger inden reeksamen.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen</p></div></div>",,,,,,,,,,,,,Gemt den 15-02-2024
https://kurser.ku.dk/course/nmab15002u/2025-2026,NMAB15002U Lineær algebra i datalogi (LinAlgDat),Årgang 2025/2026,Bacheloruddannelsen i bioinformatik Bacheloruddannelsen i datalogi Bacheloruddannelsen i datalogi-økonomi Bacheloruddannelsen i machine learning og datavidenskab Bacheloruddannelsen i kognition og datavidenskab,"Lineær algebra med fokus på ligningsløsning, Gauss-elimination, matrixregning, baser for vektorrum, ortogonalitet, determinant, egenværdier, komplekse tal og diagonalisering. Anvendelsesmuligheder i datalogi fremhæves løbende. Implementering af diverse algoritmer og metoder i F# eller Python. Projekter der skrives i LaTeX.","Viden: Kende de begreber og emner, som er omtalt under kursusindholdet. Færdigheder: Beherske fundamentale metoder og algoritmer i lineær algebra: Matrixmanipulation inkl. inversion, Gauss-elimination, determinantbestemmelse, bestemmelse af egenværdier og egenvektorer; såvel uden hjælpemidler som ved at benytte computerstøttede beregninger. Benytte komplekse tal. Skrive matematik i LaTeX. Kompetencer: Fortolke resultaterne af de fundamentale metoder og algoritmer nævnt ovenfor. Identificere og løse almene lineære problemer vha. matricer. Konstruere baser (også ortogonale) og bestemme dimension. Afgøre diagonaliserbarhed. Udføre og udnytte basisskift.",,"""Diskret matematik og algoritmer (DMA)"" og ""Programmering og problemløsning (PoP)"".","Det ugentlige program består af: 5 timers forelæsning, 4 timers øvelser, og 2 timers regn-selv øvelser med tilgang til hjælp fra studenterinstruktorer. Der er 7 ugers undervisning.","{'Forelæsninger': 35, 'Forberedelse (anslået)': 125, 'Teoretiske øvelser': 42, 'Eksamen': 4, 'I alt': 206}",Individuel Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig stedprøve, 4 timer med opsyn.</div></dd><dt>Prøveformsdetaljer</dt><dd>Skriftlig ITX-prøve på 4 timer som tæller 100% af
karakteren.</dd><dt>Eksamensforudsætninger</dt><dd><p>I løbet af kurset afleveres gruppevist 3 projekter, hvoraf
mindst 2 skal godkendes for at gå til eksamen. </p><p>Generative Artificial Intelligence / Large Language Models er
IKKE tilladt ifm. projekterne.</p></dd><dt>Hjælpemidler</dt><dd>Kun visse hjælpemidler tilladt (se beskrivelse nedenfor) 
<div><p>Ved ITX-eksamen er der adgang til den lommeregner der er
indbygget i ITX-computeren + skriftlige hjælpemidler.</p><p>Bøger, noter og lignende kan medbringes i papirform eller
uploades før eksamen og tilgås digitalt fra ITX-computeren.</p><p>Læs mere om dette på Studieinformation.​</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Én intern bedømmer</div></dd><dt>Reeksamen</dt><dd><p>Mundtlig prøve på ca. 30 minutter uden forberedelsestid. Tre
uger inden reeksamen oplyses en række eksamensspørgsmål, der
vedrører pensum. Den studerende trækker tilfældigt et af disse, og
gennemgår det i ca. første halvdel af eksaminationstiden. I den
resterende del af eksaminationstiden vil den studerende blive
eksamineret i andre dele af pensum, og evt. blive bedt om at løse
nogle mindre opgaver, som ikke oplyses på forhånd.</p><p>Hvis indstillingskravet ikke blev opfyldt i det ordinære
kursusforløb, kan projekterne genafleveres til godkendelse i
revideret form, senest tre uger før første dag i
reeksamensperioden.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>De studerende skal demonstrere, at de har erhvervet sig en
tilfredsstillende del af kursets
målbeskrivelser.</p></div></div>",,,,,,,,,,,,,Gemt den 24-02-2025
https://kurser.ku.dk/course/ndab16011u/2024-2025,NDAB16011U Logic in Computer Science (LICS),Volume 2024/2025,,"The aim of this course is to provide a firm theoretical foundation of formal logic, with an emphasis on logics, properties, techniques and algorithms relevant in computer science. Building on the students' existing knowledge of Boolean logic and mathematical reasoning, the course includes both fundamental logic formalisms and more specialized logics used in modelling, specification, and verification of programs and hardware systems. The course covers introductions to propositional logic, predicate logic, temporal logics LTL and CTL, model checking, binary decision diagrams, and formalised proving using a proof assistant. Note that while some applications of logic will be covered in some detail during the course, the focus of the course is primarily on the theoretical foundations of logic in computer science rather than its concrete applications.","At course completion, the successful student will have Knowledge of Defining logics in terms of syntax, semantics and natural deduction systems, and formal reasoning about logical formulas. A selection of specific logics, including propositional logic, predicate logic and temporal logic (e.g. LTL and CTL). Fundamental properties of these logics, such as soundness, completeness and decidability. Algorithms for transforming logical formulas to normal forms; for deciding fundamental properties of logical formulas such as satisfiability, validity, and entailment; and (symbolic) model checking by binary decision diagrams (BDDs). Skills in Deciding and proving formal properties of logical formulas (e.g. satisfiability, validity, implication and equivalence) both by semantics and natural deduction arguments. Proving properties relating logical inference systems and semantics, specifically soundness or completeness. Applying specific algorithms for deciding properties of logical formulas: SAT solvers for propositional calculus; model checking LTL/CTL; using BDDs to represent Boolean functions and perform symbolic model checking. Performing any of the above in the context of variants of the presented logics. Competences to Use formal logic to describe real-world situations, express properties of programs and reason about them formally.","The syllabus will be posted in Absalon. In previous years the syllabus has included: ""Logic in Computer Science""; by Michael Huth and Mark Ryan. Latest edition. Supplementary notes.","Discrete mathematics and algorithms (DMA) or Discrete mathematics (DIS) or Discrete mathematics for first-year students (DisRus) or similar courses covering basic arithmetic, sets, relations, functions, big-O-notation, graphs, basic proofs by induction, mathematical reasoning by deductive arguments. Problem solving and programming (PoP) or equivalent: Functions, recursion, lists, user-defined data types.",2 lectures of 2 hours each and 1 exercise/discussion session of 4 hours per week; obligatory written exercises.,"{'Lectures': 28, 'Preparation': 146, 'Theory exercises': 28, 'Exam': 4, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>On-site written exam, 4 hours under invigilation</div></dd><dt>Type of assessment details</dt><dd>The on-site written exam is an ITX exam.
<br/>
See important information about ITX-exams at Study Information,
menu point: Exams -&gt; Exam types and rules -&gt; Written on-site
exams (ITX)</dd><dt>Exam registration requirements</dt><dd><p>There will be 6 weekly assignments during the course,
graded on a scale from 0 to 2 points: at least 10 points are
required to be qualified for the exam.</p><p>Unsatisfactorily or partially satisfactorily assignments
can be resubmitted once except for the last assignment, where no
resubmission is possible.</p></dd><dt>Aid</dt><dd>Written aids allowed 
<div><p> </p><p>Books, notes, and similar materials can be brought in paper form
or uploaded before the exam and accessed digitally from the ITX
computer. Read more about this at Study Information.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as ordinary exam. </p><p>Qualification for the re-exam requires 10 points or more from
assignments, including previous solutions already handed in prior
to the ordinary exam. These must be handed in no
later than 3 weeks before the re-exam week.</p><p><em>If less than 10 students register for the re-exam, the
re-exam will be a 30 minutes oral exam (including grading)
after preparation (60 minutes) with written aids only (no
electronic aids).</em></p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAB16011U,"7,5 ECTS",Bachelor,1 block,Block 2,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Robert Glück (6-787d8676747c51757a3f7c863f757c)'],Saved on the 07-05-2024
https://kurser.ku.dk/course/nmab15002u/2024-2025,NMAB15002U Lineær algebra i datalogi (LinAlgDat),Årgang 2024/2025,Bacheloruddannelsen i bioinformatik Bacheloruddannelsen i datalogi Bacheloruddannelsen i datalogi-økonomi Bacheloruddannelsen i machine learning og datavidenskab Bacheloruddannelsen i kognition og datavidenskab,"Lineær algebra med fokus på ligningsløsning, Gauss-elimination, matrixregning, baser for vektorrum, ortogonalitet, determinant, egenværdier, komplekse tal og diagonalisering. Anvendelsesmuligheder i datalogi fremhæves løbende. Implementering af diverse algoritmer og metoder i F# eller Python. Projekter der skrives i LaTeX.","Viden: Kende de begreber og emner, som er omtalt under kursusindholdet. Færdigheder: Beherske fundamentale metoder og algoritmer i lineær algebra: Matrixmanipulation inkl. inversion, Gauss-elimination, determinantbestemmelse, bestemmelse af egenværdier og egenvektorer; såvel uden hjælpemidler som ved at benytte computerstøttede beregninger. Benytte komplekse tal. Skrive matematik i LaTeX. Kompetencer: Fortolke resultaterne af de fundamentale metoder og algoritmer nævnt ovenfor. Identificere og løse almene lineære problemer vha. matricer. Konstruere baser (også ortogonale) og bestemme dimension. Afgøre diagonaliserbarhed. Udføre og udnytte basisskift.",,"""Diskret matematik og algoritmer (DMA)"" og ""Programmering og problemløsning (PoP)"".","Det ugentlige program består af: 5 timers forelæsning, 4 timers øvelser, og 2 timers regn-selv øvelser med tilgang til hjælp fra studenterinstruktorer. Der er 7 ugers undervisning.","{'Forelæsninger': 35, 'Teoretiske øvelser': 42}",Individuel Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig stedprøve, 3 timer med opsyn.</div><div>Løbende bedømmelse</div></dd><dt>Prøveformsdetaljer</dt><dd>Der afleveres 3 projekter individuelt; disse tæller til sammen
50% af den endelige karakter. Hvert projekt tæller lige meget. Der
afholdes endvidere 1 individuel 3-timers skriftlig prøve under
opsyn; denne tæller de resterende 50% af den endelige karakter.
<br/><br/>
Den skriftlige stedprøve er en ITX-eksamen.
<br/>
Se vigtig information om ITX-stedprøver på Studieinformation under
punktet: Eksamen -&gt; Eksamensform og regler -&gt; Skriftlig
stedprøve (ITX-prøve)</dd><dt>Hjælpemidler</dt><dd>Kun visse hjælpemidler tilladt 
<div><p>Projekter: Alle hjælpemidler</p><p>ITX-eksamen: Den lommeregner der er indbygget i ITX-computeren +
skriftlige hjælpemidler.
<br/>
Bøger, noter og lignende kan medbringes i papirform eller uploades
før eksamen og tilgås digitalt fra ITX-computeren. Læs mere om
dette på Studieinformation.​</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>En intern bedømmer.</div></dd><dt>Reeksamen</dt><dd><p>Mundtlig prøve på ca. 30 minutter uden forberedelsestid. Tre
uger inden reeksamen oplyses en række eksamensspørgsmål, der
vedrører pensum. Den studerende trækker tilfældigt et af disse, og
gennemgår det i ca. første halvdel af eksaminationstiden. I den
resterende del af eksaminationstiden vil den studerende blive
eksamineret i andre dele af pensum, og evt. blive bedt om at løse
nogle mindre opgaver, som ikke oplyses på forhånd. Hvis den
studerende deltager i reeksamen, så tæller denne 100% af
karakteren.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>De studerende skal demonstrere, at de har erhvervet sig en
tilfredsstillende del af kursets
målbeskrivelser.</p></div></div>",,,,,,,,,,,,,Gemt den 06-11-2024
https://kurser.ku.dk/course/ndab16011u/2025-2026,NDAB16011U Logic in Computer Science (LICS),Volume 2025/2026,,"The aim of this course is to provide a firm theoretical foundation of formal logic, with an emphasis on logics, properties, techniques and algorithms relevant in computer science. Building on the students' existing knowledge of Boolean logic and mathematical reasoning, the course includes both fundamental logic formalisms and more specialized logics used in modelling, specification, and verification of programs and hardware systems. The course covers introductions to propositional logic, predicate logic, temporal logics LTL and CTL, model checking, binary decision diagrams, and formalised proving using a proof assistant. Note that while some applications of logic will be covered in some detail during the course, the focus of the course is primarily on the theoretical foundations of logic in computer science rather than its concrete applications.","At course completion, the successful student will have Knowledge of Defining logics in terms of syntax, semantics and natural deduction systems, and formal reasoning about logical formulas. A selection of specific logics, including propositional logic, predicate logic and temporal logic (e.g. LTL and CTL). Fundamental properties of these logics, such as soundness, completeness and decidability. Algorithms for transforming logical formulas to normal forms; for deciding fundamental properties of logical formulas such as satisfiability, validity, and entailment; and (symbolic) model checking by binary decision diagrams (BDDs). Skills in Deciding and proving formal properties of logical formulas (e.g. satisfiability, validity, implication and equivalence) both by semantics and natural deduction arguments. Proving properties relating logical inference systems and semantics, specifically soundness or completeness. Applying specific algorithms for deciding properties of logical formulas: SAT solvers for propositional calculus; model checking LTL/CTL; using BDDs to represent Boolean functions and perform symbolic model checking. Performing any of the above in the context of variants of the presented logics. Competences to Use formal logic to describe real-world situations, express properties of programs and reason about them formally.","The syllabus will be posted in Absalon. In previous years the syllabus has included: ""Logic in Computer Science"" by Michael Huth and Mark Ryan, Cambridge University Press. Latest edition. Supplementary notes.","Discrete mathematics and algorithms (DMA) or Discrete mathematics (DIS) or Discrete mathematics for first-year students (DisRus) or similar courses covering basic arithmetic, sets, relations, functions, big-O-notation, graphs, basic proofs by induction, mathematical reasoning by deductive arguments. Problem solving and programming (PoP) or equivalent: Functions, recursion, lists, user-defined data types.",2 lectures of 2 hours each and 1 exercise/discussion session of 4 hours per week; obligatory written exercises.,"{'Lectures': 28, 'Preparation': 146, 'Theory exercises': 28, 'Exam': 4, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>On-site written exam, 4 hours under invigilation</div></dd><dt>Type of assessment details</dt><dd>The on-site written exam is an ITX exam.
<br/>
See important information about ITX-exams at Study Information,
menu point: Exams -&gt; Exam types and rules -&gt; Written on-site
exams (ITX)</dd><dt>Examination prerequisites</dt><dd><p>There will be 6 weekly assignments during the course,
graded on a scale from 0 to 2 points: at least 10 points are
required to be qualified for the exam.</p><p>Unsatisfactorily or partially satisfactorily assignments
can be resubmitted once except for the last assignment, where no
resubmission is possible.</p></dd><dt>Aid</dt><dd>Written aids allowed 
<div><p> </p><p>Books, notes, and similar materials can be brought in paper form
or uploaded before the exam and accessed digitally from the ITX
computer. Read more about this at Study Information.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as ordinary exam. </p><p>Qualification for the re-exam requires 10 points or more from
assignments, including previous solutions already handed in prior
to the ordinary exam. These must be handed in no
later than 3 weeks before the re-exam week.</p><p><em>If less than 10 students register for the re-exam, the
re-exam will be a 30 minutes oral exam (including grading)
after preparation (60 minutes) with written aids only (no
electronic aids).</em></p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAB16011U,"7,5 ECTS",Bachelor,1 block,Block 2,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Robert Glück (6-6a6f7868666e43676c316e7831676e)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak22000u/2024-2025,NDAK22000U Machine Learning A (MLA),Volume 2024/2025,BSc Programme in Bioinformatics BSc Programme in Cognitive Data Science BSc Programme in Machine Learning and Data Science BSc Programme in Computer Science (data science track) MSc Programme in Computer Science MSc Programme in Computer Science (part time) MSc Programme in Computer Science (with minor subject) MSc Programme in Actuarial Mathematics MSc Programme in Bioinformatics MSc Programme in Mathematics-Economics MSc Programme in Statistics,"The course introduces basic theory and algorithms of machine learning. The course covers the following tentative list of topics: Supervised learning setting Classification Regression Unsupervised learning setting Clustering Concentration of measure inequalities Markov's Chebyshev's Hoeffding's Analysis of generalization in classification Validation and cross-validation Generalisation bound for a single hypothesis Generalisation bound for a finite hypothesis class Occam's razor - generalisation bound for a countably infinite hypothesis class Algorithms K-Nearest Neighbors Perceptron Logistic Regression Linear Regression Feature transformations and classification/regression in transformed feature spaces Various forms of regularisation Regularization terms Dimensionality reduction Random Forests and Decision Trees Neural Networks and introduction to Deep Learning Principal Component Analysis (PCA) Clustering algorithms: k-means, k-means++ Assumptions behind the algorithms taught in the course, their implications, and common pitfalls Overfitting Internal overfitting within algorithms due to overly complex hypothesis spaces Extrenal overfitting outside algorithms due to application of an excessive number of algorithms to a dataset The i.i.d. assumption The i.i.d. assumption is behind everything taught in the course Consequences of violation of the i.i.d. assumption Special case: sampling bias Failure of generalisation guarantees Implications of the i.i.d. assumption Biases in the training data propagate into predictions Correlation ≠ Causality The course only studies statistical correlations / dependencies in the data. Causal inference is not covered in the course. WARNING: The course assumes solid math and programming skills. Please, check the ""Recommended Academic Qualifications"" box below and the self-assessment assignment. It is not advised taking the course if you do not meet the academic qualifications.","At course completion, the successful student will have: Knowledge of the basic principles of machine learning; basic probability theory for modelling and analysing data; the theoretical concepts underlying classification, regression, and clustering; the mathematical foundations of selected machine learning algorithms; basic assumptions behind the algorithms studied in the course, their implications and common pitfalls. Skills in proving generalisation bounds based on validation errors; proving generalisation bounds for countable hypothesis classes; applying linear and non-linear techniques for classification and regression; performing elementary dimensionality reduction; elementary data clustering; implementing selected machine learning algorithms; visualising and evaluating results obtained with machine learning techniques; using software libraries for solving machine learning problems; identifying and handling common pitfalls in machine learning. Competences in recognising and describing possible applications of machine learning; formalising and rigorously analysing machine learning problems; comparing, appraising and selecting machine learning methods for specific tasks; solving real-world data mining and pattern recognition problems by using machine learning techniques.",Will be published on Absalon.,"1. Knowledge of Linear Algebra corresponding to Lineær algebra i datalogi course (LinAlgDat) 2. Knowledge of Calculus corresponding to Introduktion til matematik i naturvidenskab (MatintroNat) or Matematisk analyse og sandsynlighedsteori i datalogi (MASD). 3.Knowledge of Probability Theory corresponding to Sandsynligheds-regning og statistik (SS), Grundlæggende statistik og sandsynlighedsregning (GSS) or Matematisk analyse og sandsynlighedsteori i datalogi (MASD) and Modelling analysis of data (MAD). 4.Knowledge of Discrete Mathematics corresponding to Diskret matematik og formelle sprog (DMFS), Introduktion til Diskret Matematik og Algoritmer (IDMA) or Diskret Matematik og algoritmer (DMA). 5. Knowledge of programming corresponding to Programmering og problemløsning (PoP) and experience with programming in Python. You can test your skills by solving the self-assessment assignment at https:/​/​sites.google.com/​diku.edu/​machine-learning-courses/​mla .","Weekly lectures, weekly home assignments, exercise sessions","{'Lectures': 34, 'Preparation': 8, 'Theory exercises': 57, 'Practical exercises': 57, 'Exam Preparation': 25, 'Exam': 25, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, 7 days</div></dd><dt>Type of assessment details</dt><dd>The exam is a 7-day written take-home assignment (must be
solved individually).
<br/>
The exam will be handed out Friday in block week 7 and must be
handed in the following Friday.
<br/>
*Please note: that the planned exam workload is 25 hours. We
provide extra days to allow the students to combine the exam with
other potential duties, such as other exams or work
commitments.</dd><dt>Exam registration requirements</dt><dd><p>5-7 mandatory written take-home assignments (must be solved
individually).</p><p>A student must score above 50% on average in the assignments in
order to qualify for the exam.</p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>External censorship</dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>Prerequisite for participation in the re-exam is handing in the
course assignments no later than 3 weeks prior
to the re-exam week and scoring at least 50% on average in
these assignments.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK22000U,"7,5 ECTS",Full Degree Master,1 block,Block 1,"BThis is an on-site course, but we support remote participation via online streaming and lecture recording",No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Sadegh Talebi (13-7d6b6e6f7172387e6b766f6c734a6e7338757f386e75)'],Saved on the 14-02-2024
https://kurser.ku.dk/course/ndak22000u/2025-2026,NDAK22000U Machine Learning A (MLA),Volume 2025/2026,BSc Programme in Bioinformatics BSc Programme in Cognitive Data Science BSc Programme in Machine Learning and Data Science BSc Programme in Computer Science (data science track) MSc Programme in Computer Science MSc Programme in Computer Science (part time) MSc Programme in Computer Science (with minor subject) MSc Programme in Actuarial Mathematics MSc Programme in Bioinformatics MSc Programme in Mathematics-Economics MSc Programme in Statistics,"The course introduces basic theory and algorithms of machine learning. The course covers the following tentative list of topics: Supervised learning setting Classification Regression Unsupervised learning setting Clustering Concentration of measure inequalities Markov's Chebyshev's Hoeffding's Analysis of generalization in classification Validation and cross-validation Generalisation bound for a single hypothesis Generalisation bound for a finite hypothesis class Occam's razor - generalisation bound for a countably infinite hypothesis class Algorithms K-Nearest Neighbors Perceptron Logistic Regression Linear Regression Feature transformations and classification/regression in transformed feature spaces Various forms of regularisation Regularization terms Dimensionality reduction Random Forests and Decision Trees Neural Networks and introduction to Deep Learning Principal Component Analysis (PCA) Clustering algorithms: k-means, k-means++ Assumptions behind the algorithms taught in the course, their implications, and common pitfalls Overfitting Internal overfitting within algorithms due to overly complex hypothesis spaces Extrenal overfitting outside algorithms due to application of an excessive number of algorithms to a dataset The i.i.d. assumption The i.i.d. assumption is behind everything taught in the course Consequences of violation of the i.i.d. assumption Special case: sampling bias Failure of generalisation guarantees Implications of the i.i.d. assumption Biases in the training data propagate into predictions Correlation ≠ Causality The course only studies statistical correlations / dependencies in the data. Causal inference is not covered in the course. WARNING: The course assumes solid math and programming skills. Please, check the ""Recommended Academic Qualifications"" box below and the self-assessment assignment. It is not advised taking the course if you do not meet the academic qualifications.","At course completion, the successful student will have: Knowledge of the basic principles of machine learning; basic probability theory for modelling and analysing data; the theoretical concepts underlying classification, regression, and clustering; the mathematical foundations of selected machine learning algorithms; basic assumptions behind the algorithms studied in the course, their implications and common pitfalls. Skills in proving generalisation bounds based on validation errors; proving generalisation bounds for countable hypothesis classes; applying linear and non-linear techniques for classification and regression; performing elementary dimensionality reduction; elementary data clustering; implementing selected machine learning algorithms; visualising and evaluating results obtained with machine learning techniques; using software libraries for solving machine learning problems; identifying and handling common pitfalls in machine learning. Competences in recognising and describing possible applications of machine learning; formalising and rigorously analysing machine learning problems; comparing, appraising and selecting machine learning methods for specific tasks; solving real-world data mining and pattern recognition problems by using machine learning techniques.",Will be published on Absalon.,"1. Knowledge of Linear Algebra corresponding to Lineær algebra i datalogi course (LinAlgDat) 2. Knowledge of Calculus corresponding to Introduktion til matematik i naturvidenskab (MatintroNat) or Matematisk analyse og sandsynlighedsteori i datalogi (MASD). 3.Knowledge of Probability Theory corresponding to Sandsynligheds-regning og statistik (SS), Grundlæggende statistik og sandsynlighedsregning (GSS) or Matematisk analyse og sandsynlighedsteori i datalogi (MASD) and Modelling analysis of data (MAD). 4.Knowledge of Discrete Mathematics corresponding to Diskret matematik og formelle sprog (DMFS), Introduktion til Diskret Matematik og Algoritmer (IDMA) or Diskret Matematik og algoritmer (DMA). 5. Knowledge of programming corresponding to Programmering og problemløsning (PoP) and experience with programming in Python. You can test your skills by solving the self-assessment assignment at https:/​/​sites.google.com/​diku.edu/​machine-learning-courses/​mla .","Weekly lectures, weekly home assignments, exercise sessions","{'Lectures': 34, 'Preparation': 8, 'Theory exercises': 57, 'Practical exercises': 57, 'Exam Preparation': 25, 'Exam': 25, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, 7 days</div></dd><dt>Type of assessment details</dt><dd>The exam is a 7-day written take-home assignment (must be
solved individually).
<br/>
The exam will be handed out Friday and must be handed in the
following Friday.
<br/><br/>
*Please note: that the planned exam workload is 25 hours. We
provide extra days to allow the students to combine the exam with
other potential duties, such as other exams or work
commitments.</dd><dt>Examination prerequisites</dt><dd><p>5-7 mandatory written take-home assignments (must be solved
individually).</p><p>A student must score above 50% on average in the assignments in
order to qualify for the exam.</p></dd><dt>Aid</dt><dd>All aids allowed except Generative AI</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>External censorship</dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>Prerequisite for participation in the re-exam is handing in the
course assignments no later than 3 weeks prior
to the re-exam week and scoring at least 50% on average in
these assignments.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK22000U,"7,5 ECTS",Full Degree Master,1 block,Block 1,"BThis is an on-site course, but we support remote participation via online streaming and lecture recording",No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Sadegh Talebi (13-7866696a6c6d337966716a676e45696e33707a336970)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak22001u/2024-2025,NDAK22001U Machine Learning B (MLB),Volume 2024/2025,BSc Programme in Machine Learning and Data Science MSc Programme in Actuarial Mathematics MSc Programme in Mathematics-Economics MSc Programme in Computer Science MSc Programme in Computer Science (part time) MSc Programme in Computer Science (with minor subject) MSc Programme in Statistics,"The course is a continuation of Machine Learning A course and provides deeper theoretical foundations of machine learning and a number of advanced theoretically grounded learning techniques. A tentative list of topics includes: Basics in Optimization Theory Basic properties of functions: convexity, Lipschitzness, gradients, subgradients, etc. Constrained optimization and the method of Lagrange multipliers Stochastic Gradient Descent (SGD) Convergence proof for SGD Alternating optimization methods Basics of Information Theory Entropy Relative entropy (the Kullback-Leibler divergence) The method of types kl inequality for concentration of measure Advanced techniques for analysing generalisation power of learning algorithms Vapnik-Chervonenkis (VC) analysis VC analysis of SVMs VC lower bound PAC-Bayesian analysis PAC-Bayesian analysis of majority vote Bernstein-type concentration inequalities, with applications to analysis of learning algorithms Kernel Methods Kernels and RKHS SVMs Ensemble classifiers and weighted majority vote Boosting technique AdaBoost XGBoost Non-linear dimensionality reduction Stochastic neighbor embedding The t-SNE algorithm Bayesian inference Basic concepts Difference between Bayesian and frequentist views WARNING: If you have not taken DIKU's Machine Learning A course, please, carefully check the ""Recommended Academic Qualifications"" box below. Machine Learning courses given at other places do not necessarily prepare you well for this course, because DIKU's machine learning courses have a stronger theoretical component than average machine learning courses offered elsewhere. It is not advised taking the course if you do not meet the academic qualifications.","At course completion, the successful student will have: Knowledge of advanced understanding of the concept of generalisation; advanced tools for analysis of generalisation power of machine learning algorithms; the mathematical foundations of selected advanced machine learning algorithms. Skills in deriving advanced generalisation bounds for expected prediction quality; applying advanced linear and non-linear techniques for classification and regression; implementing selected advanced machine learning algorithms; visualising and evaluating results obtained with machine learning techniques; using software libraries for solving machine learning problems. Competences in recognising and describing possible applications of machine learning; formalising and rigorously analysing machine learning problems; comparing, appraising and selecting machine learning methods for specific tasks; solving real-world data mining and pattern recognition problems by using machine learning techniques.",Will be published on Absalon.,"It is assumed that the students have successfully passed Machine Learning A course. Machine Learning courses given at other places do not necessarily prepare you well for this course. Please, check the self-preparation assignment at https:/​/​sites.google.com/​diku.edu/​machine-learning-courses/​mlb . The course requires strong mathematical skills and background corresponding to what is achieved on the BSc. in Machine Learning and Data Science. In particular: 1. Knowledge of Linear Algebra corresponding to Lineær algebra i datalogi course (LinAlgDat) 2. Knowledge of Calculus corresponding to Introduktion til matematik i naturvidenskab (MatintroNat) or Matematisk analyse og sandsynlighedsteori i datalogi (MASD). 3.Knowledge of Probability Theory corresponding to Sandsynligheds-regning og statistik (SS), Grundlæggende statistik og sandsynlighedsregning (GSS) or Matematisk analyse og sandsynlighedsteori i datalogi (MASD) and Modelling analysis of data (MAD). 4.Knowledge of Discrete Mathematics corresponding to Diskret matematik og formelle sprog (DMFS), Diskret Matematik of Algoritmer (IDMA) or Diskret Matematik og algoritmer (DMA). 5. Knowledge of programming corresponding to Programmering og problemløsning (PoP) and experience with programming in Python.","Weekly lectures, weekly home assignments, exercise classes","{'Lectures': 36, 'Preparation': 8, 'Theory exercises': 85, 'Practical exercises': 77, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>6-8 weekly take-home assignments. The assignments must be
solved individually.
<br/><br/>
The course is based on weekly home assignments, which are graded
continuously over the course of the semester. The final grade will
be given as an overall assessment.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>External censorship</dd><dt>Re-exam</dt><dd><p>The re-exam consists of two elements:</p><p>1. The first element is handing in at least 5 of the
course assignments no later than 2 weeks before the oral part of
the re-exam.
<br/>
2. The second element is a 30-minute oral examination
without preparation in the course curriculum.</p><p>The final grade will be given as an overall assessment of
the two re-exam elements.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK22001U,"7,5 ECTS",Full Degree Master,1 block,Block 4,"CThis is a on-site course, but we support remote participation via online streaming and lecture recording.",No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Nirupam Gupta (4-7d7876844f73783d7a843d737a)'],Saved on the 25-06-2024
https://kurser.ku.dk/course/ndab24006u/2024-2025,NDAB24006U Macroeconomics B (MakØkB),Volume 2024/2025,BSc Programme in Computer Science and Economics,"The course deals with macroeconomic theory and empirics for the short run. It integrates the computer mainly through numerical solution techniques. First, the course reintroduces the theoretical distinction between macroeconomics for the long run and macroeconomics for the short run. The stylized facts for the short run are presented. Next, the course presents the rationale for nominal price and wage rigidities informally. It then presents theories and empirics for aggregate investment, aggregate consumption and monetary policy leading to the aggregate demand (AD) curve. After that, the course presents a theory for aggregate supply and the Phillips curve leading to the aggregate supply (AS) curve, at this stage without involving expected future inflation. Next, the course presents basic AS-AD models with output and inflation as the endogenous variables and within this framework presents the theory of stabilization policy for closed as well as open economies. Some of the models are analyzed by stochastic simulation on the computer. After that, the theory of nominal and real price rigidities is presented more formally including so-called Calvo price setting, which leads to the AS-curve involving expected future inflation (the New Keynesian Phillips Curve). This leads naturally further on to the canonical, modern new Keynesian model, which is an example of a Dynamic Stochastic General Equilibrium-model. This model is analyzed by numerical solution methods on the computer.","Knowledge of The stylized empirical facts about business cycles; The rationale for nominal rigidities of prices and wages; The short run macroeconomic fluctuations around the long run trend; The most important macroeconomic theories about private consumption and investment; The most important macroeconomic theories about monetary policy, aggregate demand, the inflation process, Phillips curves and aggregate supply; The equilibrium mechanisms of the theoretical macroeconomic models for closed and open economies covered by the course; The dynamic mechanisms that pull the economy towards its long-run growth trend; The impulses that initiate business cycles and the economic propagation mechanisms that give business cycles their systematic properties. Skills in Reflecting about the most important criticisms of the key assumptions underlying the models presented and how these affect the modelsʼ predictions; Selecting and applying dynamic macroeconomic models, deterministic or stochastic, of the types covered by the course; Conducting an analysis of a specific macroeconomic stabilization problem within modelling frameworks as known from the course; Applying the most important macroeconomic theories for private consumption, private investment and the inflation process; Assessing the key mechanisms for the determination of exports and imports in a small open economy and the role of the exchange rate in this; Assessing pros and cons of a fixed vs. a floating exchange rate; Assessing the social costs of business cycles and the gains and costs of macroeconomic stabilization policy. Competences in Conducting an independent macroeconomic analysis of a relevant problem with outset in theoretical models as known from the course; Confronting theoretical macro models with empirical facts and on this background be able to assess the models' applicability in various connections; Working systematically and consistently with dynamic macroeconomic models; Deducing specific implications and results and assessing and discussing these in specific macroeconomic problems based on relevant theoretical macroeconomic analysis.","See Absalon when the course is set up. The curriculum might contain: Peter Birch Sørensen and Hans Jørgen Whitta-Jacobsen, Introducing Advanced Macroeconomics: Growth and Business Cycles, McGraw-Hill or OUP, latest edition. David Romer, Advanced Macroeconomics, McGraw-Hill, latest edition. Jordi Gali, Monetary Policy, Inflation and the Business Cycle: An Introduction to the New Keynesian Framework, Princeton University Press, latest edition.","Prerequisites equivalent to the courses: Introduktion til Økonomi, Matematisk Analyse, Mikroøkonomi A, Makroøkonomi A, Grundlæggende Statistik og Sandsynlighedsregning, Numerisk Analyse samt Økonometri A and B.",3x2 hours of lectures and 2x2 timers of classes each week for 7 weeks.,"{'Lectures': 42, 'Preparation': 104, 'Theory exercises': 28, 'Exam Preparation': 20, 'Exam': 12, 'Total': 206}",Oral Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, 48 hours</div></dd><dt>Type of assessment details</dt><dd>The exam is a 48-hours take-home exam which must be completed
individually (no group submissions).
<br/>
The exam will be Wednesday to Friday in block week 8.</dd><dt>Exam registration requirements</dt><dd><p>To qualify for the exam 1-3 mandatory assignments must be
submitted and passed. Hand-in will be in Absalon.</p><p>Some assignments may be solved in groups, others individually.
More specific information about the assignments will be given at
course start. </p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>External censorship</dd><dt>Re-exam</dt><dd><p>Same as ordinary exam. </p><p>If a student is not qualified for the re-exam, qualification can
be achieved by handing in the assignments no later than
3 weeks before the re-exam and approval of assignments no
later than 2 weeks before the re-exam.</p><p><em>If less than 10 students register for the re-exam, the
re-exam will be a 30 minutes oral exam (including grading
without preparation) with written aids only (no electronic
aids).</em></p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAB24006U,"7,5 ECTS",Bachelor,1 block,Block 4,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Michael Baltzer Tønne Andersen (4-6f6476634267657170306d7730666d)'],Saved on the 01-03-2024
https://kurser.ku.dk/course/ndak22001u/2025-2026,NDAK22001U Machine Learning B (MLB),Volume 2025/2026,BSc Programme in Machine Learning and Data Science MSc Programme in Actuarial Mathematics MSc Programme in Mathematics-Economics MSc Programme in Computer Science MSc Programme in Computer Science (part time) MSc Programme in Computer Science (with minor subject) MSc Programme in Statistics,"The course is a continuation of Machine Learning A course and provides deeper theoretical foundations of machine learning and a number of advanced theoretically grounded learning techniques. A tentative list of topics includes: Basics in Optimization Theory Basic properties of functions: convexity, Lipschitzness, gradients, subgradients, etc. Constrained optimization and the method of Lagrange multipliers Stochastic Gradient Descent (SGD) Convergence proof for SGD Alternating optimization methods Basics of Information Theory Entropy Relative entropy (the Kullback-Leibler divergence) The method of types kl inequality for concentration of measure Advanced techniques for analysing generalisation power of learning algorithms Vapnik-Chervonenkis (VC) analysis VC analysis of SVMs VC lower bound PAC-Bayesian analysis PAC-Bayesian analysis of majority vote Bernstein-type concentration inequalities, with applications to analysis of learning algorithms Kernel Methods Kernels and RKHS SVMs Ensemble classifiers and weighted majority vote Boosting technique AdaBoost XGBoost Bayesian inference Basic concepts Difference between Bayesian and frequentist views WARNING: If you have not taken DIKU's Machine Learning A course, please, carefully check the ""Recommended Academic Qualifications"" box below. Machine Learning courses given at other places do not necessarily prepare you well for this course, because DIKU's machine learning courses have a stronger theoretical component than average machine learning courses offered elsewhere. It is not advised taking the course if you do not meet the academic qualifications.","At course completion, the successful student will have: Knowledge of advanced understanding of the concept of generalisation; advanced tools for analysis of generalisation power of machine learning algorithms; the mathematical foundations of selected advanced machine learning algorithms. Skills in deriving advanced generalisation bounds for expected prediction quality; applying advanced linear and non-linear techniques for classification and regression; implementing selected advanced machine learning algorithms; visualising and evaluating results obtained with machine learning techniques; using software libraries for solving machine learning problems. Competences in recognising and describing possible applications of machine learning; formalising and rigorously analysing machine learning problems; comparing, appraising and selecting machine learning methods for specific tasks; solving real-world data mining and pattern recognition problems by using machine learning techniques.",Will be published on Absalon.,"It is assumed that the students have successfully passed Machine Learning A course. Machine Learning courses given at other places do not necessarily prepare you well for this course. Please, check the self-preparation assignment at https:/​/​sites.google.com/​diku.edu/​machine-learning-courses/​mlb . The course requires strong mathematical skills and background corresponding to what is achieved on the BSc. in Machine Learning and Data Science. In particular: 1. Knowledge of Linear Algebra corresponding to Lineær algebra i datalogi course (LinAlgDat) 2. Knowledge of Calculus corresponding to Introduktion til matematik i naturvidenskab (MatintroNat) or Matematisk analyse og sandsynlighedsteori i datalogi (MASD). 3.Knowledge of Probability Theory corresponding to Sandsynligheds-regning og statistik (SS), Grundlæggende statistik og sandsynlighedsregning (GSS) or Matematisk analyse og sandsynlighedsteori i datalogi (MASD) and Modelling analysis of data (MAD). 4.Knowledge of Discrete Mathematics corresponding to Diskret matematik og formelle sprog (DMFS), Diskret Matematik of Algoritmer (IDMA) or Diskret Matematik og algoritmer (DMA). 5. Knowledge of programming corresponding to Programmering og problemløsning (PoP) and experience with programming in Python.","Weekly lectures, weekly home assignments, exercise classes","{'Lectures': 36, 'Preparation': 8, 'Theory exercises': 85, 'Practical exercises': 77, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>6-8 weekly take-home assignments. The assignments must be
solved individually.
<br/><br/>
The course is based on weekly home assignments, which are graded
continuously over the course of the semester. The final grade will
be given as an overall assessment.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>External censorship</dd><dt>Re-exam</dt><dd><p>The re-exam consists of two elements:</p><ol><li>The first element is handing in at least 5 of the course
assignments no later than 2 weeks before the oral part of the
re-exam. When resubmitting the assignments the same aids are
allowed as for the ordinary exam.</li><li>The second element is a 30-minute oral examination
without preparation in the course curriculum, with no aids
allowed.</li></ol><p>The final grade will be an overall assessment of the two
re-exam elements.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK22001U,"7,5 ECTS",Full Degree Master,1 block,Block 4,"CThis is a on-site course, but we support remote participation via online streaming and lecture recording.",No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Nirupam Gupta (4-716c6a7843676c316e7831676e)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndab24005u/2024-2025,NDAB24005U Makroøkonomi A (MakØkA),Årgang 2024/2025,Bacheloruddannelsen i datalogi-økonomi,"Kurset omhandler makroøkonomisk teori og empiri for det lange sigt. Computeren integreres gennem numeriske modelløsningsmetoder. Først introduceres makroøkonomi generelt, den teoretiske sondring mellem makroteori for det lange og det korte sigt præsenteres og diskuteres, og de vigtigste stiliserede makroøkonomiske fakta for det lange sigt (om vækst og velstand) præsenteres. Dernæst behandles makroteori og -empiri for det lange sigt med et særligt fokus på varianter af Solow-modellen.","Viden om Sondringen mellem makro for hhv. langt og kort sigt Vigtige empiriske “stiliserede fakta” om de langsigtede bevægelser i centrale makroøkonomiske variable inden for økonomisk vækst Udvalgte vækst-teoretiske modeller i lyset af ovennævnte ”stiliserede fakta” Disse modellers empiriske plausibilitet Færdigheder i at Kunne analysere og anvende varianter af Solow-vækstmodellen Anvende de metoder og teorier, der gennemgås i kurset; herunder ud fra et empirisk materiale og/eller en makroøkonomisk model kunne uddrage, forklare og perspektivere, hvad dette og/eller denne fundamentalt siger om de overordnede langsigtede makroøkonomiske sammenhænge og på hvilken måde empiri og model kan belyse hinanden og kunne formidle resultaterne Anvende en makroøkonomisk model i de dimensioner, der kendes fra kurset herunder til analyse af økonomisk strukturpolitik under inddragelse af de metoder, kurset præsenterer; dvs. kunne uddrage, begrunde og vurdere hvad modellen siger om de langsigtede makroøkonomiske sammenhænge og effekterne af strukturpolitik og kunne formidle resultaterne Anvende en kendt teoretisk model på et kendt empirisk materiale og på baggrund heraf kunne vurdere modellen og begrunde og perspektivere sammenhængen mellem teori og empiri og kunne formidle resultaterne Kompetencer til Vigtige kompetencer, der begyndende skal erhverves i dette kursus er: Selvstændigt at opstille og analysere vha. analytiske og numeriske metoder af formelle, makroøkonomiske langsigtsmodeller, som af type er kendt fra faget, men som kan være videreudviklinger og variationer heraf. En del af denne kundskab består i en verbal formidling af en forståelse af modellernes egenskaber. Selvstændigt at kunne koble teori og empiri, så et empirisk materiale kan tilvejebringes og analyseres på en måde, der er afklarende i forhold til teorien. Igen er verbal formidling af de konklusioner, der kan drages ud af samspillet mellem teori og empiri, en vigtig del af den beskrevne kompetence. At kunne tage udgangspunkt i et makroøkonomisk problem og herudfra bedømme og tage stilling til, hvilke teoretiske modeller og hvilken empiri, der hensigtsmæssigt kan inddrages i en analyse af problemet. Herved vil den studerende begyndende opnå kompetencer, der kan bruges ved udarbejdelse af B.Sc.-projektet og ved faktisk økonomisk analyse i eksempelvis ministerier og organisationer. Præcist og forståeligt kunne formidle indholdet af den nævnte slags selvstændige makroøkonomiske analyser","Se Absalon, når kurset er oprettet. Eksempelvis kunne følgende bøger indgå i pensum: 1) Peter Birch Sørensen and Hans Jørgen Whitta-Jacobsen, Introducing Advanced Macroeconomics: Growth and Business Cycles, seneste udgave.","Introduktion til Økonomi, Matematisk Analyse, Mikroøkonomi A, Grundlæggende Statistik og Sandsynlighedsregning samt Økonometri A.",Forelæsninger og øvelser.,"{'Forelæsninger': 42, 'Forberedelse (anslået)': 132, 'Teoretiske øvelser': 28, 'Eksamen': 4, 'I alt': 206}",Mundtlig Kollektiv Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig stedprøve, 4 timer</div></dd><dt>Prøveformsdetaljer</dt><dd>Den skriftlige stedprøve er en ITX-eksamen.
<br/>
Se vigtig information om ITX-stedprøver på Studieinformation under
punktet: Eksamen -&gt; Eksamensform og regler -&gt; Skriftlig
stedprøve (ITX-prøve)</dd><dt>Krav til indstilling til eksamen</dt><dd><p>Aflevering af 1 obligatorisk opgave, der skal
afleveres og godkendes for at kvalificere sig
til eksamen senest 3 uger før eksamensugen.</p></dd><dt>Hjælpemidler</dt><dd>Uden hjælpemidler</dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Samme som ordinær.</p><p>Kvalifikation til deltagelse i reeksamen opnås ved genaflevering
af den obligatoriske opgave senest 3 uger før
reeksamen, således at samme krav som for deltagelse ved ordinær
eksamen opfyldes.</p><p>Såfremt der er 10 eller færre tilmeldte vil reeksamen blive
afholdt som en mundtlig prøve (30 min. inkl. votering) med
forberedelse (30 min) med skriftlige hjælpemidler.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 02-05-2024
https://kurser.ku.dk/course/ndab24006u/2025-2026,NDAB24006U Macroeconomics B (MakØkB),Volume 2025/2026,BSc Programme in Computer Science and Economics,"The course deals with macroeconomic theory and empirics for the short run. It integrates the computer mainly through numerical solution techniques. First, the course reintroduces the theoretical distinction between macroeconomics for the long run and macroeconomics for the short run. The stylized facts for the short run are presented. Next, the course presents the rationale for nominal price and wage rigidities informally. It then presents theories and empirics for aggregate investment, aggregate consumption and monetary policy leading to the aggregate demand (AD) curve. After that, the course presents a theory for aggregate supply and the Phillips curve leading to the aggregate supply (AS) curve, at this stage without involving expected future inflation. Next, the course presents basic AS-AD models with output and inflation as the endogenous variables and within this framework presents the theory of stabilization policy for closed as well as open economies. Some of the models are analyzed by stochastic simulation on the computer. After that, the theory of nominal and real price rigidities is presented more formally including so-called Calvo price setting, which leads to the AS-curve involving expected future inflation (the New Keynesian Phillips Curve). This leads naturally further on to the canonical, modern new Keynesian model, which is an example of a Dynamic Stochastic General Equilibrium-model. This model is analyzed by numerical solution methods on the computer.","Knowledge of The stylized empirical facts about business cycles; The rationale for nominal rigidities of prices and wages; The short run macroeconomic fluctuations around the long run trend; The most important macroeconomic theories about private consumption and investment; The most important macroeconomic theories about monetary policy, aggregate demand, the inflation process, Phillips curves and aggregate supply; The equilibrium mechanisms of the theoretical macroeconomic models for closed and open economies covered by the course; The dynamic mechanisms that pull the economy towards its long-run growth trend; The impulses that initiate business cycles and the economic propagation mechanisms that give business cycles their systematic properties. Skills in Reflecting about the most important criticisms of the key assumptions underlying the models presented and how these affect the modelsʼ predictions; Selecting and applying dynamic macroeconomic models, deterministic or stochastic, of the types covered by the course; Conducting an analysis of a specific macroeconomic stabilization problem within modelling frameworks as known from the course; Applying the most important macroeconomic theories for private consumption, private investment and the inflation process; Assessing the key mechanisms for the determination of exports and imports in a small open economy and the role of the exchange rate in this; Assessing pros and cons of a fixed vs. a floating exchange rate; Assessing the social costs of business cycles and the gains and costs of macroeconomic stabilization policy. Competences in Conducting an independent macroeconomic analysis of a relevant problem with outset in theoretical models as known from the course; Confronting theoretical macro models with empirical facts and on this background be able to assess the models' applicability in various connections; Working systematically and consistently with dynamic macroeconomic models; Deducing specific implications and results and assessing and discussing these in specific macroeconomic problems based on relevant theoretical macroeconomic analysis.","See Absalon when the course is set up. The curriculum might contain: Peter Birch Sørensen and Hans Jørgen Whitta-Jacobsen, Introducing Advanced Macroeconomics: Growth and Business Cycles, McGraw-Hill or OUP, latest edition. David Romer, Advanced Macroeconomics, McGraw-Hill, latest edition. Jordi Gali, Monetary Policy, Inflation and the Business Cycle: An Introduction to the New Keynesian Framework, Princeton University Press, latest edition.","Prerequisites equivalent to the courses: Introduktion til Økonomi, Matematisk Analyse, Mikroøkonomi A, Makroøkonomi A, Grundlæggende Statistik og Sandsynlighedsregning, Numerisk Analyse samt Økonometri A and B.",3x2 hours of lectures and 2x2 timers of classes each week for 7 weeks.,"{'Lectures': 42, 'Preparation': 104, 'Theory exercises': 28, 'Exam Preparation': 20, 'Exam': 12, 'Total': 206}",Oral Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, 48 hours</div></dd><dt>Type of assessment details</dt><dd>The exam is a 48-hours take-home exam which must be completed
individually (no group submissions).
<br/>
The exam will be Wednesday to Friday in block week 8.</dd><dt>Examination prerequisites</dt><dd><p>To qualify for the exam 1-3 mandatory assignments must be
submitted and passed. Hand-in will be in Absalon.</p><p>Some assignments may be solved in groups, others individually.
More specific information about the assignments will be given at
course start. </p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>External censorship</dd><dt>Re-exam</dt><dd><p>Same as ordinary exam. </p><p>If a student is not qualified for the re-exam, qualification can
be achieved by handing in the assignments no later than
3 weeks before the re-exam and approval of assignments no
later than 2 weeks before the re-exam.</p><p><em>If less than 10 students register for the re-exam, the
re-exam will be a 30 minutes oral exam (including grading
without preparation) with written aids only (no electronic
aids).</em></p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAB24006U,"7,5 ECTS",Bachelor,1 block,Block 4,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Michael Baltzer Tønne Andersen (4-716678654469677372326f7932686f)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndab24005u/2025-2026,NDAB24005U Makroøkonomi A (MakØkA),Årgang 2025/2026,Bacheloruddannelsen i datalogi-økonomi,"Kurset omhandler makroøkonomisk teori og empiri for det lange sigt. Computeren integreres gennem numeriske modelløsningsmetoder. Først introduceres makroøkonomi generelt, den teoretiske sondring mellem makroteori for det lange og det korte sigt præsenteres og diskuteres, og de vigtigste stiliserede makroøkonomiske fakta for det lange sigt (om vækst og velstand) præsenteres. Dernæst behandles makroteori og -empiri for det lange sigt med et særligt fokus på varianter af Solow-modellen.","Viden om Sondringen mellem makro for hhv. langt og kort sigt Vigtige empiriske “stiliserede fakta” om de langsigtede bevægelser i centrale makroøkonomiske variable inden for økonomisk vækst Udvalgte vækst-teoretiske modeller i lyset af ovennævnte ”stiliserede fakta” Disse modellers empiriske plausibilitet Færdigheder i at Kunne analysere og anvende varianter af Solow-vækstmodellen Anvende de metoder og teorier, der gennemgås i kurset; herunder ud fra et empirisk materiale og/eller en makroøkonomisk model kunne uddrage, forklare og perspektivere, hvad dette og/eller denne fundamentalt siger om de overordnede langsigtede makroøkonomiske sammenhænge og på hvilken måde empiri og model kan belyse hinanden og kunne formidle resultaterne Anvende en makroøkonomisk model i de dimensioner, der kendes fra kurset herunder til analyse af økonomisk strukturpolitik under inddragelse af de metoder, kurset præsenterer; dvs. kunne uddrage, begrunde og vurdere hvad modellen siger om de langsigtede makroøkonomiske sammenhænge og effekterne af strukturpolitik og kunne formidle resultaterne Anvende en kendt teoretisk model på et kendt empirisk materiale og på baggrund heraf kunne vurdere modellen og begrunde og perspektivere sammenhængen mellem teori og empiri og kunne formidle resultaterne Kompetencer til Vigtige kompetencer, der begyndende skal erhverves i dette kursus er: Selvstændigt at opstille og analysere vha. analytiske og numeriske metoder af formelle, makroøkonomiske langsigtsmodeller, som af type er kendt fra faget, men som kan være videreudviklinger og variationer heraf. En del af denne kundskab består i en verbal formidling af en forståelse af modellernes egenskaber. Selvstændigt at kunne koble teori og empiri, så et empirisk materiale kan tilvejebringes og analyseres på en måde, der er afklarende i forhold til teorien. Igen er verbal formidling af de konklusioner, der kan drages ud af samspillet mellem teori og empiri, en vigtig del af den beskrevne kompetence. At kunne tage udgangspunkt i et makroøkonomisk problem og herudfra bedømme og tage stilling til, hvilke teoretiske modeller og hvilken empiri, der hensigtsmæssigt kan inddrages i en analyse af problemet. Herved vil den studerende begyndende opnå kompetencer, der kan bruges ved udarbejdelse af B.Sc.-projektet og ved faktisk økonomisk analyse i eksempelvis ministerier og organisationer. Præcist og forståeligt kunne formidle indholdet af den nævnte slags selvstændige makroøkonomiske analyser","Se Absalon, når kurset er oprettet. Eksempelvis kunne følgende bøger indgå i pensum: 1) Peter Birch Sørensen and Hans Jørgen Whitta-Jacobsen, Introducing Advanced Macroeconomics: Growth and Business Cycles, seneste udgave.","Introduktion til Økonomi, Matematisk Analyse, Mikroøkonomi A, Grundlæggende Statistik og Sandsynlighedsregning samt Økonometri A.",Forelæsninger og øvelser.,"{'Forelæsninger': 42, 'Forberedelse (anslået)': 132, 'Teoretiske øvelser': 28, 'Eksamen': 4, 'I alt': 206}",Mundtlig Kollektiv Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig stedprøve, 4 timer</div></dd><dt>Prøveformsdetaljer</dt><dd>Den skriftlige stedprøve er en ITX-eksamen.
<br/>
Se vigtig information om ITX-stedprøver på Studieinformation under
punktet: Eksamen -&gt; Eksamensform og regler -&gt; Skriftlig
stedprøve (ITX-prøve)</dd><dt>Eksamensforudsætninger</dt><dd><p>Aflevering af 1 obligatorisk opgave, der skal
afleveres og godkendes for at kvalificere sig
til eksamen senest 3 uger før eksamensugen.</p></dd><dt>Hjælpemidler</dt><dd>Ingen hjælpemidler tilladt</dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Samme som ordinær.</p><p>Kvalifikation til deltagelse i reeksamen opnås ved genaflevering
af den obligatoriske opgave senest 3 uger før
reeksamen, således at samme krav som for deltagelse ved ordinær
eksamen opfyldes.</p><p>Såfremt der er 10 eller færre tilmeldte vil reeksamen blive
afholdt som en mundtlig prøve (30 min. inkl. votering) med
forberedelse (30 min) med skriftlige hjælpemidler.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 24-02-2025
https://kurser.ku.dk/course/ndab18002u/2024-2025,NDAB18002U Matematisk analyse og sandsynlighedsteori i datalogi (MASD),Årgang 2024/2025,Bacheloruddannelsen i bioinformatik Bacheloruddannelsen i datalogi,Kurset giver en introduktion til analyse i en og flere variabler. Kurset giver derudover en introduktion til sandsynlighedsteori.,"Viden om Følger og serier. Almindelige matematiske funktioner af en variabel, særlig eksponentialfunktionen. Kontinuitet, grænseværdier, differentiation og integration i en og flere variable. Infinitesimalregningens hovedsætning. Taylors sætning. Optimering i en og flere variable. Almindelige sandsynlighedsfordelinger og deres anvendelser. Elementære principper for sandsynlighedsberegninger. Sandsynlighed, betinget sandsynlighed og uafhængighed. Stokastiske variable, middelværdi og varians. Forskellige fordelinger, herunder binomialfordelingen. Færdigheder i Udføre numeriske beregninger samt at visualisere funktioner, billeder og beregningsresultater med hjælp af et computerprogram (mest sandsynligt Python). Bevise sætninger og matematiske påstande indenfor analyse og sandsynlighedsteori. Analysere konvergens af følger og serier. Differentiere og integrere almindelige funktioner af en og flere variable analytisk. Differentiere og integrere almindelige funktioner af en og flere variable numerisk ved hjælp af finite differences. Bruge afledte i en og flere variable til dataprocessering og optimering. Løse optimeringsproblemer analytisk og numerisk. Udføre elementære sandsynlighedsberegninger samt foretage almindelige approksimationer eller estimeringer af sandsynligheder. Udføre estimation i simple normalfordelingsmodeller, herunder ét- og to-stikprøveproblemer, både formelmæssigt og vha. et computerprogram. Kompetencer i Løse videnskabelige problemer ved hjælp af analyse, inkluderet analytisk og numerisk løsning af optimeringsproblemer. Oversætte videnskabelige problemstillinger, der involverer usikkerhed eller tilfældighed, til sandsynlighedsteoretiske problemstillinger, som derefter kan analyseres matematisk. Beskrive løsninger af problemer i form af matematiske beviser, beskrivelse af matematiske og statistiske modeller, samt fremstilling af eksperimentelle metoder og resultater i rapportform.",Se Absalon.,"Grundlæggende programmeringserfaring. Lineær algebra og grundlæggende matematisk metoder (beviser og, især, induktionsbeviser). De matematiske forudsætninger vil f. eks. være dækket af LinAlgDat og DMA eller tilsvarende.","Forelæsninger, øvelser og obligatoriske hjemmeopgaver.","{'Forelæsninger': 28, 'Holdundervisning': 21, 'Forberedelse (anslået)': 44, 'Øvelser': 109, 'Eksamen': 4, 'I alt': 206}",Skriftlig Mundtlig Individuel Løbende feedback i undervisningsforløbet Der gives som udgangspunkt skriftlig feedback på de kvalificerende opgaver. Derudover kan de studerende få mundtlig feedback og uddybelse på de kvalificerende opgaver til instruktortimerne.,Selvbetjeningen på KUnet Som meritstuderende – klik her!Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig stedprøve, 4 timer med opsyn.</div></dd><dt>Prøveformsdetaljer</dt><dd>ITX eksamen med adgang til kursets E-lærebøger.
<br/><br/>
Den skriftlige stedprøve er en ITX-eksamen.
<br/>
Se vigtig information om ITX-stedprøver på Studieinformation under
punktet: Eksamen -&gt; Eksamensform og regler -&gt; Skriftlig
stedprøve (ITX-prøve)</dd><dt>Krav til indstilling til eksamen</dt><dd><p>Der er 5-7 obligatoriske øvelsesopgaver (som kan indeholde
programmeringsopgaver), under kurset, og alle foruden én skal
beståes for at være kvalificeret til eksamen.</p></dd><dt>Hjælpemidler</dt><dd>Skriftlige hjælpemidler tilladt 
<div><p>Skriftlige hjælpemidler inkluderer de elektroniske udgaver af
lærebøgerne, der bruges på kurset (tilgængelige via ITX). Noter kan
medbringes (digitale noter kan uploades til Digital Eksamen). Det
er ikke tilladt at medbringe lommeregnere, egne computere, tablets
eller andet elektronisk udstyr.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere.</div></dd><dt>Reeksamen</dt><dd><p>Reeksamen er 20 minutter mundtlig eksamen uden forberedelse i
kursets indhold. Ingen hjælpemidler tilladt.</p><p>Hvis indstillingskravet til eksamen ikke er opfyldt,
kan det opfyldes ved at aflevere og få godkendt de
skriftlige opgaver. Afleveringsdeadline er tre uger inden
reeksamen.</p><p> </p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 07-05-2024
https://kurser.ku.dk/course/ndab18002u/2025-2026,NDAB18002U Matematisk analyse og sandsynlighedsteori i datalogi (MASD),Årgang 2025/2026,Bacheloruddannelsen i bioinformatik Bacheloruddannelsen i datalogi,Kurset giver en introduktion til analyse i en og flere variabler. Kurset giver derudover en introduktion til sandsynlighedsteori.,"Viden om Følger og serier. Almindelige matematiske funktioner af en variabel, særlig eksponentialfunktionen. Kontinuitet, grænseværdier, differentiation og integration i en og flere variable. Infinitesimalregningens hovedsætning. Taylors sætning. Optimering i en og flere variable. Almindelige sandsynlighedsfordelinger og deres anvendelser. Elementære principper for sandsynlighedsberegninger. Sandsynlighed, betinget sandsynlighed og uafhængighed. Stokastiske variable, middelværdi og varians. Forskellige fordelinger, herunder binomialfordelingen. Færdigheder i Udføre numeriske beregninger samt at visualisere funktioner, billeder og beregningsresultater med hjælp af et computerprogram (mest sandsynligt Python). Bevise sætninger og matematiske påstande indenfor analyse og sandsynlighedsteori. Analysere konvergens af følger og serier. Differentiere og integrere almindelige funktioner af en og flere variable analytisk. Differentiere og integrere almindelige funktioner af en og flere variable numerisk ved hjælp af finite differences. Bruge afledte i en og flere variable til dataprocessering og optimering. Løse optimeringsproblemer analytisk og numerisk. Udføre elementære sandsynlighedsberegninger samt foretage almindelige approksimationer eller estimeringer af sandsynligheder. Udføre estimation i simple normalfordelingsmodeller, herunder ét- og to-stikprøveproblemer, både formelmæssigt og vha. et computerprogram. Kompetencer i Løse videnskabelige problemer ved hjælp af analyse, inkluderet analytisk og numerisk løsning af optimeringsproblemer. Oversætte videnskabelige problemstillinger, der involverer usikkerhed eller tilfældighed, til sandsynlighedsteoretiske problemstillinger, som derefter kan analyseres matematisk. Beskrive løsninger af problemer i form af matematiske beviser, beskrivelse af matematiske og statistiske modeller, samt fremstilling af eksperimentelle metoder og resultater i rapportform.",Se Absalon.,"Grundlæggende programmeringserfaring. Lineær algebra og grundlæggende matematisk metoder (beviser og, især, induktionsbeviser). De matematiske forudsætninger vil f. eks. være dækket af LinAlgDat og DMA eller tilsvarende.","Forelæsninger, øvelser og obligatoriske hjemmeopgaver.","{'Forelæsninger': 28, 'Holdundervisning': 21, 'Forberedelse (anslået)': 44, 'Øvelser': 109, 'Eksamen': 4, 'I alt': 206}",Skriftlig Mundtlig Individuel Løbende feedback i undervisningsforløbet Der gives som udgangspunkt skriftlig feedback på de kvalificerende opgaver. Derudover kan de studerende få mundtlig feedback og uddybelse på de kvalificerende opgaver til instruktortimerne.,Selvbetjeningen på KUnet Som meritstuderende – klik her!Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig stedprøve, 4 timer med opsyn.</div></dd><dt>Prøveformsdetaljer</dt><dd>ITX eksamen med adgang til kursets E-lærebøger.
<br/><br/>
Den skriftlige stedprøve er en ITX-eksamen.
<br/>
Se vigtig information om ITX-stedprøver på Studieinformation under
punktet: Eksamen -&gt; Eksamensform og regler -&gt; Skriftlig
stedprøve (ITX-prøve)</dd><dt>Eksamensforudsætninger</dt><dd><p>Der er 5-7 obligatoriske øvelsesopgaver (som kan indeholde
programmeringsopgaver), under kurset, og alle foruden én skal
beståes for at være kvalificeret til eksamen.</p></dd><dt>Hjælpemidler</dt><dd>Skriftlige hjælpemidler tilladt 
<div><p>Skriftlige hjælpemidler inkluderer de elektroniske udgaver af
lærebøgerne, der bruges på kurset (tilgængelige via ITX). Noter kan
medbringes (digitale noter kan uploades til Digital Eksamen). Det
er ikke tilladt at medbringe lommeregnere, egne computere, tablets
eller andet elektronisk udstyr.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere.</div></dd><dt>Reeksamen</dt><dd><p>Reeksamen er 20 minutter mundtlig eksamen uden forberedelse i
kursets indhold. Ingen hjælpemidler tilladt.</p><p>Hvis indstillingskravet til eksamen ikke er opfyldt,
kan det opfyldes ved at aflevere og få godkendt de
skriftlige opgaver. Afleveringsdeadline er tre uger inden
reeksamen.</p><p> </p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 24-02-2025
https://kurser.ku.dk/course/ndak10005u/2024-2025,NDAK10005U Medical Image Analysis (MIA),Volume 2024/2025,MSc Programme in Computer Science MSc Programme in Physics,"Medical diagnosis, prognosis and quantification of progression is in general based on biomarkers. These may be blood or urine markers, but currently, imaging is taking over as a more indicative biomarker for many purposes. This course will give an introduction to medical image formation in the different scanning modalities: X-ray, CT, MR, fMRI, PET, US etc. We will continue with the underlying image analysis disciplines of segmentation, registration and end with specific machine learning applications in clinical practise. A key to achieving success in the medical image analysis is formal evaluation of methodologies, thus an introduction to performance characterisation will also be a central topic. We will use techniques from image analysis and real-world examples from the clinic. The course aims to provide sufficient background knowledge for doing master theses (specialer) as well as student projects within medical image analysis. The course is primarily aimed at students from computer science, physics and mathematics with an interest in applications to medical image analysis and related technologies.","The student will at the end of the course have: Knowledge of Physics of X-ray formation. Computed tomography. Magnetic Resonance Imaging. Functional MRI. Positron Emission Tomography. Single Photon Emission Tomography. Medical statistics. Segmentation/Pixel classification. Shape modelling and statistics. Rigid & Non-rigid registration + Multi-modal registration. Machine learning with medical data Applications in lung diseases. Applications in neurology. Skills in Explaining the basics of the underlying physics behind medical image acquisition techniques such as CT, MRI and PET. Explaining the role of medical image analysis in relation to detection and prognosis of pathologies and clinical investigations. Reading and implementing methods described in the scientific literature in the field of medical imaging. Finding and using existing tools within medical image analysis and assessing the quality of the output produced. Applying the implemented methods to medical images with the purpose of analysing a specific pathology. Competences in Analysing, creating and using pipelines of methods for the purpose of analysing medical images in a scientific context. Understanding the fundamental challenges in medical image analysis. Understanding the representation of images in a computer.",See Absalon,"The students are expected to have a mature and operational mathematical knowledge. Linear algebra, geometry, basic mathematical analysis, and basic statistics are mandatory disciplines. In the course, we will be using Python as the programming language, and programming skills in Python are highly recommended. Academic qualifications equivalent to a BSc degree are recommended.","Lectures, exercises, and assignments","{'Lectures': 32, 'Preparation': 78, 'Exercises': 16, 'Exam': 80, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 15 minutes (no
preparation time)</div></dd><dt>Type of assessment details</dt><dd>During the course, the students must hand in 4 written
assignments.
<br/>
The oral exam will take its outset in one of these assignments
chosen at random by the examiner but can contain questions about
the entire syllabus.
<br/><br/>
The student must hand in all 4 written assignments in order to
participate in the oral examination.</dd><dt>Aid</dt><dd>Only certain aids allowed 
<div><ul><li>For the oral examination only print outs of the student's
own hand-ins are permitted.</li><li>For programming tasks specifically, the use of GitHub Copilot
or similar AI-based programming tools is permitted.</li><li>For learning about topics, ChatGPT or similar Large Language
Models is also permitted.</li></ul><p>The finite list of allowed AI-tools will be announced in
Absalon.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>All assignments must be resubmitted no later than 3 weeks
before the re-exam date.</p><p> </p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK10005U,"7,5 ECTS",Full Degree Master,1 block,Block 1,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Melanie Ganz-Benjaminsen (4-6f697682486c7136737d366c73)'],Saved on the 14-02-2024
https://kurser.ku.dk/course/ndak10005u/2025-2026,NDAK10005U Medical Image Analysis (MIA),Volume 2025/2026,MSc Programme in Computer Science MSc Programme in Physics,"Medical diagnosis, prognosis and quantification of progression is in general based on biomarkers. These may be blood or urine markers, but currently, imaging is taking over as a more indicative biomarker for many purposes. This course will give an introduction to medical image formation in the different scanning modalities: X-ray, CT, MR, fMRI, PET, US etc. We will continue with the underlying image analysis disciplines of segmentation, registration and end with specific machine learning applications in clinical practise. A key to achieving success in the medical image analysis is formal evaluation of methodologies, thus an introduction to performance characterisation will also be a central topic. We will use techniques from image analysis and real-world examples from the clinic. The course aims to provide sufficient background knowledge for doing master theses (specialer) as well as student projects within medical image analysis. The course is primarily aimed at students from computer science, physics and mathematics with an interest in applications to medical image analysis and related technologies.","The student will at the end of the course have: Knowledge of Physics of X-ray formation. Computed tomography. Magnetic Resonance Imaging. Functional MRI. Positron Emission Tomography. Single Photon Emission Tomography. Medical statistics. Segmentation/Pixel classification. Shape modelling and statistics. Rigid & Non-rigid registration + Multi-modal registration. Machine learning with medical data Applications in lung diseases. Applications in neurology. Skills in Explaining the basics of the underlying physics behind medical image acquisition techniques such as CT, MRI and PET. Explaining the role of medical image analysis in relation to detection and prognosis of pathologies and clinical investigations. Reading and implementing methods described in the scientific literature in the field of medical imaging. Finding and using existing tools within medical image analysis and assessing the quality of the output produced. Applying the implemented methods to medical images with the purpose of analysing a specific pathology. Competences in Analysing, creating and using pipelines of methods for the purpose of analysing medical images in a scientific context. Understanding the fundamental challenges in medical image analysis. Understanding the representation of images in a computer.",See Absalon,"The students are expected to have a mature and operational mathematical knowledge. Linear algebra, geometry, basic mathematical analysis, and basic statistics are mandatory disciplines. In the course, we will be using Python as the programming language, and programming skills in Python are highly recommended. The student should also be familiar with LaTeX which is used for assignments. Academic qualifications equivalent to a BSc degree are recommended.","Lectures, exercises, and assignments in LaTeX.","{'Lectures': 32, 'Preparation': 78, 'Exercises': 16, 'Exam': 80, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 15 minutes (no
preparation time)</div></dd><dt>Type of assessment details</dt><dd>During the course, the students must hand in 4 written
assignments.
<br/>
The oral exam will take its outset in one of these assignments
chosen at random by the examiner but can contain questions about
the entire syllabus.
<br/><br/>
The student must hand in all 4 written assignments in order to
participate in the oral examination.</dd><dt>Aid</dt><dd>Only certain aids allowed (see description below) 
<div><ul><li>For the oral examination only print outs of the student's
own hand-ins are permitted.</li><li>For programming tasks specifically, the use of GitHub Copilot
or similar AI-based programming tools is permitted.
<br/>
 </li></ul><p>The finite list of allowed AI-tools will be announced in
Absalon.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>All assignments must be resubmitted no later than 3 weeks
before the re-exam date.</p><p> </p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK10005U,"7,5 ECTS",Full Degree Master,1 block,Block 1,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Melanie Ganz-Benjaminsen (4-6f697682486c7136737d366c73)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndab19004u/2025-2026,NDAB19004U Mikroøkonomi A (MikØkA),Årgang 2025/2026,Bacheloruddannelsen i datalogi-økonomi,"Kurset omfatter mikroøkonomisk teori om markedsfejl, beslutninger over tid og under usikkerhed og finansielle markeder samt generel ligevægt. Kurset omfatter også computerbaserede løsningsmetoder for optimeringsproblemer og modeller med tilknytning til disse områder.","Viden om Kursets fire hovedemner: En række markedsimperfektioner og hvordan disse påvirker optimalitet og markedsligevægt. Teori for beslutninger over tid og under usikkerhed. Basal teori om risikable aktiver og finansielle markeder. Generel ligevægtsteori. Færdigheder i at Ræsonnere i og analytisk håndtere økonomiske optimeringsproblemer og modeller som indgår i kurset. Løse for agentens optimale valg inden for de fire forskellige emner, herunder numerisk. Implementere og løse økonomiske modeller numerisk, herunder kalibrering af eventuelle parametre. Kompetencer til at Kritisk reflektere over rimeligheden af en models antagelser i en given kontekst. Anvende en formel økonomisk model analytisk og numerisk til at analysere en konkret beslutningssituation inden for fagets emneområder. Reflektere over afvigelser fra de “perfekte markedsbetingelser” og disses implikationer for optimal politik. Oversætte en analytisk model til numerisk implementering og løse den numerisk.","Se Absalon, når kurset er oprettet. Eksempelvis kunne følgende indgå i pensum: Hal R. Varian, Intermediate Microeconomics with Calculus, first edition.",Introduktion til Økonomi (ØkIntro) samt MatIntro.,3x2 timers forelæsninger og 2x2 timers øvelser per uge i 7 uger.,"{'Forelæsninger': 45, 'Forberedelse (anslået)': 81, 'Øvelser': 66, 'Eksamen': 14, 'I alt': 206}",Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende – klik her!Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig aflevering, 3 dage</div></dd><dt>Prøveformsdetaljer</dt><dd>Eksamen er en 3-dages tag-hjem eksamen med et omfang svarende
til 14 timer.
<br/>
Eksamen afholdes onsdag til lørdag i blokuge 8.</dd><dt>Eksamensforudsætninger</dt><dd><p>Der stilles 6-7 opgaver i løbet af kurset, hvoraf alle undtagen
en skal godkendes for at deltage i eksamen.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt</dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Mundtlig eksamen med 20 min. forberedelse og 30 min.
eksamination og bedømmelse.</p><p>Det er et krav for at deltage i reeksamen, at indstillingskravet
til ordinær eksamen er opnået. Indstillingskravet skal være opfyldt
senest tre uger inden reeksamensugen.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Den studerende skal på tilfredsstillende måde godtgøre at
vedkommende lever op til fagets
målbeskrivelse.</p></div></div>",,,,,,,,,,,,,Gemt den 24-02-2025
https://kurser.ku.dk/course/ndab19004u/2024-2025,NDAB19004U Mikroøkonomi A (MikØkA),Årgang 2024/2025,Bacheloruddannelsen i datalogi-økonomi,"Kurset omfatter mikroøkonomisk teori om markedsfejl, beslutninger over tid og under usikkerhed og finansielle markeder samt generel ligevægt. Kurset omfatter også computerbaserede løsningsmetoder for optimeringsproblemer og modeller med tilknytning til disse områder.","Viden om Kursets fire hovedemner: En række markedsimperfektioner og hvordan disse påvirker optimalitet og markedsligevægt. Teori for beslutninger over tid og under usikkerhed. Basal teori om risikable aktiver og finansielle markeder. Generel ligevægtsteori. Færdigheder i at Ræsonnere i og analytisk håndtere økonomiske optimeringsproblemer og modeller som indgår i kurset. Løse for agentens optimale valg inden for de fire forskellige emner, herunder numerisk. Implementere og løse økonomiske modeller numerisk, herunder kalibrering af eventuelle parametre. Kompetencer til at Kritisk reflektere over rimeligheden af en models antagelser i en given kontekst. Anvende en formel økonomisk model analytisk og numerisk til at analysere en konkret beslutningssituation inden for fagets emneområder. Reflektere over afvigelser fra de “perfekte markedsbetingelser” og disses implikationer for optimal politik. Oversætte en analytisk model til numerisk implementering og løse den numerisk.","Se Absalon, når kurset er oprettet. Eksempelvis kunne følgende indgå i pensum: Hal R. Varian, Intermediate Microeconomics with Calculus, first edition.",Introduktion til Økonomi (ØkIntro) samt MatIntro.,3x2 timers forelæsninger og 2x2 timers øvelser per uge i 7 uger.,"{'Forelæsninger': 45, 'Forberedelse (anslået)': 81, 'Øvelser': 66, 'Eksamen': 14, 'I alt': 206}",Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende – klik her!Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig aflevering, 3 dage</div></dd><dt>Prøveformsdetaljer</dt><dd>Eksamen er en 3-dages tag-hjem eksamen med et omfang svarende
til 14 timer.
<br/>
Eksamen afholdes onsdag til lørdag i blokuge 8.</dd><dt>Krav til indstilling til eksamen</dt><dd><p>Der stilles 6-7 opgaver i løbet af kurset, hvoraf alle undtagen
en skal godkendes for at deltage i eksamen.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt 
<div><p>Det er tilladt at anvende Large Language Models (LLM)/Large
Multimodal Models (LMM) – fx ChatGPT og GPT-4.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Mundtlig eksamen med 20 min. forberedelse og 30 min.
eksamination og bedømmelse.</p><p>Det er et krav for at deltage i reeksamen, at indstillingskravet
til ordinær eksamen er opnået. Indstillingskravet skal være opfyldt
senest tre uger inden reeksamensugen.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Den studerende skal på tilfredsstillende måde godtgøre at
vedkommende lever op til fagets
målbeskrivelse.</p></div></div>",,,,,,,,,,,,,Gemt den 15-02-2024
https://kurser.ku.dk/course/ndab20009u/2024-2025,NDAB20009U Mikroøkonomi B (MikØkB),Årgang 2024/2025,Bacheloruddannelsen i datalogi-økonomi,"Kurset omhandler grundlæggende spilteori og dets anvendelser i økonomiske modeller og forbereder desuden den studerende til at kunne fortsætte med videregående fag i emnet. Den studerende vil lære, hvordan økonomiske problemstillinger, der involverer strategiske beslutninger, kan modelleres ved hjælp af spilteoretiske modeller, samt at kunne løse visse af disse modeller. Kursets intention er at gøre den studerende i stand til at arbejde med moderne økonomisk teori inden for eksempelvis industriøkonomi, international økonomi, arbejdsmarkedsøkonomi, politisk økonomi og makroøkonomi. Et centralt fokus i kurset er at sætte numeriske løsningsmetoder i spil for at kunne arbejde med mere realistiske og virkelighedsnære modeller. Kurset er opdelt i fire dele: Statiske spil med fuldstændig information, Dynamiske spil med fuldstændig information, Statiske spil med ufuldstændig information, Dynamiske spil med ufuldstændig information Ved hver del vil typen af spil introduceres formelt matematisk og en række økonomiske eksempler vil blive gennemgået. I første del gennemgås statiske spil med fuldstændig information. Her introduceres løsningsbegreberne dominans og Nash-ligevægt introduceres og spørgsmålet om eksistens belyses. Der arbejdes både med ligevægte i rene og blandede strategier. Dernæst vil numeriske løsningsalgoritmer blive gennemgået. I anden del behandles dynamiske spil med fuldstændig information. Her introduceres desuden gentagne spil og spil med imperfekt information. Desuden gennemgås den relevante raffinering af Nash-ligevægten: den underspilsperfekte Nash-ligevægt. I tredje del introduceres statiske spil under ufuldstændig information, hvor den relevante raffinering af Nash-ligevægten er den Bayesianske Nash-ligevægt. Numeriske løsningsmetoder vil blive illustreret i anvendelser inden for auktionsteori og monopolistisk konkurrence. I den fjerde del af kurset introduceres dynamiske spil med ufuldstændig information. De studerende vil lære om sekventielle spil og om den Perfekte Bayesianske Ligevægt og se den anvendt i modeller for asymmetrisk information såsom signaleringsspil, fx Spence-modellen for jobmarkedet.","Viden om For hver af de følgende fire typer af spil at kende til definition af spillet, ligevægtsbegreber, teori og nævneværdige eksempler: Statiske spil med fuldstændig information Dynamiske spil med fuldstændig information Statiske spil med ufuldstændig information Dynamiske spil med ufuldstændig information Færdigheder til at Løse for en eksplicit ligevægt i et givet spil analytisk, Forklare de relevante skridt i løsningen samt fortolke løsningen, Løse udvalgte spil numerisk, særligt statiske spil såsom auktioner og eventuelt under inddragelse af data Benytte relevant ligevægts-raffinering Kompetencer til at Analysere og forstå en konkret strategisk problemstilling i virkeligheden spilteoretisk Vurdere og diskutere realismen i en models underliggende antagelser for en konkret situation Implementere realistiske økonomiske modeller numerisk",Se Absalon for kursuslitteratur.,Mikroøkonomi A (MikØkA) Numeriske Metoder (NuMe) Økonometri B (ØkB),3x2 timers forelæsninger og 2x2 timers øvelser per uge i 7 uger.,"{'Forelæsninger': 42, 'Forberedelse (anslået)': 116, 'Teoretiske øvelser': 28, 'Eksamen': 20, 'I alt': 206}",Mundtlig Kollektiv Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig aflevering, 48 timer</div></dd><dt>Prøveformsdetaljer</dt><dd>Eksamen er en 48-timers individuel hjemmeopgave.</dd><dt>Krav til indstilling til eksamen</dt><dd><p>To obligatoriske afleveringer skal afleveres og godkendes. Disse
opgaver må udarbejdes i grupper.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt 
<div><p>Det er tilladt at anvende Large Language Models (LLM)/Large
Multimodal Models (LMM) – fx ChatGPT og GPT-4.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Reeksamen består af to dele:</p><ol><li>(Gen-)aflevering af eksamensopgaven</li><li>Mundtlig eksamination (30 minutter uden forberedelse) i den
afleverede eksamensopgave</li></ol><p>Hvis den studerende ikke er kvalificeret til ordinær eksamen kan
kvalifikation til reeksamen opnås ved aflevering og godkendelse af
de obligatoriske opgaver senest to uger før
reeksamensugen. </p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Den studerende skal på tilfredsstillende måde godtgøre at
han/hun lever op til fagets
målbeskrivelse.</p></div></div>",,,,,,,,,,,,,Gemt den 14-02-2024
https://kurser.ku.dk/course/ndak16004u/2024-2025,NDAK16004U Mobile Computing (MC),Volume 2024/2025,MSc Programme in Computer Science,"The course gives an overview of mobile, ubiquitous, and wearable computing interfaces, including commercial devices such as mobile phones, smart watches, augmented reality glasses, smart speakers and other home devices, as well as research interfaces such as public displays, smart jewelry, or body-based user interfaces. The course sheds light on two fundamental aspects of mobile computing: (1) the technological foundations of mobile computing interfaces; and (2) the user interface requirements for such novel computing interfaces.","The course contains advanced material on both technological foundations and interaction styles on mobile interfaces. After taking this class, you will be able to exhibit… Knowledge of Challenges particular to mobile, wearable, and ubiquitous user interfaces. Current research aimed at solving those challenges. Skills in Building prototypes of software and/or hardware to solve challenges in mobile, wearable, and ubiquitous computing. Designing and performing evaluations of prototypes. Competences in Designing applications to solve a range of interaction challenges for mobile, wearable, and ubiquitous devices and scenarios. Selecting appropriate measures for evaluating such applications.",See Absalon for a list of selected scientific papers and book chapters.,"It is strongly suggested that students have participated in a fundamental Human-Computer Interaction (HCI) course, e.g., Interaction Design. Advanced Topics in Human-Centered Computing (ATHCC) is also relevant. Academic qualifications equivalent to a BSc degree is recommended.","Lectures will alternate between technical foundations and user interface challenges. During some of the lectures, students will give presentations on topics related to class, and their progress on their projects (developing and evaluating a mobile/​wearable/​ubiquitous device prototype).","{'Lectures': 24, 'Preparation': 32, 'Practical exercises': 32, 'Project work': 100, 'Exam': 18, 'Total': 206}",Oral Collective Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, during course</div><div>On-site written exam, 4 hours under invigilation</div></dd><dt>Type of assessment details</dt><dd>Specifically, the exam consists of two elements:
<br/><br/>
1. A group project developed during the course and documented with
a report wherein the individual contributions are stated (60%)
(written assignment)
<br/>
2. A 4-hour written exam (40%) (written examination under
invigilation)
<br/><br/>
The project is 60% of the grade and the written examination is the
remaining 40%. However, both elements of the exam must be passed to
pass the exam, i.e. each element must achieve at least the grade
02.
<br/><br/>
It is not possible to reuse elements of the exam at a later exam.
It is however possible to resubmit a revised project report.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as ordinary exam.</p><p>For the re-exam the student must submit a new report
or resubmit an edited version of the group report no later than
three weeks before the re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>In order to earn the grade 12, students must demonstrate the
knowledge, skills and competences described in the Learning
Outcome.</p></div></div>",English,NDAK16004U,"7,5 ECTS",Full Degree Master,1 block,Block 4,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Daniel Lee Ashbrook (3-66637042666b306d7730666d)'],Saved on the 14-02-2024
https://kurser.ku.dk/course/ndab20009u/2025-2026,NDAB20009U Mikroøkonomi B (MikØkB),Årgang 2025/2026,Bacheloruddannelsen i datalogi-økonomi,"Kurset omhandler grundlæggende spilteori og dets anvendelser i økonomiske modeller og forbereder desuden den studerende til at kunne fortsætte med videregående fag i emnet. Den studerende vil lære, hvordan økonomiske problemstillinger, der involverer strategiske beslutninger, kan modelleres ved hjælp af spilteoretiske modeller, samt at kunne løse visse af disse modeller. Kursets intention er at gøre den studerende i stand til at arbejde med moderne økonomisk teori inden for eksempelvis industriøkonomi, international økonomi, arbejdsmarkedsøkonomi, politisk økonomi og makroøkonomi. Et centralt fokus i kurset er at sætte numeriske løsningsmetoder i spil for at kunne arbejde med mere realistiske og virkelighedsnære modeller. Kurset er opdelt i fire dele: Statiske spil med fuldstændig information, Dynamiske spil med fuldstændig information, Statiske spil med ufuldstændig information, Dynamiske spil med ufuldstændig information Ved hver del vil typen af spil introduceres formelt matematisk og en række økonomiske eksempler vil blive gennemgået. I første del gennemgås statiske spil med fuldstændig information. Her introduceres løsningsbegreberne dominans og Nash-ligevægt introduceres og spørgsmålet om eksistens belyses. Der arbejdes både med ligevægte i rene og blandede strategier. Dernæst vil numeriske løsningsalgoritmer blive gennemgået. I anden del behandles dynamiske spil med fuldstændig information. Her introduceres desuden gentagne spil og spil med imperfekt information. Desuden gennemgås den relevante raffinering af Nash-ligevægten: den underspilsperfekte Nash-ligevægt. I tredje del introduceres statiske spil under ufuldstændig information, hvor den relevante raffinering af Nash-ligevægten er den Bayesianske Nash-ligevægt. Numeriske løsningsmetoder vil blive illustreret i anvendelser inden for auktionsteori og monopolistisk konkurrence. I den fjerde del af kurset introduceres dynamiske spil med ufuldstændig information. De studerende vil lære om sekventielle spil og om den Perfekte Bayesianske Ligevægt og se den anvendt i modeller for asymmetrisk information såsom signaleringsspil, fx Spence-modellen for jobmarkedet.","Viden om For hver af de følgende fire typer af spil at kende til definition af spillet, ligevægtsbegreber, teori og nævneværdige eksempler: Statiske spil med fuldstændig information Dynamiske spil med fuldstændig information Statiske spil med ufuldstændig information Dynamiske spil med ufuldstændig information Færdigheder til at Løse for en eksplicit ligevægt i et givet spil analytisk, Forklare de relevante skridt i løsningen samt fortolke løsningen, Løse udvalgte spil numerisk, særligt statiske spil såsom auktioner og eventuelt under inddragelse af data Benytte relevant ligevægts-raffinering Kompetencer til at Analysere og forstå en konkret strategisk problemstilling i virkeligheden spilteoretisk Vurdere og diskutere realismen i en models underliggende antagelser for en konkret situation Implementere realistiske økonomiske modeller numerisk",Se Absalon for kursuslitteratur.,Mikroøkonomi A (MikØkA) Numeriske Metoder (NuMe) Økonometri B (ØkB),3x2 timers forelæsninger og 2x2 timers øvelser per uge i 7 uger.,"{'Forelæsninger': 42, 'Forberedelse (anslået)': 116, 'Teoretiske øvelser': 28, 'Eksamen': 20, 'I alt': 206}",Mundtlig Kollektiv Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig aflevering, 48 timer</div></dd><dt>Prøveformsdetaljer</dt><dd>Eksamen er en 48-timers individuel hjemmeopgave.</dd><dt>Eksamensforudsætninger</dt><dd><p>To obligatoriske afleveringer skal afleveres og godkendes. Disse
opgaver må udarbejdes i grupper.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt</dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Reeksamen består af to dele:</p><ol><li>(Gen-)aflevering af eksamensopgaven</li><li>Mundtlig eksamination (30 minutter uden forberedelse) i den
afleverede eksamensopgave</li></ol><p>Hvis den studerende ikke er kvalificeret til ordinær eksamen kan
kvalifikation til reeksamen opnås ved aflevering og godkendelse af
de obligatoriske opgaver senest to uger før
reeksamensugen. </p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Den studerende skal på tilfredsstillende måde godtgøre at
han/hun lever op til fagets
målbeskrivelse.</p></div></div>",,,,,,,,,,,,,Gemt den 24-02-2025
https://kurser.ku.dk/course/ndak18000u/2024-2025,NDAK18000U Natural Language Processing (NLP),Volume 2024/2025,,"Have you ever wondered how systems like ChatGPT, which can generate human-like text, are built? Are you intrigued by the idea of creating a system that can process, understand, or generate text automatically? Are you interested in building applications that can translate between languages, answer questions, or recognise named entities in text? If so, this course is designed for you. This course provides an introduction to the fundamentals of Natural Language Processing (NLP), which involves computational models of language and their applications to text. As language is the core of human intelligence, NLP holds a pivotal role in Artificial Intelligence research and development. We will integrate machine learning (ML), including its fundamental formalisms and algorithms, with a robust hands-on experience. This means you will gain practical skills in implementing these methods for real-world NLP problems. The course utilises interactive lecture materials constructed with Jupyter notebooks. Course materials from last year are publicly available here . The course will closely follow the structure of the previous year's iteration. If you're unsure about the course prerequisites or content, please review these materials. The course covers the following topics: • NLP tasks: tokenisation, text classification, language modelling, named entity recognition, part-of-speech tagging, parsing, information extraction, machine translation, question answering • Methods: log-linear models, structured prediction, conditional random fields, beam search, and neural network models such as transformers (including representation learning, pre-training, transfer learning and interpretability methods) • Implementations: relationship between NLP tasks, efficient implementations, and the use of modern NLP libraries such as Hugging Face's Transformers Throughout the course, we will also explore the themes of discriminative and generative learning and various ways of obtaining supervision for training statistical NLP models. An important aspect of our discussions will be the application of these techniques in multilingual settings, understanding how NLP can be adapted and applied to a variety of languages beyond English.","Knowledge of core NLP tasks (e.g. machine translation, question answering, information extraction) methods (e.g. classification, structured prediction, representation learning) implementations (e.g. relationship between NLP tasks, efficient implementations) Skills to identify the different kinds of NLP tasks choose the correct algorithm for a given problem situation implement core algorithms in Python using PyTorch assess the most appropriate algorithms to solve a given NLP problem distinguish and evaluate the advantages of different approaches to the same task Competences to decompose natural language tasks into manageable components evaluate systems quantitatively and qualitatively apply the learned skills in a wider context to areas that face similar challenges, e.g., data science, social science, or bioinformatics critically assess the limitations and use cases of language models, and apply this knowledge to the development and deployment of these models in real-world scenarios",See Absalon for a list of course literature.,"Knowledge of machine learning (probability theory, linear algebra, classification, neural networks) and programming (Python) is required, either through formal education or self-study. No prior knowledge of natural language processing or linguistics is required. Relevant machine learning competencies can be obtained through one of the following courses: - NDAK22002U Advanced Deep Learning (ADL) or Deep Learning (DL) - NDAK22000U Machine Learning A (MLA) - NDAK22001U Machine Learning B (MLB) - NDAK16003U Introduction to Data Science (IDS) Academic qualifications equivalent to a BSc degree are recommended. If you are in doubt about whether you meet the course prerequisites, you can check the course materials from last year here: https:/​/​github.com/​coastalcph/​nlp-course .","The format of the class consists of lectures (possibly including guest lectures), exercises, and project work.","{'Lectures': 28, 'Preparation': 14, 'Theory exercises': 57, 'Practical exercises': 57, 'Project work': 50, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>On-site written exam, 1.5 hours under invigilation</div><div>Written assignment, During course</div></dd><dt>Type of assessment details</dt><dd>The exam consists of two parts. Each part is assessed and
weighted individually, and the final grade is determined based on
this:
<br/><br/>
1. A group project weighted as 50% of the final grade, written
during the course (group members either hand-in individual reports
or explicitly indicate their contribution in a joint group report).
<br/><br/>
2. A 1.5 hours written exam weighted as 50% of the final
grade.</dd><dt>Aid</dt><dd>All aids allowed 
<div><p>The use of AI assistance powered by Large Language Models
(LLM)/Large Multimodal Models (LMM) – such as ChatGPT and GPT-4 –
is permitted for the written assignment (group project), under
conditions that will be specified during the course, but not for
the written exam.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam consists of two parts:
<br/><br/>
1) Resubmission of (possibly revised) final project. The revised
project has to be handed in no later than 2 weeks before the
re-exam week.
<br/>
2) A 30 minutes individual oral examination without
preparation, based on submitted project and full syllabus.</p><p>The parts are not weighted, and an overall assessment is
provided as the final grade.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p><p> </p></div></div>",English,NDAK18000U,"7,5 ECTS",Full Degree Master,1 block,Block 1,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],"['Daniel Hershcovich (2-696d45696e33707a336970)', 'Anders Søgaard (8-7672686a6464756743676c316e7831676e)']",Saved on the 14-02-2024
https://kurser.ku.dk/course/ndab16012u/2025-2026,NDAB16012U Modelling and Analysis of Data (MAD),Volume 2025/2026,BSc Programme in Computer Science BSc Programme in Physics,"The purpose of the course is to provide a basic and broad introduction to the representation, analysis, and processing of sampled data. The course will introduce the student to statistical analysis, mathematical modelling, machine learning and visualisation for experimental data. Examples will be taken from real-world problems, such as analysis of internet traffic, language technology, digital sound and image processing, etc.","After the course, the student should have the following knowledge, skills, and competences. Knowledge of Descriptive statistical methods Likelihood functions and maximum likelihood estimation Least-squares methods, linear regression Simple models for classification Presentation and validation of machine learning results Multivariate statistics Presentation of analysis results, including visualisation by simple plotting Introduction to programming tools for data analysis The student will also become familiar with the analytical derivation of algorithms for data analysis Skills to Apply the least-squares method for linear modelling and estimation. Analyse sampled data by appropriate mathematical modelling methods. Describe certain useful multivariate methods and their use Visualise low- and high-dimensional data with simple plots and images. Implement simple data analysis and modelling methods. Perform the analysis of experimental data using the methods learnt during the course and evaluate the results. Competences in Building and using simple statistical models, assessing their relevance for solving concrete scientific problems, and quantifying uncertainty about the drawn conclusions. Performing basic data analysis tasks which include modelling, visualisation, and interpretation of the results. Assessing the limitations of the used methods. Applying calculus tools, such as partial derivatives, gradients, and integrals.",See Absalon when the course is set up.,"Basic knowledge of programming as obtained on PoP or similar. Skills in computational thinking as obtained on PoP, DMA, LinAlgDat, and MASD or similar. Mathematical knowledge equivalent to those obtained in the courses DMA, LinAlgDat, and MASD or similar.","Lectures, excercises and mandatory assignments.","{'Lectures': 36, 'Class Instruction': 28, 'Preparation': 42, 'Exercises': 77, 'Exam': 23, 'Total': 206}",Written Collective Continuous feedback during the course of the semester There will be written feedback for the weekly assignments (comments via Absalon).,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, 7 days</div></dd><dt>Examination prerequisites</dt><dd><p>4-6 mandatory individual assignments written during the
course, which may include programming tasks. All but one of these
must be passed in order to be qualified for the exam.</p></dd><dt>Aid</dt><dd>All aids allowed except Generative AI</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Multiple internal examiners.</div></dd><dt>Re-exam</dt><dd><p>The re-exam is a 20 minutes oral examination without
preparation in the course curriculum. No aids allowed.</p><p>If the student is not qualified for the exam, qualification can
be achieved by submitting and approval of equivalent written
assignments or course assignments that has not previously been
approved. The assignments must be submitted two weeks prior to the
re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAB16012U,"7,5 ECTS",Bachelor,1 block,Block 2,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Bulat Ibragimov (5-72857c71845074793e7b853e747b)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndab16012u/2024-2025,NDAB16012U Modelling and Analysis of Data (MAD),Volume 2024/2025,BSc Programme in Computer Science BSc Programme in Physics,"The purpose of the course is to provide a basic and broad introduction to the representation, analysis, and processing of sampled data. The course will introduce the student to statistical analysis, mathematical modelling, machine learning and visualisation for experimental data. Examples will be taken from real-world problems, such as analysis of internet traffic, language technology, digital sound and image processing, etc.","After the course, the student should have the following knowledge, skills, and competences. Knowledge of Descriptive statistical methods Likelihood functions and maximum likelihood estimation Least-squares methods, linear regression Simple models for classification Presentation and validation of machine learning results Multivariate statistics Presentation of analysis results, including visualisation by simple plotting Introduction to programming tools for data analysis The student will also become familiar with the analytical derivation of algorithms for data analysis Skills to Apply the least-squares method for linear modelling and estimation. Analyse sampled data by appropriate mathematical modelling methods. Describe certain useful multivariate methods and their use Visualise low- and high-dimensional data with simple plots and images. Implement simple data analysis and modelling methods. Perform the analysis of experimental data using the methods learnt during the course and evaluate the results. Competences in Building and using simple statistical models, assessing their relevance for solving concrete scientific problems, and quantifying uncertainty about the drawn conclusions. Performing basic data analysis tasks which include modelling, visualisation, and interpretation of the results. Assessing the limitations of the used methods. Applying calculus tools, such as partial derivatives, gradients, and integrals.",See Absalon when the course is set up.,"Basic knowledge of programming as obtained on PoP or similar. Skills in computational thinking as obtained on PoP, DMA, LinAlgDat, and MASD or similar. Mathematical knowledge equivalent to those obtained in the courses DMA, LinAlgDat, and MASD or similar.","Lectures, excercises and mandatory assignments.","{'Lectures': 36, 'Class Instruction': 28, 'Preparation': 42, 'Exercises': 77, 'Exam': 23, 'Total': 206}",Written Collective Continuous feedback during the course of the semester There will be written feedback for the weekly assignments (comments via Absalon).,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, 7 days</div></dd><dt>Exam registration requirements</dt><dd><p>4-6 mandatory individual assignments written during the
course, which may include programming tasks. All but one of these
must be passed in order to be qualified for the exam.</p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Multiple internal examiners.</div></dd><dt>Re-exam</dt><dd><p>The re-exam is a 20 minutes oral examination without
preparation in the course curriculum. No aids allowed.</p><p>If the student is not qualified for the exam, qualification can
be achieved by submitting and approval of equivalent written
assignments or course assignments that has not previously been
approved. The assignments must be submitted two weeks prior to the
re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAB16012U,"7,5 ECTS",Bachelor,1 block,Block 2,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Bulat Ibragimov (5-64776e637642666b306d7730666d)'],Saved on the 16-02-2024
https://kurser.ku.dk/course/ndab22009u/2024-2025,NDAB22009U Numerical Methods (NuMe),Volume 2024/2025,BSc Programme in Computer Science and Economics,"Numerical methods provide the foundation for working with computer models for solving economic problems. In the course, students will be introduced to methods from numerical analysis and applied mathematics, which are often used to solve economic real-life problems. The course includes both theoretical and practical components. The course covers the most basic numerical methods, including numerical optimization, methods for solving non-linear equation systems, approximation of functions, interpolation methods, numerical integration, and differentiation. Likewise, students are introduced to a few selected advanced topics such as Monte Carlo methods. Examples are used throughout the course which shows how numerical methods can be used for industrial task optimization, stock market analysis, job search, etc. Students will be introduced to a high-level programming language such as Python and will be asked to implement a selection of the numerical methods on Python.","Knowledge of • Numerical Optimization, • Non-linear equation systems, • Approximation, • Differentiation and integration, • Monte Carlo simulation. Skills to • Explain how optimization problems and non-linear equation systems can be solved using numerical methods, • Explain how numerical methods are used for approximation of functions, differentiation and integration, • Implement the numerical methods in a (general purpose) programming language and check their correctness. Competences in • Working with open tasks where some data is missing, • Explaining what distinguishes ""exact solutions"" from ""numerical approximation"", • Using numerical methods to solve simple models within, for example, economics.",,"1. Programming corresponding to the course Programming and problem solving (PoP) 2. Linear algebra corresponding to Linear algebra for computer scientists (LinAlgDat). 3. Mathematical analysis corresponding to one of the courses Introduction to mathematics (MatIntroNat) or Mathematical analysis and probability theory in computer science (MASD). 4. Probability Calculation and Statistics equivalent to Basic Statistics and Probability Calculation (GSS), Probability Calculation and Statistics (SS) or Modeling and Analysis of Data (MAD) plus Mathematical Analysis and Probability Theory in Computer Science (MASD).",Lectures and exercise classes.,"{'Lectures': 28, 'Preparation': 67, 'Exercises': 110, 'Exam': 1, 'Total': 206}",Oral Individual Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment based on 6 written submissions and
related programming tasks.
<br/>
The final grade is based on an overall assessment of the
submissions.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Internal assessment.</div></dd><dt>Re-exam</dt><dd><p>The re-exam consists of two parts:</p><p>1) handing in the 6 written submissions and related programming
tasks. PLease note clearly what revisions have been made.
<br/>
2) an oral 15 min exam without preparation.</p><p>The final grade is based on an overall assessment.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAB22009U,"7,5 ECTS",Bachelor,1 block,Block 1,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Bulat Ibragimov (5-64776e637642666b306d7730666d)'],Saved on the 16-02-2024
https://kurser.ku.dk/course/ndak18000u/2025-2026,NDAK18000U Natural Language Processing (NLP),Volume 2025/2026,,"Have you ever wondered how systems like ChatGPT, which can generate human-like text, are built? Are you intrigued by the idea of creating a system that can process, understand, or generate text automatically? Are you interested in building applications that can translate between languages, answer questions, or recognise named entities in text? If so, this course is designed for you. This course provides an introduction to the fundamentals of Natural Language Processing (NLP), which involves computational models of language and their applications to text. As language is the core of human intelligence, NLP holds a pivotal role in Artificial Intelligence research and development. We will integrate machine learning (ML), including its fundamental formalisms and algorithms, with a robust hands-on experience. This means you will gain practical skills in implementing these methods for real-world NLP problems. The course utilises interactive lecture materials constructed with Jupyter notebooks. Course materials from last year are publicly available here . The course will closely follow the structure of the previous year's iteration. If you're unsure about the course prerequisites or content, please review these materials. The course covers the following topics: NLP tasks: tokenisation, text classification, language modelling, named entity recognition, part-of-speech tagging, parsing, information extraction, machine translation, question answering Methods: log-linear models, structured prediction, and neural network models such as recurrent neural networks and transformers, including representation learning, pre-training, transfer learning and interpretability methods Implementations: relationship between NLP tasks, efficient implementations, and the use of modern NLP libraries such as Hugging Face's Transformers Throughout the course, we will also explore the themes of discriminative and generative learning and various ways of obtaining supervision for training statistical NLP models. An important aspect of our discussions will be the application of these techniques in multilingual settings, understanding how NLP can be adapted and applied to a variety of languages beyond English.","Knowledge of core NLP tasks (e.g. machine translation, question answering, information extraction) methods (e.g. classification, structured prediction, representation learning) implementations (e.g. relationship between NLP tasks, efficient implementations) Skills to identify the different kinds of NLP tasks choose the correct algorithm for a given problem situation implement core algorithms in Python using PyTorch assess the most appropriate algorithms to solve a given NLP problem distinguish and evaluate the advantages of different approaches to the same task Competences to decompose natural language processing tasks into manageable components evaluate systems quantitatively and qualitatively apply the learned skills in a wider context to areas that face similar challenges, e.g., data science, social science, or bioinformatics critically assess the limitations and use cases of language models, and apply this knowledge to the development and deployment of these models in real-world scenarios",See Absalon for a list of course literature.,"Knowledge of machine learning (probability theory, linear algebra, classification, neural networks) and programming (Python) is required, either through formal education or self-study. No prior knowledge of natural language processing or linguistics is required. Relevant machine learning competencies can be obtained through one of the following courses: - NDAK22002U Advanced Deep Learning (ADL) or Deep Learning (DL) - NDAK22000U Machine Learning A (MLA) - NDAK22001U Machine Learning B (MLB) - NDAK16003U Introduction to Data Science (IDS) Academic qualifications equivalent to a BSc degree are recommended. If you are in doubt about whether you meet the course prerequisites, you can check the course materials from last year here: https:/​/​github.com/​coastalcph/​nlp-course .","The format of the class consists of lectures (possibly including guest lectures), exercises, and project work.","{'Lectures': 28, 'Preparation': 14, 'Theory exercises': 57, 'Practical exercises': 57, 'Project work': 50, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, Ongoing preparation throughout the course
with submission at the end of the course.</div></dd><dt>Type of assessment details</dt><dd>A group project report, in which each student’s individual
contribution is clearly specified, written during the course.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam is a 30-minute individual oral
examination without preparation, based on the full
syllabus. No aids allowed.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p><p> </p></div></div>",English,NDAK18000U,"7,5 ECTS",Full Degree Master,1 block,Block 1,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Daniel Hershcovich (2-696d45696e33707a336970)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndab22009u/2025-2026,NDAB22009U Numerical Methods (NuMe),Volume 2025/2026,BSc Programme in Computer Science and Economics,"Numerical methods provide the foundation for working with computer models for solving economic problems. In the course, students will be introduced to methods from numerical analysis and applied mathematics, which are often used to solve economic real-life problems. The course includes both theoretical and practical components. The course covers the most basic numerical methods, including numerical optimization, methods for solving non-linear equation systems, approximation of functions, interpolation methods, numerical integration, and differentiation. Likewise, students are introduced to a few selected advanced topics such as Monte Carlo methods. Examples are used throughout the course which shows how numerical methods can be used for industrial task optimization, stock market analysis, job search, etc. Students will be introduced to a high-level programming language such as Python and will be asked to implement a selection of the numerical methods on Python.","Knowledge of Numerical Optimization, Non-linear equation systems, Approximation, Differentiation and integration, Monte Carlo simulation. Skills to Explain how optimization problems and non-linear equation systems can be solved using numerical methods, Explain how numerical methods are used for approximation of functions, differentiation and integration, Implement the numerical methods in a (general purpose) programming language and check their correctness. Competences in Working with open tasks where some data is missing, Explaining what distinguishes ""exact solutions"" from ""numerical approximation"", Using numerical methods to solve simple models within, for example, economics.",,"1. Programming corresponding to the course Programming and problem solving (PoP) 2. Linear algebra corresponding to Linear algebra for computer scientists (LinAlgDat). 3. Mathematical analysis corresponding to one of the courses Introduction to mathematics (MatIntroNat) or Mathematical analysis and probability theory in computer science (MASD). 4. Probability Calculation and Statistics equivalent to Basic Statistics and Probability Calculation (GSS), Probability Calculation and Statistics (SS) or Modeling and Analysis of Data (MAD) plus Mathematical Analysis and Probability Theory in Computer Science (MASD).",Lectures and exercise classes.,"{'Lectures': 28, 'Preparation': 67, 'Exercises': 75, 'Exam': 36, 'Total': 206}",Oral Individual Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment based on 6 written submissions and
related programming tasks.
<br/>
The final grade is based on an overall assessment of the
submissions.</dd><dt>Aid</dt><dd>All aids allowed except Generative AI</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Internal assessment.</div></dd><dt>Re-exam</dt><dd><p>The re-exam consists of two parts:</p><p>1) handing in the 6 written submissions and related programming
tasks. PLease note clearly what revisions have been made.
<br/>
2) an oral 15 min exam without preparation.</p><p>The final grade is based on an overall assessment.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAB22009U,"7,5 ECTS",Bachelor,1 block,Block 1,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Bulat Ibragimov (5-65786f647743676c316e7831676e)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndaa09009u/2025-2026,NDAA09009U Numerical Optimisation (NO),Volume 2025/2026,MSc Programme in Bioinformatics MSc Programme in Computer Science MSc Programme in Physics MSc Programme in Statistics MSc Programme in Mathematics-Economics MSc Programme in Actuarial Mathematics,"Numerical optimisation is a useful computer tool in many disciplines like image processing, computer vision, machine learning, bioinformatics, eScience, scientific computing and computational physics, computer animation and many more. This course will build up a toolbox of numerical optimisation methods which the student can use when building solutions in his or her future studies. This course teaches the basic theory of numerical optimisation methods. The focus is on deep understanding, and how the methods covered during the course works. Both on a theoretical level that goes into deriving the math but also on an implementational level focusing on computer science. A special focus of the course lies on empirical evaluation of the different methods and communication of the results in report form. As a result the course is very practical and there will be weekly group-based programming exercises. During the course, we will start from the simple gradient descent algorithm and introduce more ideas to improve on this simple approach to create algorithms that are fast and reliable. The topics covered during the course are: First-order optimality conditions, Karush-Kuhn-Tucker Conditions, Taylors Theorem, Mean Value Theorem. Nonlinear Equation Solving: Newtons Method, etc. Linear Search Methods: Newton Methods, Quasi-Newton Methods, etc. Trust Region Methods And many more...",Knowledge of The theory of convex and non-convex optimisation The theory of Newton and Quasi-Newton Methods The theory of Trust Region Methods First-order optimality conditions (KKT conditions) Skills in Applying numerical optimisation problems to solve unconstrained and constrained minimisation problems and nonlinear root search problems Implementing and testing numerical optimisation methods Competences to Evaluate which numerical optimisation methods are best suited for solving a given optimisation problem Understand the implications of theoretical theorems and being able to analyse real problems on that basis,See Absalon,"The programming language used in the course is Python. It is expected that students know how to install and use Python, Numpy, Scipy and Matplotlib by themselves. It is expected that students know what matrices and vectors are and that students are able to differentiate vector functions. Theorems like fundamental theorem of calculus, mean value theorem or Taylor's theorem will be touched upon during the course. The inquisitive students may find more in depth knowledge from Chapters 2, 3, 5, 6 and 13 of R. A. Adams, Calculus, 3rd ed. Addison Wesley. Academic qualifications equivalent to a BSc degree is recommended.",Mixture of study groups and project group work with hand-ins and small lectures. The focus is on flipped-classroom teaching.,"{'Lectures': 10, 'Preparation': 40, 'Exercises': 72, 'Project work': 84, 'Total': 206}",Written Oral Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>The assessment is based on 5-7 written group assignments (with
individual contributions noted). All students must hand in all
assignments individually so that the assignments can be
individually approved. The final grade is an unweighted average of
the five best assignments.</dd><dt>Aid</dt><dd>All aids allowed except Generative AI</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam is a resubmission of the written
assignments and a 15-minute oral examination without
preparation.</p><p>The assignments must be submitted no later than two weeks before
the re-exam date i.e. the oral examination.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAA09009U,"7,5 ECTS",Full Degree Master,1 block,Block 3,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Oswin Krause (12-75797d6f74347178677b796b466a6f34717b346a71)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndaa09009u/2024-2025,NDAA09009U Numerical Optimisation (NO),Volume 2024/2025,MSc Programme in Bioinformatics MSc Programme in Computer Science MSc Programme in Physics MSc Programme in Statistics MSc Programme in Mathematics-Economics,"Numerical optimisation is a useful computer tool in many disciplines like image processing, computer vision, machine learning, bioinformatics, eScience, scientific computing and computational physics, computer animation and many more. This course will build up a toolbox of numerical optimisation methods which the student can use when building solutions in his or her future studies. This course teaches the basic theory of numerical optimisation methods. The focus is on deep understanding, and how the methods covered during the course works. Both on a theoretical level that goes into deriving the math but also on an implementational level focusing on computer science. A special focus of the course lies on empirical evaluation of the different methods and communication of the results in report form. As a result the course is very practical and there will be weekly group-based programming exercises. During the course, we will start from the simple gradient descent algorithm and introduce more ideas to improve on this simple approach to create algorithms that are fast and reliable. The topics covered during the course are: First-order optimality conditions, Karush-Kuhn-Tucker Conditions, Taylors Theorem, Mean Value Theorem. Nonlinear Equation Solving: Newtons Method, etc. Linear Search Methods: Newton Methods, Quasi-Newton Methods, etc. Trust Region Methods And many more...",Knowledge of The theory of convex and non-convex optimisation The theory of Newton and Quasi-Newton Methods The theory of Trust Region Methods First-order optimality conditions (KKT conditions) Skills in Applying numerical optimisation problems to solve unconstrained and constrained minimisation problems and nonlinear root search problems Implementing and testing numerical optimisation methods Competences to Evaluate which numerical optimisation methods are best suited for solving a given optimisation problem Understand the implications of theoretical theorems and being able to analyse real problems on that basis,See Absalon,"The programming language used in the course is Python. It is expected that students know how to install and use Python, Numpy, Scipy and Matplotlib by themselves. It is expected that students know what matrices and vectors are and that students are able to differentiate vector functions. Theorems like fundamental theorem of calculus, mean value theorem or Taylor's theorem will be touched upon during the course. The inquisitive students may find more in depth knowledge from Chapters 2, 3, 5, 6 and 13 of R. A. Adams, Calculus, 3rd ed. Addison Wesley. Academic qualifications equivalent to a BSc degree is recommended.",Mixture of study groups and project group work with hand-ins and small lectures. The focus is on flipped-classroom teaching.,"{'Lectures': 10, 'Preparation': 40, 'Exercises': 72, 'Project work': 84, 'Total': 206}",Written Oral Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>The assessment is based on 5-7 written group assignments (with
individual contributions noted). All students must hand in all
assignments individually so that the assignments can be
individually approved. The final grade is an unweighted average of
the five best assignments.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam is a resubmission of the written
assignments and a 15-minute oral examination without
preparation.</p><p>The assignments must be submitted no later than two weeks before
the re-exam date i.e. the oral examination.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAA09009U,"7,5 ECTS",Full Degree Master,1 block,Block 3,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Oswin Krause (12-787c80727737747b6a7e7c6e496d7237747e376d74)'],Saved on the 14-02-2024
https://kurser.ku.dk/course/ndak21003u/2024-2025,NDAK21003U Online and Reinforcement Learning (OReL),Volume 2024/2025,MSc Programme in Computer Science MSc Programme in Statistics MSc Programme in Mathematics-Economics,"In the classical machine learning data are collected and analysed offline and it is assumed that new data come from the same distribution as the data that the algorithm was trained on. If not, all the theoretical guarantees become void and the empirical performance may deteriorate dramatically. But what if we want to design an algorithm for playing chess? The opponent is not going to sample the moves from a fixed distribution. Online and reinforcement learning break out of the static realm and move into the realm of perpetual cycle of getting new information, analysing it, and executing actions based on the updated estimation of reality. We consider agents (computer programs, robots, living beings) learning based on interactions with (real or simulated) environments. Examples include problems like repeated investment in the stock market, spam filtering, online advertising, online routing, medical treatments, games, and robotics. It allows to model a much richer range of problems, including problems with limited feedback, problems with delayed feedback, and even adversarial problems, where the environment deliberately acts against the algorithm (as, for example, in chess or spam filtering). At the same time it stimulates the development of fascinating mathematical tools for developing and analyzing algorithms for these problems. In the course we will cover: The notion of regret : the evaluation measure, which replaces generalization error in offline learning and makes it possible to define and analyse learning in adversarial environments Various forms of feedback, including full-information and limited [bandit] feedback We will introduce the following basic online learning settings, algorithms, and their analysis: Follow the Leader algorithm Prediction with expert advice: the Hedge / Exponential Weights algorithm Stochastic and adversarial multiarmed bandits: UCB1 and EXP3 algorithm Contextual bandits: EXP4 algorithm And the following basic reinforcement learning settings, algorithms, and their analysis: Markov Decision Processes (MDPs) Monte Carlo Methods for reinforcement learning Dynamic programming for reinforcement learning Temporal Difference Learning (e.g., Q-Learning) Reinforcement learning using function approximators (e.g., Deep Q-Learning) Online reinforcement learning: average-reward and discounted settings We will also cover a few advanced topics. The selection of advanced topics will depend on the lecturers and will be announced on Absalon. The students will learn tools for theoretical analysis of most of the algorithms studied at the course and implement them in Python. The course will bring the students up to a level sufficient for writing a master thesis in the domain of online and reinforcement learning. WARNING: If you have not taken DIKU's Machine Learning A course, please, carefully check the ""Recommended Academic Qualifications"" box below. Machine Learning courses given at other places do not necessarily prepare you well for this course, because DIKU's machine learning courses have a stronger theoretical component than average machine learning courses offered elsewhere. It is not advised taking the course if you do not meet the academic qualifications.","Knowledge of Evaluation measures used in online and reinforcement learning Basic online learning settings Basic reinforcement learning settings Basic algorithms for online and reinforcement learning problems Basic tools for theoretical analysis of these algorithms Skills in Reading and understanding recent scientific literature in the field of online and reinforcement learning Formalizing and solving online and reinforcement learning problems Applying the knowledge obtained by reading scientific papers Analyzing online and reinforcement learning algorithms and implementing them Competences in Understanding advanced methods, and applying the knowledge to practical problems Planning and carrying out self-learning",See Absalon when the course is set up.,"It is assumed that the students have successfully passed the ""Machine Learning A"" course offered by the Department of Computer Science (DIKU) (or the older “Machine Learning” course). Be aware that machine learning courses offered outside DIKU do not necessarily prepare you well for the course. The course requires a strong mathematical background. It is suitable for computer science master students, as well as students from mathematics (statistics, actuarial math, math-economics, etc) and physics study programs, who have basic Python programming skills. Students from other study programs should have their math skills at least at the level of computer science bachelor, and basic Python programming skills. Under https:/​/​sites.google.com/​diku.edu/​machine-learning-courses/​orel we provide concrete topics and exercises from the Machine Learning A course that we rely on in OReL.","Lectures, exercise classes, and weekly home assignments.","{'Lectures': 28, 'Preparation': 18, 'Theory exercises': 70, 'Practical exercises': 70, 'Exam': 20, 'Total': 206}",Written Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>6-8 weekly take-home assignments. The assignments must be
solved individually.
<br/><br/>
The course is based on weekly home assignments, which are graded
continuously over the course of the semester. The final grade will
be given as an overall assessment.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam consists of two elements:</p><ol><li>The first element is handing in at least 6 of the course
assignments no later than 2 weeks prior to the oral part of the
re-exam.</li><li>The second element is a 30-minute oral examination
without preparation in the course curriculum.</li></ol><p>The final grade will be given as an overall assessment of
the two re-exam elements.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK21003U,"7,5 ECTS",Full Degree Master,1 block,Block 3,"AThis is an on-site course, but we support remote participation via online streaming and lecture recording.",No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Sadegh Talebi (13-7e6c6f707273397f6c77706d744b6f74397680396f76)'],Saved on the 14-02-2024
https://kurser.ku.dk/course/ndak21003u/2025-2026,NDAK21003U Online and Reinforcement Learning (OReL),Volume 2025/2026,MSc Programme in Computer Science MSc Programme in Statistics MSc Programme in Mathematics-Economics MSc Programme in Actuarial Mathematics,"In the classical machine learning data are collected and analysed offline and it is assumed that new data come from the same distribution as the data that the algorithm was trained on. If not, all the theoretical guarantees become void and the empirical performance may deteriorate dramatically. But what if we want to design an algorithm for playing chess? The opponent is not going to sample the moves from a fixed distribution. Online and reinforcement learning break out of the static realm and move into the realm of perpetual cycle of getting new information, analysing it, and executing actions based on the updated estimation of reality. We consider agents (computer programs, robots, living beings) learning based on interactions with (real or simulated) environments. Examples include problems like repeated investment in the stock market, spam filtering, online advertising, online routing, medical treatments, games, and robotics. It allows to model a much richer range of problems, including problems with limited feedback, problems with delayed feedback, and even adversarial problems, where the environment deliberately acts against the algorithm (as, for example, in chess or spam filtering). At the same time it stimulates the development of fascinating mathematical tools for developing and analyzing algorithms for these problems. In the course we will cover: The notion of regret : the evaluation measure, which replaces generalization error in offline learning and makes it possible to define and analyse learning in adversarial environments Various forms of feedback, including full-information and limited [bandit] feedback We will introduce the following basic online learning settings, algorithms, and their analysis: Follow the Leader algorithm Prediction with expert advice: the Hedge / Exponential Weights algorithm Stochastic and adversarial multiarmed bandits: UCB1 and EXP3 algorithm Contextual bandits: EXP4 algorithm And the following basic reinforcement learning settings, algorithms, and their analysis: Markov Decision Processes (MDPs) Monte Carlo Methods for reinforcement learning Dynamic programming for reinforcement learning Temporal Difference Learning (e.g., Q-Learning) Reinforcement learning using function approximators (e.g., Deep Q-Learning) Online reinforcement learning: average-reward and discounted settings We will also cover a few advanced topics. The selection of advanced topics will depend on the lecturers and will be announced on Absalon. The students will learn tools for theoretical analysis of most of the algorithms studied at the course and implement them in Python. The course will bring the students up to a level sufficient for writing a master thesis in the domain of online and reinforcement learning. WARNING: If you have not taken DIKU's Machine Learning A course, please, carefully check the ""Recommended Academic Qualifications"" box below. Machine Learning courses given at other places do not necessarily prepare you well for this course, because DIKU's machine learning courses have a stronger theoretical component than average machine learning courses offered elsewhere. It is not advised taking the course if you do not meet the academic qualifications.","Knowledge of Evaluation measures used in online and reinforcement learning Basic online learning settings Basic reinforcement learning settings Basic algorithms for online and reinforcement learning problems Basic tools for theoretical analysis of these algorithms Skills in Reading and understanding recent scientific literature in the field of online and reinforcement learning Formalizing and solving online and reinforcement learning problems Applying the knowledge obtained by reading scientific papers Analyzing online and reinforcement learning algorithms and implementing them Competences in Understanding advanced methods, and applying the knowledge to practical problems Planning and carrying out self-learning",See Absalon when the course is set up.,"It is assumed that the students have successfully passed the ""Machine Learning A"" course offered by the Department of Computer Science (DIKU) (or the older “Machine Learning” course). Be aware that machine learning courses offered outside DIKU do not necessarily prepare you well for the course. The course requires a strong mathematical background. It is suitable for computer science master students, as well as students from mathematics (statistics, actuarial math, math-economics, etc) and physics study programs, who have basic Python programming skills. Students from other study programs should have their math skills at least at the level of computer science bachelor, and basic Python programming skills. Under https:/​/​sites.google.com/​diku.edu/​machine-learning-courses/​orel we provide concrete topics and exercises from the Machine Learning A course that we rely on in OReL.","Lectures, exercise classes, and weekly home assignments.","{'Lectures': 28, 'Preparation': 18, 'Theory exercises': 70, 'Practical exercises': 70, 'Exam': 20, 'Total': 206}",Written Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>6-8 weekly take-home assignments. The assignments must be
solved individually.
<br/><br/>
The course is based on weekly home assignments, which are graded
continuously over the course of the semester. The final grade will
be given as an overall assessment.</dd><dt>Aid</dt><dd>All aids allowed except Generative AI</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam consists of two elements:</p><ol><li>The first element is handing in at least 6 of the course
assignments no later than 2 weeks prior to the oral part of the
re-exam.</li><li>The second element is a 30-minute oral examination
without preparation in the course curriculum.</li></ol><p>The final grade will be given as an overall assessment of
the two re-exam elements.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK21003U,"7,5 ECTS",Full Degree Master,1 block,Block 3,"AThis is an on-site course, but we support remote participation via online streaming and lecture recording.",No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Sadegh Talebi (13-7a686b6c6e6f357b68736c6970476b7035727c356b72)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndab23001u/2025-2026,NDAB23001U Participatory design af informationssystemer (PD),Årgang 2025/2026,Bacheloruddannelsen i datalogi,"Kurset giver de studerende viden og færdigheder, så de i projektgrupper sammen med brugere, ledelse og andre IT-professionelle kan designe effektive og nyttige informationssystemer, der meningsfuldt understøtter menneskelige aktiviteter. I kurset undervises der i en metode, der skaber grundlaget for efterfølgende udvikling og implementering af bæredygtige IT-anvendelser. I kurset vil den studerende lære: At indsamle, systematisere og beskrive en velunderbygget forståelse af brugerbehov At udvikle og beskrive i tekst, grafik og en simpel prototype en samlet vision for et kommende informationssystem set i sammenhæng med brugskonteksten Hvordan krav og ønsker til et nyt eller forbedret informationssystem kan beskrives og prioriteres i samarbejde med potentielle brugere og deres ledelse Hvordan personlige data håndteres med hensyn til privacy i en brugercentreret designproces.","Viden om En samlet metode med principper for og teknikker og værktøjer til udvikling af brugsscenarier, prototyper mv. med henblik på at udforske designrummet i samarbejde med potentielle brugere af informationssystemet. Teknikker til at evaluere design-alternativer til belysning af fordele og ulemper ved alternativerne. Design og evaluering af interaktion mellem mennesker og informationssystem. Planlægning, vurdering og regulering af et IT-designprojekt i en agil, iterativ og læringsorienteret designproces. Dokumentation af IT-løsningen, og effektiv informationsudveksling mellem udviklere, brugere og ledelse gennem udviklingsprocessens forskellige trin. Færdigheder i Som deltager i en projektgruppe bestående af IT- og domæneeksperter at planlægge og styre en agil designproces, som indenfor resurse- og tidsmæssigt begrænsede rammer forbereder realisering af et ny og forbedret informationssystem. At undersøge, diskutere og afveje styrker og svagheder i udvalgte design-alternativer for et kommende informationssystem. Kompetencer i At analysere, designe og vurdere kvaliteter i et påtænkt informationssystem set fra et helhedssynspunkt, der kombinerer både IT-tekniske og bruger-orienterede aspekter. Som deltager i en IT-projektgruppe at samarbejde med potentielle brugere, ledelse og andre systemudviklere om målrettet forberedelse af realisering af et nyt eller forbedret informationssystem.","Se Absalon for kursuslitteratur. Vi har tidligere brugt: Bødker, Kensing og Simonsen: Professionel Forundersøgelse, Samfundslitteratur. Den findes også på engelsk, som nogle studerende fortrækker: Participatory IT Design fra MIT Press.","Viden om interaktionsdesign på et niveau svarende til gennemførelse af DIKU-kurset ""Interaktionsdesign"". Programmeringsfærdigheder og erfaringer med softwareudvikling på et niveau svarende til gennemførelse af DIKU-kurserne ""Programming og problemløsning"" og ""Softwareudvikling"".","En kombination af forelæsninger, selvstudier af kursuslitteraturen, projektarbejde og øvelser.","{'Forelæsninger': 20, 'Forberedelse (anslået)': 51, 'Øvelser': 20, 'Projektarbejde': 115, 'I alt': 206}",Skriftlig Mundtlig Individuel Kollektiv Løbende feedback i undervisningsforløbet Peerfeedback (studerende giver hinanden feedback),Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig aflevering, i løbet af kurset</div></dd><dt>Prøveformsdetaljer</dt><dd>Eksamen består af en skriftlig projektrapport udarbejdet i
grupper med eksplicit definerede individuelle bidrag.</dd><dt>Eksamensforudsætninger</dt><dd><p>2 obligatoriske opgaver skal afleveres og godkendes for at
kvalificere sig til eksamen senest 2 uger før eksamensugen for blok
3.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt</dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere</div></dd><dt>Reeksamen</dt><dd><p>Samme som ordinær eksamen. Den reviderede projektrapport kan
genafleveres som et individuelt projekt.</p><p>Hvis den studerende ikke er kvalificeret til ordinær eksamen kan
kvalifikation til reeksamen opnås ved aflevering og godkendelse af
de obligatoriske opgaver senest 2 uger før reeksamen,
således at samme krav som for deltagelse ved ordinær eksamen
opfyldes.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen</p></div></div>",,,,,,,,,,,,,Gemt den 24-02-2025
https://kurser.ku.dk/course/ndab23001u/2024-2025,NDAB23001U Participatory design af informationssystemer (PD),Årgang 2024/2025,Bacheloruddannelsen i datalogi,"Kurset giver de studerende viden og færdigheder, så de i projektgrupper sammen med brugere, ledelse og andre IT-professionelle kan designe effektive og nyttige informationssystemer, der meningsfuldt understøtter menneskelige aktiviteter. I kurset undervises der i en metode, der skaber grundlaget for efterfølgende udvikling og implementering af bæredygtige IT-anvendelser. I kurset vil den studerende lære: At indsamle, systematisere og beskrive en velunderbygget forståelse af brugerbehov At udvikle og beskrive i tekst, grafik og en simpel prototype en samlet vision for et kommende informationssystem set i sammenhæng med brugskonteksten Hvordan krav og ønsker til et nyt eller forbedret informationssystem kan beskrives og prioriteres i samarbejde med potentielle brugere og deres ledelse Hvordan personlige data håndteres med hensyn til privacy i en brugercentreret designproces.","Viden om En samlet metode med principper for og teknikker og værktøjer til udvikling af brugsscenarier, prototyper mv. med henblik på at udforske designrummet i samarbejde med potentielle brugere af informationssystemet. Teknikker til at evaluere design-alternativer til belysning af fordele og ulemper ved alternativerne. Design og evaluering af interaktion mellem mennesker og informationssystem. Planlægning, vurdering og regulering af et IT-designprojekt i en agil, iterativ og læringsorienteret designproces. Dokumentation af IT-løsningen, og effektiv informationsudveksling mellem udviklere, brugere og ledelse gennem udviklingsprocessens forskellige trin. Færdigheder i Som deltager i en projektgruppe bestående af IT- og domæneeksperter at planlægge og styre en agil designproces, som indenfor resurse- og tidsmæssigt begrænsede rammer forbereder realisering af et ny og forbedret informationssystem. At undersøge, diskutere og afveje styrker og svagheder i udvalgte design-alternativer for et kommende informationssystem. Kompetencer i At analysere, designe og vurdere kvaliteter i et påtænkt informationssystem set fra et helhedssynspunkt, der kombinerer både IT-tekniske og bruger-orienterede aspekter. Som deltager i en IT-projektgruppe at samarbejde med potentielle brugere, ledelse og andre systemudviklere om målrettet forberedelse af realisering af et nyt eller forbedret informationssystem.","Se Absalon for kursuslitteratur. Vi har tidligere brugt: Bødker, Kensing og Simonsen: Professionel Forundersøgelse, Samfundslitteratur. Den findes også på engelsk, som nogle studerende fortrækker: Participatory IT Design fra MIT Press.","Viden om interaktionsdesign på et niveau svarende til gennemførelse af DIKU-kurset ""Interaktionsdesign"". Programmeringsfærdigheder og erfaringer med softwareudvikling på et niveau svarende til gennemførelse af DIKU-kurserne ""Programming og problemløsning"" og ""Softwareudvikling"".","En kombination af forelæsninger, selvstudier af kursuslitteraturen, projektarbejde og øvelser.","{'Forelæsninger': 20, 'Forberedelse (anslået)': 51, 'Øvelser': 20, 'Projektarbejde': 115, 'I alt': 206}",Skriftlig Mundtlig Individuel Kollektiv Løbende feedback i undervisningsforløbet Peerfeedback (studerende giver hinanden feedback),Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig aflevering, i løbet af kurset</div></dd><dt>Prøveformsdetaljer</dt><dd>Eksamen består af en skriftlig projektrapport udarbejdet i
grupper med eksplicit definerede individuelle bidrag.</dd><dt>Krav til indstilling til eksamen</dt><dd><p>2 obligatoriske opgaver skal afleveres og godkendes for at
kvalificere sig til eksamen senest 2 uger før eksamensugen for blok
3.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt 
<div><p>Det er tilladt at anvende Large Language Models (LLM)/Large
Multimodal Models (LMM) – fx ChatGPT og GPT-4.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere</div></dd><dt>Reeksamen</dt><dd><p>Samme som ordinær eksamen. Den reviderede projektrapport kan
genafleveres som et individuelt projekt.</p><p>Hvis den studerende ikke er kvalificeret til ordinær eksamen kan
kvalifikation til reeksamen opnås ved aflevering og godkendelse af
de obligatoriske opgaver senest 2 uger før reeksamen,
således at samme krav som for deltagelse ved ordinær eksamen
opfyldes.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen</p></div></div>",,,,,,,,,,,,,Gemt den 11-09-2024
https://kurser.ku.dk/course/ndaa09031u/2024-2025,NDAA09031U Proactive Computer Security (PCS),Volume 2024/2025,MSc Programme in Computer Science MSc Programme in Computer Science with a minor subject,"The goal of this course is to give students an introduction to IT security on a deeper technical level. The syllabus primarily takes on the viewpoint of the attacker, with excursions into defensive techniques motivated by the concrete attacks. The course focuses on gaining a deep hands-on understanding of a few selected topics rather than covering more material with the use of specialised tools.","After completing the course, the successful student will have: Knowledge of Fuzzing, stack and heap buffer overflows, shellcode, reverse engineering. Details of the interaction between user programs and the operating system. Tools used for IT security, especially reverse engineering. Vulnerabilities and how to correct them and/or mitigate attacks against them. Skills to Analyse simple applications from a security perspective, locate vulnerabilities, and demonstrate how to rectify them. Describe and apply exploitation techniques such as return-oriented programming and stack and heap buffer overflows, as well as counter mechanisms. Do basic reverse engineering of binary programs and locate vulnerabilities. Understand the link between vulnerabilities in binary programs and the insecure source code that produce them. Recognise insecure source code and suggest corrections. Use and develop shellcode. Determine a vulnerability by reviewing an exploit of it, and suggest corrections. Competences to Find and evaluate security issues using fuzzing, reverse engineering, and source code auditing.",See Absalon when the course is set up.,"You need to be proficient in both high-level and low-level programming, and will be expected to hand-in solutions written in C, assembler, and perhaps PHP or Python. You are expected to have an understanding of the low-level architecture of computers. The practical work in the course is based on command-line UNIX tools, thus you are expected to have access to a Linux box and have a working knowledge of how to use Linux via a command prompt. Academic qualifications equivalent to a BSc degree is recommended.","Lectures, exercise labs, student presentations, and mainly work on practical individual mandatory assignments.","{'Lectures': 14, 'Practical exercises': 14, 'Project work': 164, 'Seminar': 14, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment based on student presentation and 6-8
written, individual assignments. Each assignment will have equal
weight towards the final grade, with the exception of the final
assignment which will count as double. Submission in Absalon.</dd><dt>Aid</dt><dd>All aids allowed 
<div><p>For programming tasks specifically, the use of GitHub Copilot or
similar AI-based programming tools is permitted. The finite list of
allowed AI-tools will be announced in Absalon.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Oral examination of maximum 40 minutes (including grading)
without preparation, based on resubmission of mandatory
assignments.</p><p>The assignments must be submitted no later than two weeks before
the re-exam week to qualify for the re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAA09031U,"7,5 ECTS",Full Degree Master,1 block,Block 4,A,60 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Ken Friis Larsen (8-7570766b7c7d6f784a6e7338757f386e75)'],Saved on the 15-02-2024
https://kurser.ku.dk/course/ndaa09031u/2025-2026,NDAA09031U Proactive Computer Security (PCS),Volume 2025/2026,MSc Programme in Computer Science MSc Programme in Computer Science with a minor subject,"The goal of this course is to give students an introduction to IT security on a deeper technical level. The syllabus primarily takes on the viewpoint of the attacker, with excursions into defensive techniques motivated by the concrete attacks. The course focuses on gaining a deep hands-on understanding of a few selected topics rather than covering more material with the use of specialised tools.","After completing the course, the successful student will have: Knowledge of Fuzzing, stack and heap buffer overflows, shellcode, reverse engineering. Details of the interaction between user programs and the operating system. Tools used for IT security, especially reverse engineering. Vulnerabilities and how to correct them and/or mitigate attacks against them. Skills to Analyse simple applications from a security perspective, locate vulnerabilities, and demonstrate how to rectify them. Describe and apply exploitation techniques such as return-oriented programming and stack and heap buffer overflows, as well as counter mechanisms. Do basic reverse engineering of binary programs and locate vulnerabilities. Understand the link between vulnerabilities in binary programs and the insecure source code that produce them. Recognise insecure source code and suggest corrections. Use and develop shellcode. Determine a vulnerability by reviewing an exploit of it, and suggest corrections. Competences to Find and evaluate security issues using fuzzing, reverse engineering, and source code auditing.",See Absalon when the course is set up.,"You need to be proficient in both high-level and low-level programming, and will be expected to hand-in solutions written in C, assembler, and Python. You are expected to have an understanding of the low-level architecture of computers. The practical work in the course is based on command-line UNIX tools, thus you are expected to have access to a Linux box and have a working knowledge of how to use Linux via a command prompt. Academic qualifications equivalent to a BSc degree is recommended.","Lectures, exercise labs, student presentations, and mainly work on practical individual mandatory assignments.","{'Lectures': 14, 'Practical exercises': 14, 'Project work': 164, 'Seminar': 14, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment based on student presentation and 6-8
written, individual assignments. Each assignment will have equal
weight towards the final grade, with the exception of the final
assignment which will count as double. Submission in Absalon.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Oral examination of maximum 40 minutes (including grading)
without preparation, based on resubmission of mandatory
assignments.</p><p>The assignments must be submitted no later than two weeks before
the re-exam week to qualify for the re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAA09031U,"7,5 ECTS",Full Degree Master,1 block,Block 4,A,60 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Ken Friis Larsen (8-6d686e637475677042666b306d7730666d)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak21004u/2024-2025,NDAK21004U Probabilistic Machine Learning (PML),Volume 2024/2025,,"Uncertainty is a central concept in many areas of Science and Society, yet it is often neglected in Machine Learning. This course demonstrates how the probabilistic framework gives us a powerful language to describe uncertainties about both models and predictions. We will cover a range of different probabilistic modelling techniques, and demonstrate the impact of uncertainty quantification on real-world data. Finally, we will demonstrate how model design and inference can be cleanly separated using modern probabilistic programming languages, making it possible to express complex models in a modular and concise form. This is an advanced topics course, and the exact list of topics will therefore change from year to year, depending on current trends in the literature. Examples of topics include: Fundamental concepts. What is a probability? Frequentist vs Bayesian perspectives. Inference techniques: Markov chain Monte Carlo, Variational Inference, and advanced methods Uncertainty quantification and probability calibration Latent variable models: Mixtures, Deep latent variable models Graphical models Gaussian Processes, Bayesian optimization Flow models Denoising diffusion models Bayesian decision theory Probabilistic Programming fundamentals Probabilistic Programming Language design WARNING: If you have not taken DIKU's Machine Learning A course, please, carefully check the ""Recommended Academic Qualifications"" box below. Machine Learning courses given at other places do not necessarily prepare you well for this course, because DIKU's machine learning courses have a stronger theoretical component than average machine learning courses offered elsewhere. It is not advised to take the course if you do not meet the academic qualifications.","After completing the course, the student will have: Knowledge of fundamental concepts in probabilistic machine learning the trade-offs between different inference techniques common probabilistic models fundamental concepts in probabilistic programming Skills in implementing different probabilistic models, with and without the use of a probabilistic programming language. quantifying and calibrating uncertanties assessing model quality (including convergence criteria and appropriateness of variational distributions) Competences in analyzing problems and formulating appropriate probabilistic models identifying strengths and weaknesses of different models and modelling approaches solving modelling projects in collaboration with others",See Absalon when the course is set up.,"The course requires a strong mathematical background. It is suitable for computer science master students, as well as students from mathematics (statistics, actuarial math, math-economics, etc) and physics study programmes. Students from other study programmes can verify if they have sufficient math and programming skills by solving the self-preparation assignment (below) and if in doubt contact the course organiser. It is assumed that the students have successfully passed Machine Learning A (MLA) offered by the Department of Computer Science (DIKU). Students who has not taken this course are recommended to go through the self-preparation material and solve the self-preparation assignment provided at https:/​/​sites.google.com/​diku.edu/​machine-learning-courses/​pml before the course starts. For students with a strong mathematical background and some background in machine learning it should be possible to do the self-preparation within a couple of weeks. It is strongly advised not to take the course if you do not meet the prerequisites. This course builds extensively on Gaussian models and manipulation of Gaussian densities. Students unfamiliar with such material are encouraged to take the course “Models for Complex Systems”, which gives a thorough introduction to such models. The working language of the course is Python. All our examples and help are provided in Python and it is recommended to be familiar with Python before starting the course.",Lectures and exercises,"{'Lectures': 28, 'Preparation': 137, 'Theory exercises': 21, 'Exam': 20, 'Total': 206}",Written Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, during course</div></dd><dt>Type of assessment details</dt><dd>A group project (written assignment), corresponding at 20
hours, developed during the course and documented with a report
wherein the individual contributions are stated.</dd><dt>Exam registration requirements</dt><dd><p>A prerequisite for taking the exam is the submission and
approval of all but one of the 3 assignments. The submission dates
for these assignments will be announced at the start of the
course.</p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Qualification for the re-examination is obtained by resubmission
and approval of all but one of the 3 assignments no later than 3
weeks before the re-examination.</p><p> </p><p>The re-exam consists of a 15-minute individual oral examinaion
with no preparation time, based on the resubmission of the
(possibly revised) final project and full syllabus. The revised
project must be handed in no later than Wednesday before the
re-examination week.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK21004U,"7,5 ECTS",Full Degree Master,1 block,Block 2,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Wouter Boomsma (2-7b6644686d326f7932686f)'],Saved on the 26-04-2024
https://kurser.ku.dk/course/ndak16005u/2025-2026,NDAK16005U Program Analysis and Transformation (PAT),Volume 2025/2026,MSc Programme in Computer Science,"The automated processing of program texts is central to Computer Science. The prime example of such processing is traditionally a compilation of high-level to low-level languages ­– including the necessary supporting analyses, whether for error-detection purposes or in support of efficiency-improving program optimisations. But other instances of program analysis and/or transformation abound in both core programming-language work, and in support of adjoining disciplines, such as algorithmics and software development. The course introduces students to the principles and practice of automated program processing, covering both mainstream application areas, and selected more exotic applications.","At course completion, the successful student will have: Knowledge of Program transformation and analysis paradigms. Applications areas of automated program analysis, such as optimisation, verification, and specialization of programs. Principles of semantics-based program transformation. Applications of program transformation, such as translation, synthesis, and maintenance. Software systems and tools supporting analyses and transformations. Selected examples of advanced analyses and/or transformations. Skills to Decide and argue correctness and other properties of a range of analysis and transformation algorithms. Concretely realise analysis and transformation algorithms from their abstract descriptions. Competences to Design and implement systems for automated processing of programs expressed in both general-purpose and domain-specific languages.",Articles and notes. See Absalon after the course it set up.,"Basic knowledge of the principles of programming language implementation (as found in an undergraduate-level compilers course), operational semantics and type systems (e.g. ""Semantics and Types"" or similar), and practical programming skills in a functional language (e.g., Haskell, as used in ""Advanced Programming"") will be expected. Academic qualifications equivalent to a BSc degree is recommended.","Lectures, exercises, mandatory assignments.","{'Lectures': 20, 'Preparation': 26, 'Exercises': 60, 'Project work': 100, 'Total': 206}",Written Oral Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment based on 4-6 written individual
assignments, covering both theory and programming. Assignments are
assessed as a whole. Use of generative AI must be declared.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners.</div></dd><dt>Re-exam</dt><dd><p>The re-exam consists of two parts:</p><p>1. The student must resubmit the assignment no later than three
weeks before the re-exam week, in order for the assignment to be
approved prior to the oral examination.</p><p>2. A 30-minute oral examination without preparation.</p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcomes.</p></div></div>",English,NDAK16005U,"7,5 ECTS",Full Degree Master,1 block,Block 4,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Robert Glück (6-6a6f7868666e43676c316e7831676e)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak16005u/2024-2025,NDAK16005U Program Analysis and Transformation (PAT),Volume 2024/2025,MSc Programme in Computer Science,"The automated processing of program texts is central to Computer Science. The prime example of such processing is traditionally a compilation of high-level to low-level languages ­– including the necessary supporting analyses, whether for error-detection purposes or in support of efficiency-improving program optimisations. But other instances of program analysis and/or transformation abound in both core programming-language work, and in support of adjoining disciplines, such as algorithmics or security. The course introduces students to the principles and practice of automated program processing, covering both mainstream application areas, and selected more exotic applications.","At course completion, the successful student will have: Knowledge of Static program analysis paradigms, including abstract interpretation and type-based analyses. Applications areas of automated program analysis, including optimisation, verification, and information security. Principles of semantics-based program transformation. Applications of program transformation, including translation, synthesis, and maintenance. Software systems and tools supporting analyses and transformations. Selected examples of advanced analyses and/or transformations. Skills to Decide and argue correctness and other properties of a range of analysis and transformation algorithms. Concretely realise analysis and transformation algorithms from their abstract descriptions. Competences to Design and implement systems for automated processing of programs expressed in both general-purpose and domain-specific languages.",Articles and notes. See Absalon after the course it set up.,"Basic knowledge of the principles of programming language implementation (as found in an undergraduate-level compilers course), operational semantics and type systems (e.g. ""Semantics and Types"" or similar), and practical programming skills in a functional language (e.g., Haskell, as used in ""Advanced Programming"") will be expected. Academic qualifications equivalent to a BSc degree is recommended.","Lectures, exercises, mandatory assignments.","{'Lectures': 20, 'Preparation': 26, 'Exercises': 60, 'Project work': 100, 'Total': 206}",Written Oral Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment based on 4-6 written individual
assignments, covering both theory and programming. Assignments are
assessed as a whole.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners.</div></dd><dt>Re-exam</dt><dd><p>The re-exam consists of two parts:</p><p>1. The student must resubmit the assignment no later than three
weeks before the re-exam week, in order for the assignment to be
approved prior to the oral examination.</p><p>2. A 30-minute oral examination without preparation.</p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcomes.</p></div></div>",English,NDAK16005U,"7,5 ECTS",Full Degree Master,1 block,Block 4,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Robert Glück (6-6c717a6a687045696e33707a336970)'],Saved on the 15-02-2024
https://kurser.ku.dk/course/ndak21004u/2025-2026,NDAK21004U Probabilistic Machine Learning (PML),Volume 2025/2026,,"Uncertainty is a central concept in many areas of Science and Society, yet it is often neglected in Machine Learning. This course demonstrates how the probabilistic framework gives us a powerful language to describe uncertainties about both models and predictions. We will cover a range of different probabilistic modelling techniques, and demonstrate the impact of uncertainty quantification on real-world data. Finally, we will demonstrate how model design and inference can be cleanly separated using modern probabilistic programming languages, making it possible to express complex models in a modular and concise form. This is an advanced topics course, and the exact list of topics will therefore change from year to year, depending on current trends in the literature. Examples of topics include: Fundamental concepts. What is a probability? Frequentist vs Bayesian perspectives. Inference techniques: Markov chain Monte Carlo, Variational Inference, and advanced methods Uncertainty quantification and probability calibration Latent variable models: Mixtures, Deep latent variable models Graphical models Gaussian Processes, Bayesian optimization Flow models Denoising diffusion models Bayesian decision theory Probabilistic Programming fundamentals Probabilistic Programming Language design WARNING: If you have not taken DIKU's Machine Learning A course, please, carefully check the ""Recommended Academic Qualifications"" box below. Machine Learning courses given at other places do not necessarily prepare you well for this course, because DIKU's machine learning courses have a stronger theoretical component than average machine learning courses offered elsewhere. It is not advised to take the course if you do not meet the academic qualifications.","After completing the course, the student will have: Knowledge of fundamental concepts in probabilistic machine learning the trade-offs between different inference techniques common probabilistic models fundamental concepts in probabilistic programming Skills in implementing different probabilistic models, with and without the use of a probabilistic programming language. quantifying and calibrating uncertanties assessing model quality (including convergence criteria and appropriateness of variational distributions) Competences in analyzing problems and formulating appropriate probabilistic models identifying strengths and weaknesses of different models and modelling approaches solving modelling projects in collaboration with others",See Absalon when the course is set up.,"The course requires a strong mathematical background. It is suitable for computer science master students, as well as students from mathematics (statistics, actuarial math, math-economics, etc) and physics study programmes. Students from other study programmes can verify if they have sufficient math and programming skills by solving the self-preparation assignment (below) and if in doubt contact the course organiser. It is assumed that the students have successfully passed Machine Learning A (MLA) offered by the Department of Computer Science (DIKU). Students who has not taken this course are recommended to go through the self-preparation material and solve the self-preparation assignment provided at https:/​/​sites.google.com/​diku.edu/​machine-learning-courses/​pml before the course starts. For students with a strong mathematical background and some background in machine learning it should be possible to do the self-preparation within a couple of weeks. It is strongly advised not to take the course if you do not meet the prerequisites. This course builds extensively on Gaussian models and manipulation of Gaussian densities. Students unfamiliar with such material are encouraged to take the course “Models for Complex Systems”, which gives a thorough introduction to such models. The working language of the course is Python. All our examples and help are provided in Python and it is recommended to be familiar with Python before starting the course.",Lectures and exercises,"{'Lectures': 28, 'Preparation': 137, 'Theory exercises': 21, 'Exam': 20, 'Total': 206}",Written Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, during course</div></dd><dt>Type of assessment details</dt><dd>A group project (written assignment), corresponding at 20
hours, developed during the course and documented with a report
wherein the individual contributions are stated.</dd><dt>Examination prerequisites</dt><dd><p>A prerequisite for taking the exam is the submission and
approval of all but one of the 3 assignments. The submission dates
for these assignments will be announced at the start of the
course.</p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Qualification for the re-examination is obtained by resubmission
and approval of all but one of the 3 assignments no later than 3
weeks before the re-examination.</p><p> </p><p>The re-exam consists of a 15-minute individual oral examinaion
with no preparation time, based on the resubmission of the
(possibly revised) final project and full syllabus. The revised
project must be handed in no later than Wednesday before the
re-examination week.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK21004U,"7,5 ECTS",Full Degree Master,1 block,Block 2,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Wouter Boomsma (2-7a6543676c316e7831676e)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndab15009u/2024-2025,NDAB15009U Programmering og problemløsning (PoP),Årgang 2024/2025,Bacheloruddannelsen i bioinformatik Bacheloruddannelsen i datalogi Bacheloruddannelsen i datalogi-økonomi Bacheloruddannelsen i machinelearning og datavidenskab Bacheloruddannelsen i kognitions- og datavidenskab,"Kurset giver en introduktion til programmering og til hvordan problemløsning struktureres vha. et program. Der gennemgås grundlæggende koncepter og terminologi indenfor programmering. Der undervises i funktionelle, imperative og objektorienterede programmeringsparadigmer.","Viden om Grundlæggende begreber indenfor imperativ, objektorienteret og funktionsprogrammeringsparadigmerne: Funktioner og metoder, variabler, udtryk, typer, kontrolstrukturer, løkker, blokstruktur, klasser og objekter, objektinteraktion, nedarvning, rekursion, polymorfi, abstraktion, undtagelser, pattern matching over rekursive datatyper, m.m. God programmeringsskik: Dokumentation i koden, design patterns, afprøvning inkl. unit testing, håndtering af køretidsfejl, m.m. Teknikker til problemløsning: Teknisk analyse af naturligsprogsproblemer, objektorienteret design, modelleringssprog, håndkøring, m.m. God rapportskrivningsteknik. Færdigheder i At kunne læse og skrive mindre programmer (op til ca. 1000 linjer) i de programmeringsparadigmer, der undervises i på kurset, med overholdelse af god programmeringsskik og -stil. At kunne evaluere fordele og ulemper ved at opskrive løsningen i de underviste programmeringsparadigmer, og at kunne implementere, afprøve, dokumentere, og evaluere løsningens kvalitet. Et sideordnet mål er, at den studerende opnår passende studieteknik således, at dette og parallelkurser bestås svarende til et fuldtidsstudium. Kompetencer til Ud fra en præcist defineret problemformulering at kunne analysere problemet, udforme et program til løsning af dette, samt at verificere, afprøve, og dokumentere løsningen.",Offentliggøres på kursets Absalon-side ved kursusstart.,,"Kurset vil blande video og live forelæsninger, klasseundervisning, samt gruppe- og individuelle afleveringsopgaver.","{'Forelæsninger': 54, 'Forberedelse (anslået)': 106, 'Øvelser': 108, 'Projektarbejde': 144, 'I alt': 412}",Skriftlig Individuel Kollektiv Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>15 ECTS</dd><dt>Prøveform</dt><dd><div>Løbende bedømmelse</div></dd><dt>Prøveformsdetaljer</dt><dd>Eksamen består af obligatoriske opgaver med mulighed for
genaflevering i den efterfølgende uge ( 4 opgaver i alt).
<br/><br/>
En af de første (1 eller 2) opgaver samt de to sidste (3 og 4) skal
bestås.
<br/><br/>
Alle afleveringer er individuelle og baseret på personlig
refleksion over løsninger.
<br/>
Opgaverne er opdelt således, at den ene halvdel af opgaverne løses
og udarbejdes individuelt, og den anden halvdel indledningsvist
drøftes som gruppe og derefter løses og udarbejdes individuelt.
<br/>
Det vil fremgå klart af opgaven, når den udleveres, hvordan den
skal gribes an.
<br/><br/>
Størrelsen af opgaverne vil variere og vil blive offentliggjort ved
kursusstart. Opgaverne afleveres i Absalon.</dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt 
<div><p>Det er tilladt at anvende AI-baserede værktøjer og Large
Language Models (LLM)/Large Multimodal Models (LMM). Kode skrevet
af ChatGPT, GitHub Copilot eller lignende skal betragtes som et
citat og skal følges af en citation med dato
for kodegenereringen. Da kursets fokus er på at lære at
programmere, anbefales det, at AI bruges som en læringsresurse
fremfor et værktøj til at generere kode.</p></div></dd><dt>Bedømmelsesform</dt><dd>bestået/ikke bestået</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere</div></dd><dt>Reeksamen</dt><dd><p>30 minutters individuel mundtlig eksamen (inklusive bedømmelse)
i kursets pensum.</p><p>Til eksamen vil der være 1 times forberedelse, og
alle hjælpemidler er tilladt.</p><p>Det er tilladt men ikke anbefalelsesværdigt at bruge Large
Language Models under forberedelsen.</p><p>Under hele eksamen er det ikke tilladt at kommunikere med
udenforstående.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>For at bestå skal den studerende vise beherskelse af viden,
færdigheder og kompetencer, som beskrevet i
målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 03-09-2024
https://kurser.ku.dk/course/ndab15009u/2025-2026,NDAB15009U Programmering og problemløsning (PoP),Årgang 2025/2026,Bacheloruddannelsen i bioinformatik Bacheloruddannelsen i datalogi Bacheloruddannelsen i datalogi-økonomi Bacheloruddannelsen i machinelearning og datavidenskab Bacheloruddannelsen i kognitions- og datavidenskab,"Kurset giver en introduktion til programmering og til hvordan problemløsning struktureres vha. et program. Der gennemgås grundlæggende koncepter og terminologi indenfor programmering. Der undervises i funktionelle, imperative og objektorienterede programmeringsparadigmer.","Viden om Grundlæggende begreber indenfor imperativ, objektorienteret og funktionsprogrammeringsparadigmerne: Funktioner og metoder, variabler, udtryk, typer, kontrolstrukturer, løkker, blokstruktur, klasser og objekter, objektinteraktion, nedarvning, rekursion, polymorfi, abstraktion, undtagelser, pattern matching over rekursive datatyper, m.m. God programmeringsskik: Dokumentation i koden, design patterns, afprøvning inkl. unit testing, håndtering af køretidsfejl, m.m. Teknikker til problemløsning: Teknisk analyse af naturligsprogsproblemer, objektorienteret design, modelleringssprog, håndkøring, m.m. God rapportskrivningsteknik. Færdigheder i At kunne læse og skrive mindre programmer (op til ca. 1000 linjer) i de programmeringsparadigmer, der undervises i på kurset, med overholdelse af god programmeringsskik og -stil. At kunne evaluere fordele og ulemper ved at opskrive løsningen i de underviste programmeringsparadigmer, og at kunne implementere, afprøve, dokumentere, og evaluere løsningens kvalitet. Et sideordnet mål er, at den studerende opnår passende studieteknik således, at dette og parallelkurser bestås svarende til et fuldtidsstudium. Kompetencer til Ud fra en præcist defineret problemformulering at kunne analysere problemet, udforme et program til løsning af dette, samt at verificere, afprøve, og dokumentere løsningen.",Offentliggøres på kursets Absalon-side ved kursusstart.,,"Kurset vil blande video og live forelæsninger, klasseundervisning, samt gruppe- og individuelle afleveringsopgaver.","{'Forelæsninger': 54, 'Forberedelse (anslået)': 106, 'Øvelser': 108, 'Projektarbejde': 144, 'I alt': 412}",Skriftlig Individuel Kollektiv Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>15 ECTS</dd><dt>Prøveform</dt><dd><div>Løbende bedømmelse</div></dd><dt>Prøveformsdetaljer</dt><dd>Eksamen består af obligatoriske opgaver med mulighed for
genaflevering i den efterfølgende uge (4 opgaver i alt).
<br/><br/>
En af de første (1 eller 2) opgaver samt de to sidste (3 og 4) skal
bestås.
<br/><br/>
Alle afleveringer er individuelle og baseret på personlig
refleksion over løsninger.
<br/>
Opgaverne er opdelt således, at den ene halvdel af opgaverne løses
og udarbejdes individuelt, og den anden halvdel indledningsvist
drøftes som gruppe og derefter løses og udarbejdes individuelt.
<br/>
Det vil fremgå klart af opgaven, når den udleveres, hvordan den
skal gribes an.
<br/>
Størrelsen af opgaverne vil variere og vil blive offentliggjort ved
kursusstart. Opgaverne afleveres i Absalon.</dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt</dd><dt>Bedømmelsesform</dt><dd>bestået/ikke bestået</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere</div></dd><dt>Reeksamen</dt><dd><p>30 minutters individuel mundtlig eksamen (inklusive bedømmelse)
i kursets pensum.</p><p>Til eksamen vil der være 1 times forberedelse, og
alle hjælpemidler er tilladt.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>For at bestå skal den studerende vise beherskelse af viden,
færdigheder og kompetencer, som beskrevet i
målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 24-02-2025
https://kurser.ku.dk/course/ndab16008u/2024-2025,NDAB16008U Programming Language Design (PLD),Volume 2024/2025,BSc Programme in Computer Science,"The course explores the design space of programming languages and how the design choices affect the implementation and other properties of the language. A brief history of programming languages is presented and a selected set of features are explored with respect to design choices, how they interact and how they can be implemented. The aim is to give the student an understanding of the programming-language landscape that will both be helpful when the student designs and implements programming languages but also to better understand existing programming languages. There will be some programming in languages very different from what most students have experienced, including variants of LISP and Prolog.",The course aims to give the student: Knowledge of Implementation strategies Syntax Memory management Scope rules Control structures Types Language paradigms Modules Semantics Domain-specific languages Computational power of languages Reversible and quantum programming Skills to Design and implement simple programming languages or language extensions using several of the above-listed features. Describe this language using a mixture of formal and informal specification. Make small programs in uncommon or esoteric languages. Competences to Evaluate how design choices affect and are affected by implementation methods and other properties of programming languages. Design or extend a programming language tailored to a specific problem area or observing specific properties.,Notes that will be published on the course home page (Absalon).,"The student should have knowledge of basic programming language implementation equivalent to the course ""Implementering af programmeringssprog (IPS)"" and have experience programming in several language paradigms, at least including a functional language in the ML family (Standard ML, OCaml, F#, Haskell), a C-like imperative language, and a class-based object-oriented language (Java, C# or similar).","Lectures, classroom exercises, projects.","{'Lectures': 28, 'Preparation': 70, 'Theory exercises': 28, 'Project work': 80, 'Total': 206}","Written Oral Individual Collective Continuous feedback during the course of the semester Oral, collective feedback is given for the exercises in the exercise classes. The mandatory assignments are given written, individual feedback.","Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, 7 days</div></dd><dt>Type of assessment details</dt><dd>The exam assignment is individual, and any form of cooperation
or help from people other than the teachers of the course will be
considered plagiarism.</dd><dt>Exam registration requirements</dt><dd><p>To qualify for the written, take-home exam, the student must
pass three assignments during the course.  The assignments can
be solved in groups of up to three people.  It will be
possible to resubmit the first two assignments after getting
feedback from TAs, but due to time constraints, no resubmission is
possible for the third.</p><p>To pass an assignment, at least 40% of the maximum possible
points must be achieved.</p></dd><dt>Aid</dt><dd>All aids allowed 
<div><p>Using ChatGPT or similar large language models is allowed both
for the group assignments and the final exam assignment, but you
must include the entire dialogue in the report (otherwise it is
plagiarism), and you must argue the relevance and correctness (or
lack thereof) of the answers you get from the AI (otherwise, you
will get no points whatsoever from the answer).</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as ordinary exam.</p><p>If a student is not qualified for the exam, qualification can be
achieved by resubmission and approval of assignments no later than
3 weeks before the re-exam.</p><p>The comments about cooperation and use of large language models
from the ordinary exam also apply to the reexam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAB16008U,"7,5 ECTS",Bachelor,1 block,Block 3,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Torben Ægidius Mogensen (7-7772756568717043676c316e7831676e)'],Saved on the 14-02-2024
https://kurser.ku.dk/course/ndak14008u/2024-2025,NDAK14008U Programming Massively Parallel Hardware (PMPH),Volume 2024/2025,MSc Programme in Bioinformatics MSc Programme in Computer Science,"In simple words, the aim of the course is to teach students how to write programs that run fast on highly-parallel hardware, such as general-purpose graphics processing units (GPGPUs), which are now mainstream. Such architectures are however capricious; unlocking their power requires understanding their design principles and also specialised knowledge of code transformations, for example, aimed at optimising locality of reference, the degree of parallelism, etc. As such, this course is organised into three tracks: hardware, software, and lab. The Software Track teaches how to think parallel. We introduce the map-reduce functional programming model, which builds programs naturally, like puzzles, from a nested composition of implicitly-parallel array operators, which are rooted in the mathematical structure of list homomorphisms. We reason about the asymptotic (work and depth) properties of such programs and discuss the flattening transformation, which converts (all) arbitrarily-nested parallelism to a more-restricted form that can be directly mapped to the hardware. We then turn our attention to legacy-sequential code written in programming languages such as C. In this context we study dependence analysis, as a tool for reasoning about loop-based optimisations (e.g., Is it safe to execute a given loop in parallel, or to interchange two loops?). As time permits, we may cover more advanced topics, for example, related to dynamic analysis for optimising locality of reference. The Hardware Track studies the design space of the critical components of parallel hardware: processor, memory hierarchy and interconnect networks. We will find out that modern hardware design is governed by old ideas, which are merely adjusted or combined in different ways. The Lab Track applies the theory learned in the other tracks. We will review the fundamental ideas that govern the GPGPU design and potential performance bottlenecks. We will quickly learn several parallel-programming models, and we will get our hands dirty by putting in practice the optimisations learned in the software track. We will use (the in-house developed) Futhark to write nested-parallel programs, to demonstrate flattening, and as a baseline. We will use OpenMP and CUDA to write ""parallel-assembly"" code for multi-core and GPGPU execution, respectively.","Knowledge of The types and semantics of data-parallel operators. Analyses for identifying and optimising parallelism and locality of reference, e.g., flattening, dependence analysis. The main hardware-design techniques for supporting parallelism at processor, memory hierarchy and interconnect levels. Skills in Implementing parallel programs in high-level (Futhark) and lower-level programming models (OpenMP, CUDA). Applying (by hand) the flattening transformation on specific instances of data-parallel programs. Applying (by hand) various ""imperative"" code transformations (such as loop interchange, loop distribution, block and register tiling) for optimising the degree of parallelism and locality of reference. Testing, measuring the impact of applied optimisations and characterising the performance of parallel programs. Competences in Reasoning about the work-depth asymptotic behaviour of specific instances of data-parallel programs. Reasoning based on dependence analysis about the (in)correctness of specific instances of loop parallelisation and related optimisations. Identifying an effective parallelisation solution for a given application.","The topics taught in the hardware track are selected from the book ""Parallel Computer Organization and Design'', by Michel Dubois, Murali Annavaram and Per Stenstrom, Cambridge University Press, the latest edition. Buying the hardware book is highly recommended. Lecture notes covering the material on the software track will be provided on Absalon. Various other related material, such as scientific articles and tutorials (e.g., Futhark, CUDA) will be pointed out from the course pages.","The course syllabus assumes knowledge of hardware architecture, programming languages, compilers, data-structures and algorithms, linear algebra, and most importantly programming competences in C/C++ (and basic knowledge of F#/Haskell would be great). For example, at DIKU, these can be acquired through the corresponding BSc courses (or through self-study). Academic qualifications equivalent to a BSc degree is recommended.","Lecture, labs, in-class exercises, individual weekly assignments, group project.","{'Lectures': 28, 'Preparation': 15, 'Exercises': 67, 'Laboratory': 28, 'Project work': 67, 'Exam': 1, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>3-to-4 individual assignments (40%), group project (report)
with individual presentation and a short oral examination (60%).
<br/><br/>
The oral examination is in continuation of the individual
presentation and consists of questions related to the report and/or
course material (10 min presentation + up to 20 min oral
examination).
<br/><br/>
No aids are allowed for the oral examination.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Resubmission of the assignments (35%) and the project
extended with additional tasks (40%), and a 30 minutes oral
examination (25%) without preparation. </p><p>No aids are allowed for the oral examination. </p><p>Already passed assignments/report will be
considered.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK14008U,"7,5 ECTS",Full Degree Master,1 block,Block 1,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Cosmin Eugen Oancea (13-6b777b757176367769766b6d69486c7136737d366c73)'],Saved on the 15-02-2024
https://kurser.ku.dk/course/ndab16008u/2025-2026,NDAB16008U Programming Language Design (PLD),Volume 2025/2026,BSc Programme in Computer Science,"The course explores the design space of programming languages and how the design choices affect the implementation and other properties of the language. A brief history of programming languages is presented and a selected set of features are explored with respect to design choices, how they interact and how they can be implemented. The aim is to give the student an understanding of the programming-language landscape that will both be helpful when the student designs and implements programming languages but also to better understand existing programming languages. There will be some programming in languages very different from what most students have experienced, including variants of LISP and Prolog.",The course aims to give the student: Knowledge of Implementation strategies Syntax Memory management Scope rules Control structures Types Language paradigms Modules Semantics Domain-specific languages Computational power of languages Reversible and quantum programming Skills to Design and implement simple programming languages or language extensions using several of the above-listed features. Describe this language using a mixture of formal and informal specification. Make small programs in uncommon or esoteric languages. Competences to Evaluate how design choices affect and are affected by implementation methods and other properties of programming languages. Design or extend a programming language tailored to a specific problem area or observing specific properties.,Notes that will be published on the course home page (Absalon).,"The student should have knowledge of basic programming language implementation equivalent to the course ""Implementering af programmeringssprog (IPS)"" and have experience programming in several language paradigms, at least including a functional language in the ML family (Standard ML, OCaml, F#, Haskell), a C-like imperative language, and a class-based object-oriented language (Java, C# or similar).","Lectures, classroom exercises, projects.","{'Lectures': 28, 'Preparation': 70, 'Theory exercises': 28, 'Project work': 80, 'Total': 206}","Written Oral Individual Collective Continuous feedback during the course of the semester Oral, collective feedback is given for the exercises in the exercise classes. The mandatory assignments are given written, individual feedback.","Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, 7 days</div></dd><dt>Type of assessment details</dt><dd>The exam assignment is individual, and any form of cooperation
or help from people other than the teachers of the course will be
considered plagiarism.</dd><dt>Examination prerequisites</dt><dd><p>To qualify for the written, take-home exam, the student must
pass three assignments during the course.  The assignments can
be solved in groups of up to three people.  It will be
possible to resubmit the first two assignments after getting
feedback from TAs, but due to time constraints, no resubmission is
possible for the third.</p><p>To pass an assignment, at least 40% of the maximum possible
points must be achieved.</p></dd><dt>Aid</dt><dd>All aids allowed 
<div><p>Using ChatGPT or similar large language models is allowed both
for the group assignments and the final exam assignment, but you
must include the entire dialogue in the report (otherwise it is
plagiarism), and you must argue the relevance and correctness (or
lack thereof) of the answers you get from the AI (otherwise, you
will get no points whatsoever from the answer).</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as ordinary exam.</p><p>If a student is not qualified for the exam, qualification can be
achieved by resubmission and approval of assignments no later than
3 weeks before the re-exam.</p><p>The comments about cooperation and use of large language models
from the ordinary exam also apply to the reexam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAB16008U,"7,5 ECTS",Bachelor,1 block,Block 3,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Torben Ægidius Mogensen (7-8681847477807f52767b407d8740767d)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak14008u/2025-2026,NDAK14008U Programming Massively Parallel Hardware (PMPH),Volume 2025/2026,MSc Programme in Bioinformatics MSc Programme in Computer Science,"In simple words, the aim of the course is to teach students how to write programs that run fast on highly-parallel hardware, such as general-purpose graphics processing units (GPGPUs), which are now mainstream. Such architectures are however capricious; unlocking their power requires understanding their design principles and also specialised knowledge of code transformations, for example, aimed at optimising locality of reference, the degree of parallelism, etc. As such, this course is organised into three tracks: hardware, software, and lab. The Software Track teaches how to think parallel. We introduce the map-reduce functional programming model, which builds programs naturally, like puzzles, from a nested composition of implicitly-parallel array operators, which are rooted in the mathematical structure of list homomorphisms. We reason about the asymptotic (work and depth) properties of such programs and discuss the flattening transformation, which converts (all) arbitrarily-nested parallelism to a more-restricted form that can be directly mapped to the hardware. We then turn our attention to legacy-sequential code written in programming languages such as C. In this context we study dependence analysis, as a tool for reasoning about loop-based optimisations (e.g., Is it safe to execute a given loop in parallel, or to interchange two loops?). As time permits, we may cover more advanced topics, for example, related to dynamic analysis for optimising locality of reference. The Hardware Track studies the design space of the critical components of parallel hardware: processor, memory hierarchy and interconnect networks. We will find out that modern hardware design is governed by old ideas, which are merely adjusted or combined in different ways. The Lab Track applies the theory learned in the other tracks. We will review the fundamental ideas that govern the GPGPU design and potential performance bottlenecks. We will quickly learn several parallel-programming models, and we will get our hands dirty by putting in practice the optimisations learned in the software track. We will use (the in-house developed) Futhark to write nested-parallel programs, to demonstrate flattening, and as a baseline. We will use OpenMP and CUDA to write ""parallel-assembly"" code for multi-core and GPGPU execution, respectively.","Knowledge of The types and semantics of data-parallel operators. Analyses for identifying and optimising parallelism and locality of reference, e.g., flattening, dependence analysis. The main hardware-design techniques for supporting parallelism at processor, memory hierarchy and interconnect levels. Skills in Implementing parallel programs in high-level (Futhark) and lower-level programming models (OpenMP, CUDA). Applying (by hand) the flattening transformation on specific instances of data-parallel programs. Applying (by hand) various ""imperative"" code transformations (such as loop interchange, loop distribution, block and register tiling) for optimising the degree of parallelism and locality of reference. Testing, measuring the impact of applied optimisations and characterising the performance of parallel programs. Competences in Reasoning about the work-depth asymptotic behaviour of specific instances of data-parallel programs. Reasoning based on dependence analysis about the (in)correctness of specific instances of loop parallelisation and related optimisations. Identifying an effective parallelisation solution for a given application.","The topics taught in the hardware track are selected from the book ""Parallel Computer Organization and Design'', by Michel Dubois, Murali Annavaram and Per Stenstrom, Cambridge University Press, the latest edition. Buying the hardware book is highly recommended. Lecture notes covering the material on the software track will be provided on Absalon. Various other related material, such as scientific articles and tutorials (e.g., Futhark, CUDA) will be pointed out from the course pages.","The course syllabus assumes knowledge of hardware architecture, programming languages, compilers, data-structures and algorithms, linear algebra, and most importantly programming competences in C/C++ (and basic knowledge of F#/Haskell would be great). For example, at DIKU, these can be acquired through the corresponding BSc courses (or through self-study). Academic qualifications equivalent to a BSc degree is recommended.","Lecture, labs, in-class exercises, individual weekly assignments, group project.","{'Lectures': 28, 'Preparation': 15, 'Exercises': 67, 'Laboratory': 28, 'Project work': 68, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment of 4-6 assignments.
<br/>
The exam consists of 4-6 mandatory assignments. All assignments are
individual and include personal reflections on the handed-in
solutions.
<br/>
Some assignments are solved individually and others are discussed
in groups but solved and handed in as individual assignments. It
will be clearly stated on the hand-in what and how much must be
solved individually.</dd><dt>Aid</dt><dd>All aids allowed except Generative AI</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Resubmission of the assignments. Please clearly mark, what
has been changed or added from the original submission.</p><p>Assignments that have already been passed should also be
re-submitted to be considered.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK14008U,"7,5 ECTS",Full Degree Master,1 block,Block 1,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Cosmin Eugen Oancea (13-697579736f7434756774696b67466a6f34717b346a71)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndab21003u/2025-2026,NDAB21003U Python programmering til datavidenskab,Årgang 2025/2026,Bacheloruddannelsen i bioinformatik Bacheloruddannelsen i molekylær biomedicin Bacheloruddannelsen i sundhed og informatik Bacheloruddannelsen i bioteknologi Bacheloruddannelsen i biokemi Bacheloruddannelsen i biologi,"Kurset er en introduktion til programmering i Python med fokus på databehandling og -analyse. Kurset indeholder grundlæggende begreber fra programmering såsom datatyper, kontrolstrukturer, løkker, funktioner, objektorienteret programmering, pattern matching (regulære udtryk) og beregningskompleksitet. Yderligere opnås der også grundlæggende tekniske færdigheder, der kan bruges i en datavidenskabssammenhæng; herunder brug af eksterne servere og navigation på samme vha. en Unix/Linux kommandolinje.","Viden Efter kurset vil deltagerne mestre nøglebegreber inden for programmering, såsom datatyper, variabler, kontrolstrukturer, loops og funktioner, samt have forståelse for nøglebegreber indenfor objektorienteret programmering, mønstermatching og beregningsmæssig kompleksitet. Endelig opnås en grundlæggende forståelse af Unix/Linux baserede operativsystemer med fokus på grundlæggende kommandolinjenavigation, pipes, netværk og proceskontrol. Færdigheder Kursusdeltagerne vil kunne løse små til mellemstore programmeringsopgaver i Python, der fokuserer på databehandling og analyseopgaver. Deltagerne lærer at skrive velstrukturerede og velkommenterede programmer. Endelig erhverves færdigheder i at køre scripts på (computer)servere og enkel navigation på servere ved hjælp af en Unix/Linux kommandolinje. Kompetencer Efter endt kursus kan deltagerne løse mange programmeringsopgaver i forbindelse med Data Science og skrive velstrukturerede programmer, der kan vedligeholdes og videreudvikles. Ydermere vil kursusdeltageren: Kunne forklare forskellen mellem forskellige datatyper i Python og vælge relevante datatyper om en given programmeringsopgave Kunne give en detaljeret beskrivelse af kontrolstrukturer og loops og kunne forklare hvordan brugen af loops kan påvirke et programs beregningsmæssige kompleksitet. Giv eksempler på, hvordan fejl i programmer kan håndteres Kunne motivere brugen af funktioner og moduler og give eksempler på relevant brug af klasser og objekter Søg uafhængigt online information om eksterne Python-moduler/​biblioteker og brug fundne moduler til at løse en specifik opgave. Kunne bruge basale regulære udtryk i til at konstruere regulære udtryk til at løse specifikke mønstermatchningsproblemer.",Offentliggøres på kursets Absalon-side ved kursusstart.,"Kurset er et grundlæggende programmeringskursus, der ikke kræver forudgående programmeringserfaring. Kurset forudsætter matematiske kundskaber svarende til Gymnasialt niveau A.",Forelæsninger og øvelser (6-9 timer per uge),"{'Forelæsninger': 21, 'Forberedelse (anslået)': 139, 'Øvelser': 21, 'Eksamen': 25, 'I alt': 206}",Skriftlig Mundtlig Individuel Kollektiv Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig stedprøve, 4 timer med opsyn.</div></dd><dt>Prøveformsdetaljer</dt><dd>4 timers skriftlig stedprøve med tilsyn</dd><dt>Eksamensforudsætninger</dt><dd><p>Der stilles 5-6 opgaver i løbet af kurset, hvoraf alle
undtagen én skal godkendes for at deltage i eksamen.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt undtagen Generativ AI</dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere</div></dd><dt>Reeksamen</dt><dd><p>Reeksamen afholdes som ordinær eksamen.</p><p>80% af ugentlige afleveringer skal afleveres og godkendes senest
3 uger før reeksamen.</p><p>Såfremt der er 10 eller færre tilmeldte, afholdes reeksamen som
en mundtlig eksamen 30 minutters mundtligt eksamen med 30 minutters
forberedelse</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>For at bestå skal den studerende vise beherskelse af viden,
færdigheder og kompetencer, som beskrevet i
målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 28-04-2025
https://kurser.ku.dk/course/ndab21003u/2024-2025,NDAB21003U Python programmering til datavidenskab,Årgang 2024/2025,Bacheloruddannelsen i bioinformatik Bacheloruddannelsen i molekylær biomedicin Bacheloruddannelsen i sundhed og informatik,"Kurset er en introduktion til programmering i Python med fokus på databehandling og -analyse. Kurset indeholder grundlæggende begreber fra programmering såsom datatyper, kontrolstrukturer, løkker, funktioner, objektorienteret programmering, pattern matching (regulære udtryk) og beregningskompleksitet. Yderligere opnås der også grundlæggende tekniske færdigheder, der kan bruges i en datavidenskabssammenhæng; herunder brug af eksterne servere og navigation på samme vha. en Unix/Linux kommandolinje.","Viden Efter kurset vil deltagerne mestre nøglebegreber inden for programmering, såsom datatyper, variabler, kontrolstrukturer, loops og funktioner, samt have forståelse for nøglebegreber indenfor objektorienteret programmering, mønstermatching og beregningsmæssig kompleksitet. Endelig opnås en grundlæggende forståelse af Unix/Linux baserede operativsystemer med fokus på grundlæggende kommandolinjenavigation, pipes, netværk og proceskontrol. Færdigheder Kursusdeltagerne vil kunne løse små til mellemstore programmeringsopgaver i Python, der fokuserer på databehandling og analyseopgaver. Deltagerne lærer at skrive velstrukturerede og velkommenterede programmer. Endelig erhverves færdigheder i at køre scripts på (computer)servere og enkel navigation på servere ved hjælp af en Unix/Linux kommandolinje. Kompetencer Efter endt kursus kan deltagerne løse mange programmeringsopgaver i forbindelse med Data Science og skrive velstrukturerede programmer, der kan vedligeholdes og videreudvikles. Ydermere vil kursusdeltageren: Kunne forklare forskellen mellem forskellige datatyper i Python og vælge relevante datatyper om en given programmeringsopgave Kunne give en detaljeret beskrivelse af kontrolstrukturer og loops og kunne forklare hvordan brugen af loops kan påvirke et programs beregningsmæssige kompleksitet. Giv eksempler på, hvordan fejl i programmer kan håndteres Kunne motivere brugen af funktioner og moduler og give eksempler på relevant brug af klasser og objekter Søg uafhængigt online information om eksterne Python-moduler/​biblioteker og brug fundne moduler til at løse en specifik opgave. Kunne bruge basale regulære udtryk i til at konstruere regulære udtryk til at løse specifikke mønstermatchningsproblemer.",Offentliggøres på kursets Absalon-side ved kursusstart.,"Kurset er et grundlæggende programmeringskursus, der ikke kræver forudgående programmeringserfaring. Kurset forudsætter matematiske kundskaber svarende til Gymnasialt niveau A.",Forelæsninger og øvelser (6-9 timer per uge),"{'Forelæsninger': 21, 'Forberedelse (anslået)': 139, 'Øvelser': 21, 'Eksamen': 25, 'I alt': 206}",Skriftlig Mundtlig Individuel Kollektiv Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig stedprøve, 4 timer med opsyn.</div></dd><dt>Prøveformsdetaljer</dt><dd>4 timers skriftlig stedprøve med tilsyn</dd><dt>Krav til indstilling til eksamen</dt><dd><p>Der stilles 5-6 opgaver i løbet af kurset, hvoraf alle
undtagen én skal godkendes for at deltage i eksamen.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt 
<div><p>Alle hjælpemidler tilladt inkl. internet.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere</div></dd><dt>Reeksamen</dt><dd><p>Reeksamen afholdes som ordinær eksamen.</p><p>80% af ugentlige afleveringer skal afleveres og godkendes senest
3 uger før reeksamen.</p><p>Såfremt der er 10 eller færre tilmeldte, afholdes reeksamen som
en mundtlig eksamen 30 minutters mundtligt eksamen med 30 minutters
forberedelse</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>For at bestå skal den studerende vise beherskelse af viden,
færdigheder og kompetencer, som beskrevet i
målbeskrivelsen.</p></div></div>",,,,,,,,,,,,,Gemt den 20-01-2025
https://kurser.ku.dk/course/ndab24000u/2025-2026,NDAB24000U Python Programming for Data Science,Volume 2025/2026,BSc Programme in Biochemistry BSc Programme in Biology BSc Programme in Biotechnology BSc Programme in Molecular Biomedicine MSc Programme in Bioinformatics,"This course is an introduction to programming in Python, with focus on data processing and analysis. It includes basic programming concepts such as data types, conditionals, loops, functions, object oriented programming, pattern matching (regular expressions), and computational complexity. In addition, it also provides technical skills relevant to the data science pipeline such as the ability to log on to an external server, and to navigate a Unix shell.","Knowledge: After completing the course, the student will master key programming concepts such as data-types, variables, conditionals, loops, and functions, and have an understanding of the central concepts in object oriented programming, pattern matching and computational complexity. Finally, the student will have acquired a basic understanding of a Unix/Linux environment. Skills: The student is capable of solving small to medium sized programming tasks in Python, in particular tasks related to data processing and analytics. The student can produce programs that are well-written, well-structured, and well-commented. Finally, the student knows how to execute scripts on a remote server, and navigate using a Unix command line interface on such a server. Competences: After completing the course, the student is capable of solving the many small to medium size programming tasks that arise in Data Science disciplines, and is able to write well-structured and maintainable programs in Python. The student is also capable of running programs both locally and on remote servers, and be able to navigate in a Unix environment. The student can explain the differences between various data-types in Python and can select the relevant type for a given programming task can give a detailed description of conditionals and loops, and is able to explain how loops relate to the complexity of a program can motivate the concepts of function and module, and give examples of how these tools should be used to structure code can explain the basic concepts of Object Oriented Programming, and give examples of appropriate uses of classes and object can identify problems for which regular expressions are well suited, and is able to construct an appropriate regular expression for a given pattern matching problem can give examples of how to handle errors in a program is capable of independently finding online information about external Python modules, and applying this information to solve a specific task",See Absalon.,This is an introductory programming course: no prior programming experience is required. We do assume knowledge corresponding to a basic University-level mathematics introduction course (e.g. Introduction to the Mathematics for the Chemical Sciences).,"Lectures and exercises mixed (6-9 hours per week). Some of the exercises will involve simple Biological examples, but a Biological background is not required for taking the course.","{'Lectures': 21, 'Preparation': 162, 'Practical exercises': 21, 'Exam': 2, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>On-site written exam, 2 hours under invigilation</div></dd><dt>Type of assessment details</dt><dd>The on-site written exam is an ITX exam.
<br/>
See important information about ITX-exams at Study Information,
menu point: Exams -&gt; Exam types and rules -&gt; Written on-site
exams (ITX)</dd><dt>Examination prerequisites</dt><dd><p>Approval of 80% of the weekly exercises.
<br/>
 </p></dd><dt>Aid</dt><dd>Written aids allowed 
<div><p>The University will make computers available to students at the
ITX-exam.</p><p>Students are not permitted to bring digital aids like computers,
tablets, calculators, mobile phones etc.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as ordinary exam.</p><p>80% of the exercises must be handed in and approved no
later than three weeks before the reexamination.
<br/><br/>
If 10 or fewer students have signed up for re-exam, the type of
assessment will be changed to 30 minutes oral exam, 30 minutes
preparation, all aids allowed.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning outcome</p></div></div>",English,NDAB24000U,"7,5 ECTS",Bachelor,1 block,Block 1,B,175 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board for the Biological Area'],"['Department of Computer Science', 'Department of Biology']",['Faculty of Science'],"['Thomas Wim Hamelryck (8-7a6e67736b72787f46686f7534717b346a71)', 'Wouter Boomsma (2-846f4d71763b78823b7178)']",Saved on the 01-05-2025
https://kurser.ku.dk/course/ndak24010u/2024-2025,NDAK24010U Quantum Error Correction (QEC),Volume 2024/2025,,"The course will cover the basic theory of quantum error correction and fault-tolerance, including the following specific topics: Basics of classical coding theory, parity check matrices, tanner graphs Basic quantum codes: Shor code, concatenation codes QEC theory: Knill Laflemme conditions, Gottesman Knill theorem, threshold theorem, Topological codes: the toric code, color code. Decoding algorithms (mostly for the color code) Fault tolerance: Lattice surgery, and magic state injection. Fault-tolerant photonic quantum computing (If time permits) Advanced topics: LDPC codes, self correction, bosonic codes","Knowledge: Describe and design quantum error correction codes Describe and design fault-tolerant architectures for quantum computing Skills: Perform resource estimates based on specific QEC architectures. Design of decoders for topological codes Competences: Ability to work on state of the art topics in quantum error correction, and read research publications on the topic.","The teaching material will be gathered from various sources, including: Personal set of lecture notes Various review articles","Bachelor in Mathematics, Physics or Computer Science Academic qualifications equivalent to a BSc degree is recommended. You should have passed the courses NFYK23002U Introduction to Quantum Information Science & NMAK23007U Introduction to Quantum Computing or similar course before registering for this course.",Lectures and exercises,"{'Lectures': 28, 'Preparation': 160, 'Exercises': 14, 'Exam': 4, 'Total': 206}",Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>On-site written exam, 4 hours under invigilation</div></dd><dt>Aid</dt><dd>Only certain aids allowed 
<div><ul><li>Books</li><li>Notes</li><li>Calculator</li></ul></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship</dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK24010U,"7,5 ECTS",Full Degree Master,1 block,Block 2,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Michael Kastoryano (4-716d6f6544686d326f7932686f)'],Saved on the 08-05-2024
https://kurser.ku.dk/course/ndak24010u/2025-2026,NDAK24010U Quantum Error Correction (QEC),Volume 2025/2026,MSc Programme in Quantum Information Science,"The course will cover the basic theory of quantum error correction and fault-tolerance, including the following specific topics: Basics of classical coding theory, parity check matrices, tanner graphs Basic quantum codes: Shor code, concatenation codes QEC theory: Knill Laflemme conditions, Gottesman Knill theorem, threshold theorem, Topological codes: the toric code, color code. Decoding algorithms (mostly for the color code) Fault tolerance: Lattice surgery, and magic state injection. Fault-tolerant photonic quantum computing (If time permits) Advanced topics: LDPC codes, self correction, bosonic codes","Knowledge: Describe and design quantum error correction codes Describe and design fault-tolerant architectures for quantum computing Skills: Perform resource estimates based on specific QEC architectures. Design of decoders for topological codes Competences: Ability to work on state of the art topics in quantum error correction, and read research publications on the topic.","The teaching material will be gathered from various sources, including: Personal set of lecture notes Various review articles","Bachelor in Mathematics, Physics or Computer Science Academic qualifications equivalent to a BSc degree is recommended. You should have passed the courses NFYK23002U Introduction to Quantum Information Science & NMAK23007U Introduction to Quantum Computing or similar course before registering for this course.",Lectures and exercises,"{'Lectures': 28, 'Preparation': 160, 'Exercises': 14, 'Exam': 4, 'Total': 206}",Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>On-site written exam, 4 hours under invigilation</div></dd><dt>Aid</dt><dd>Only certain aids allowed (see description below) 
<div><ul><li>Books</li><li>Notes</li><li>Calculator</li></ul></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship</dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>If less than 10 students register for the re-exam, the re-exam
will be a 30 minutes oral exam (including grading without
preparation) with written aids only (no electronic
aids).""</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK24010U,"7,5 ECTS",Full Degree Master,1 block,Block 2,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Michael Kastoryano (4-706c6e6443676c316e7831676e)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndab24000u/2024-2025,NDAB24000U Python Programming for Data Science,Volume 2024/2025,BSc Programme in Biochemistry BSc Programme in Biology BSc Programme in Biotechnology BSc Programme in Molecular Biomedicine MSc Programme in Bioinformatics,"This course is an introduction to programming in Python, with focus on data processing and analysis. It includes basic programming concepts such as data types, conditionals, loops, functions, object oriented programming, pattern matching (regular expressions), and computational complexity. In addition, it also provides technical skills relevant to the data science pipeline such as the ability to log on to an external server, and to navigate a Unix shell.","Knowledge: After completing the course, the student will master key programming concepts such as data-types, variables, conditionals, loops, and functions, and have an understanding of the central concepts in object oriented programming, pattern matching and computational complexity. Finally, the student will have acquired a basic understanding of a Unix/Linux environment. Skills: The student is capable of solving small to medium sized programming tasks in Python, in particular tasks related to data processing and analytics. The student can produce programs that are well-written, well-structured, and well-commented. Finally, the student knows how to execute scripts on a remote server, and navigate using a Unix command line interface on such a server. Competences: After completing the course, the student is capable of solving the many small to medium size programming tasks that arise in Data Science disciplines, and is able to write well-structured and maintainable programs in Python. The student is also capable of running programs both locally and on remote servers, and be able to navigate in a Unix environment. The student can explain the differences between various data-types in Python and can select the relevant type for a given programming task can give a detailed description of conditionals and loops, and is able to explain how loops relate to the complexity of a program can motivate the concepts of function and module, and give examples of how these tools should be used to structure code can explain the basic concepts of Object Oriented Programming, and give examples of appropriate uses of classes and object can identify problems for which regular expressions are well suited, and is able to construct an appropriate regular expression for a given pattern matching problem can give examples of how to handle errors in a program is capable of independently finding online information about external Python modules, and applying this information to solve a specific task",See Absalon.,This is an introductory programming course: no prior programming experience is required. We do assume knowledge corresponding to a basic University-level mathematics introduction course (e.g. Introduction to the Mathematics for the Chemical Sciences).,"Lectures and exercises mixed (6-9 hours per week). Some of the exercises will involve simple Biological examples, but a Biological background is not required for taking the course.","{'Lectures': 21, 'Preparation': 160, 'Practical exercises': 21, 'Exam': 4, 'Total': 206}",Written Oral Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>On-site written exam, 4 hours under invigilation</div></dd><dt>Type of assessment details</dt><dd>The on-site written exam is an ITX exam.
<br/>
See important information about ITX-exams at Study Information,
menu point: Exams -&gt; Exam types and rules -&gt; Written on-site
exams (ITX)</dd><dt>Exam registration requirements</dt><dd><p>Approval of 80% of the weekly exercises.
<br/>
 </p></dd><dt>Aid</dt><dd>All aids allowed 
<div><p>The University will make computers available to students at the
ITX-exam.</p><p>Students are not permitted to bring digital aids like computers,
tablets, calculators, mobile phones etc.</p><p>Books, notes, and similar materials can be brought in paper form
or uploaded before the exam and accessed digitally from the ITX
computer. Read more about this at Study Information.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as ordinary exam.</p><p>80% of the exercises must be handed in and approved no
later than three weeks before the reexamination.
<br/><br/>
If 10 or fewer students have signed up for re-exam, the type of
assessment will be changed to 30 minutes oral exam, 30 minutes
preparation, all aids allowed.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning outcome</p></div></div>",English,NDAB24000U,"7,5 ECTS",Bachelor,1 block,Block 1,B,175 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board for the Biological Area'],"['Department of Computer Science', 'Department of Biology']",['Faculty of Science'],"['Thomas Wim Hamelryck (8-7a6e67736b72787f46686f7534717b346a71)', 'Wouter Boomsma (2-7d68466a6f34717b346a71)']",Saved on the 05-07-2024
https://kurser.ku.dk/course/ndak14005u/2025-2026,NDAK14005U Randomised Algorithms (RA),Volume 2025/2026,MSc Programme in Bioinformatics MSc Programme in Computer Science,"Randomised algorithms are often far superior to their traditional deterministic counterparts, both in efficiency and simplicity. Many computational tasks are fundamentally impossible without randomisation. However, mastering randomised algorithms requires a basic mathematical understanding of the relevant combinatorial probability theory, and therefore a regular algorithms course will normally either skip them or teach them very superficially. Randomisation is a way of thinking, that needs a proper introduction. Applications in many areas will be considered, e.g., graph algorithms, machine learning, distributed computing, and geometry, but the focus will be on the general understanding, the goal being to give the students the foundation needed to understand and use randomisation, no matter what application area they may later be interested in.",Knowledge of The relevant combinatorial probability theory and randomised techniques in algorithms: Game-Theoretic Techniques Moments and Deviations Tail Inequalities The Probabilistic Method Randomised Data Structures Randomised Geometric Algorithms Randomised Graph Algorithms Randomised Distributed and Parallel Algorithms Skills in Proving bounds on the expected running time of randomised algorithms Explaining methods for bounding the probability that a random variable deviates far from its expectation Applying the probabilistic method to prove the existence of e.g. algorithms Giving simple and efficient algorithms and data structures using randomisation where more traditional deterministic approaches are more cumbersome or less efficient Competences to Reason about and apply randomised techniques to computational problems that the student may later encounter in life.,See Absalon for a list of course literature.,"The students should enjoy mathematics, as the course uses the power of mathematics to understand and prove good performance of algorithms. It is assumed that the students have completed an algorithms course such as Advanced Algorithms and Data Structures, and are comfortable using mathematical proofs in the analysis of algorithms. In addition, some basic knowledge of discrete probability theory is assumed, e.g. what is a discrete random variable, what is expectation, etc. Academic qualifications equivalent to a BSc degree is recommended.",Lectures and compulsory assignments.,"{'Lectures': 36, 'Preparation': 85, 'Theory exercises': 84, 'Exam': 1, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, 30 minutes (including grading)</div></dd><dt>Type of assessment details</dt><dd>The oral examination is with 30 minutes preparation,</dd><dt>Examination prerequisites</dt><dd><p> The student must solve mandatory assignments during
the course. Assignments will be made each week and be due in the
following week. 4 out of 6 assignments must be submitted and
approved by the due date in order to qualify for the
exam.</p></dd><dt>Aid</dt><dd>All aids allowed except Generative AI and internet access</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as ordinary exam.</p><p>If the student is not yet qualified, then qualification can
be achieved by submitting the missing assignments.
The missing assignments must be submitted no later than
two weeks before the re-exam date in order to qualify
for the re-exam.</p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK14005U,"7,5 ECTS",Full Degree Master,1 block,Block 4,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Jacob Holm (4-6d646b7243676c316e7831676e)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak14005u/2024-2025,NDAK14005U Randomised Algorithms (RA),Volume 2024/2025,MSc Programme in Bioinformatics MSc Programme in Computer Science,"Randomised algorithms are often far superior to their traditional deterministic counterparts, both in efficiency and simplicity. Many computational tasks are fundamentally impossible without randomisation. However, mastering randomised algorithms requires a basic mathematical understanding of the relevant combinatorial probability theory, and therefore a regular algorithms course will normally either skip them or teach them very superficially. Randomisation is a way of thinking, that needs a proper introduction. Applications in many areas will be considered, e.g., graph algorithms, machine learning, distributed computing, and geometry, but the focus will be on the general understanding, the goal being to give the students the foundation needed to understand and use randomisation, no matter what application area they may later be interested in.",Knowledge of The relevant combinatorial probability theory and randomised techniques in algorithms: Game-Theoretic Techniques Moments and Deviations Tail Inequalities The Probabilistic Method Randomised Data Structures Randomised Geometric Algorithms Randomised Graph Algorithms Randomised Distributed and Parallel Algorithms Skills in Proving bounds on the expected running time of randomised algorithms Explaining methods for bounding the probability that a random variable deviates far from its expectation Applying the probabilistic method to prove the existence of e.g. algorithms Giving simple and efficient algorithms and data structures using randomisation where more traditional deterministic approaches are more cumbersome or less efficient Competences to Reason about and apply randomised techniques to computational problems that the student may later encounter in life.,See Absalon for a list of course literature.,"The students should enjoy mathematics, as the course uses the power of mathematics to understand and prove good performance of algorithms. It is assumed that the students have completed an algorithms course such as Advanced Algorithms and Data Structures, and are comfortable using mathematical proofs in the analysis of algorithms. In addition, some basic knowledge of discrete probability theory is assumed, e.g. what is a discrete random variable, what is expectation, etc. Academic qualifications equivalent to a BSc degree is recommended.",Lectures and compulsory assignments.,"{'Lectures': 36, 'Preparation': 85, 'Theory exercises': 84, 'Exam': 1, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, 30 minutes (including grading)</div></dd><dt>Type of assessment details</dt><dd>The oral examination is with 30 minutes preparation,</dd><dt>Exam registration requirements</dt><dd><p> The student must solve mandatory assignments during
the course. Assignments will be made each week and be due in the
following week. 4 out of 6 assignments must be submitted and
approved by the due date in order to qualify for the
exam.</p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as ordinary exam.</p><p>If the student is not yet qualified, then qualification can
be achieved by submitting the missing assignments.
The missing assignments must be submitted no later than
two weeks before the re-exam date in order to qualify
for the re-exam.</p><p> </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK14005U,"7,5 ECTS",Full Degree Master,1 block,Block 4,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Jacob Holm (4-72697077486c7136737d366c73)'],Saved on the 14-02-2024
https://kurser.ku.dk/course/ndab18001u/2025-2026,NDAB18001U Randomiserede algoritmer til dataanalyse (RAD),Årgang 2025/2026,Bacheloruddannelsen i datalogi,"Randomiserede algoritmer er ofte deres traditionelle deterministiske modstykker overlegne. Mange beregningsproblemer er i praksis umulige uden brug af randomisering. Anvendelsesområder, såsom grafalgoritmer og store datastrømme med relevans for maskinlæring og dataanalyse, vil behandles, men fokus vil være på den grundlæggende forståelse for at give den studerende det nødvendige grundlag for at forstå og bruge sandsynligheder i algoritmer og dataanalyse.","Viden om : Relevant kombinatorisk sandsynlighedsteori og randomiserede teknikker i algoritmik: Varians og spredning Haleuligheder Randomiserede datastrukturer Randomiserede algoritmer Analyse af store datastrømme Færdigheder i at : Vise grænser for forventet køretid af randomiserede algoritmer Forklare metoder til at begrænse sandsynligheden for, at en tilfældig variabel afviger langt fra dens forventede værdi Kompetencer til at : Ræsonnere om og anvende randomiserede teknikker til dataanalyseproblemer Finde simple og effektive randomiserde algoritmer og datastrukturer, hvor traditionelle deterministiske metoder er vanskeligere eller mindre effektive","Se Absalon. Forventes at være ""Randomized Algorithms"" af Motwani and Raghavan.","Grundlæggende sandsynlighedsregning svarende til kurset ""Matematisk analyse og sandsynlighedsteori i datalogi"" eller ""Matematisk analyse og statistik i datalogi"" samt grundlæggende algoritmik svarende til kurset ""Algoritmer og datastrukturer"".","Forelæsninger, øvelser, ugeopgaver og et implementeringsprojekt.","{'Forelæsninger': 28, 'Forberedelse (anslået)': 100, 'Teoretiske øvelser': 28, 'Øvelser': 24, 'Projektarbejde': 25, 'Eksamen': 1, 'I alt': 206}",Skriftlig Individuel Kollektiv Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Mundtlig prøve, 30 minutter (30 minutter
forberedelse)</div></dd><dt>Eksamensforudsætninger</dt><dd><p>En forudsætning for at gå op til eksamen er aflevering og
godkendelse af implementeringsprojektet samt 3 ud af 4 skriftlige
ugentlige opgaver.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt undtagen Generativ AI og
internetadgang</dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Samme som ordinær eksamen.</p><p>Kvalificering til reeksamen opnås ved aflevering af og
godkendelse af implementeringsprojekt samt 3 ud af 4 ugeopgaver
senest 2 uger før reeksamen.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelser</p></div></div>",,,,,,,,,,,,,Gemt den 24-02-2025
https://kurser.ku.dk/course/ndab19001u/2025-2026,NDAB19001U Reactive and Event Based Systems (REB),Volume 2025/2026,,"In this advanced course, you will get the chance to learn about the basics of reactive and event-based systems, as well as research-based technologies for implementing reactive and event-based systems with applications in various areas such as business process management systems, large scale data processing and distributed systems, games, robotics, and IoT. Concretely, the course will introduce you to active research topics at DIKU with applications in industry that can serve as a basis for a bachelor project. This means that the course curriculum will consist of a number of research papers and online resources.",Knowledge within Two or more of the following topics (depending on the lecturers' research areas): Topic 1 Declarative Process Models and Event-Based systems: Processes and how to model them Declarative vs. imperative process notations Declarative Process Modelling with Dynamic Condition Response Graphs Topic 2 : Modelling properties of event-based systems as declarative constraints Run-time monitoring of event-based systems with a declarative process engine Process mining and compliance Topic 3 Message passing models and languages for event based systems: Actors and dataflow network Process calculus Microservices and reactive systems programming Topic 4 Event stream processing: Data and programming models for reactive and event stream processing systems Issues of implementing reactive and event stream processing systems Message queues and brokers Skills to Do two or more of the following tasks (depending on the lecturers' research areas): Model event-based systems using formal declarative notations. Model properties as declarative constraints and leverage a declarative process engine to control and monitor event-based systems. Build software solutions based on message passing. Build event-driven applications. Competences to Do two or more of the following activities (depending on the lecturers' research areas): Apply declarative process technologies to model event-based systems. Apply declarative process technologies to describe properties of and monitor event-based systems. Structure and implement a message passing based application to address a concrete problem scenario. Design and implement applications using event stream processing techniques.,See Absalon,"It is important that the student has: -Knowledge of programming as obtained in Programmering og Problemløsning (PoP) and Softwareudvikling (SU). Knowledge of Discrete Math and basic algorithms and data structures as obtained in Diskret Matematik og Algoritmer (DMA) or Discrete Mathematics and Formal Languages (DMFS). It is recommended to have knowledge of computer systems at the level of the DIKU course, Computer Systems (CompSys).","Weekly lectures and modelling or programming tasks in groups, 3 mandatory hand-ins (in groups), deadline approximately every 2nd week.","{'Lectures': 16, 'Preparation': 64, 'Theory exercises': 16, 'Project work': 90, 'Exam Preparation': 19, 'Exam': 1, 'Total': 206}",Written Oral Continuous feedback during the course of the semester The students will be able to book online slots for each group to receive feedback during the course and will also get written feedback on mandatory assignments.,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, 20 minutes (no preparation)</div></dd><dt>Type of assessment details</dt><dd>At the exam the student will be asked to give a presentation (8
min) of one of the mandatory assignments, decided at random at the
exam. There will not be time for preparation at the exam so
presentations of all mandatory assignments should be prepared by
the student before the exam. The students are allowed to
collaborate in the preparation of presentations of assignments.
After the presentation the student will get questions to the
presentation and in general within the entire course
curriculum.</dd><dt>Examination prerequisites</dt><dd><p>There will be 3 mandatory assignments (modelling and/or
programming tasks) during the course that must be approved in order
to be qualified for the exam. </p></dd><dt>Aid</dt><dd>All aids allowed 
<div><p>The student is allowed to bring notes, laptop with the
assignments (to make demonstrations) and a prepared
presentation of each mandatory assignment. </p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship</dd><dt>Re-exam</dt><dd><p>Same as ordinary exam.</p><p>If you are not already qualified for attending the re-exam, you
can achieve qualification by handing in the three mandatory
assignments no later than three weeks before the re-exam week
(and getting these approved).  If you base these on earlier
group assignments, it must be made clear what your new
contributions are.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome. </p></div></div>",English,NDAB19001U,"7,5 ECTS",Bachelor,1 block,Block 2,B,60 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Thomas Troels Hildebrandt (5-6c6d70686944686d326f7932686f)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndab19001u/2024-2025,NDAB19001U Reactive and Event Based Systems (REB),Volume 2024/2025,,"In this advanced course, you will get the chance to learn about the basics of reactive and event-based systems, as well as research-based technologies for implementing reactive and event-based systems with applications in various areas such as business process management systems, large scale data processing and distributed systems, games, robotics, and IoT. Concretely, the course will introduce you to active research topics at DIKU with applications in industry that can serve as a basis for a bachelor project. This means that the course curriculum will consist of a number of research papers and online resources.",Knowledge within Two or more of the following topics (depending on the lecturers' research areas): Topic 1 Declarative Process Models and Event-Based systems: Processes and how to model them Declarative vs. imperative process notations Declarative Process Modelling with Dynamic Condition Response Graphs Topic 2 : Modelling properties of event-based systems as declarative constraints Run-time monitoring of event-based systems with a declarative process engine Process mining and compliance Topic 3 Message passing models and languages for event based systems: Actors and dataflow network Process calculus Microservices and reactive systems programming Topic 4 Event stream processing: Data and programming models for reactive and event stream processing systems Issues of implementing reactive and event stream processing systems Message queues and brokers Skills to Do two or more of the following tasks (depending on the lecturers' research areas): Model event-based systems using formal declarative notations. Model properties as declarative constraints and leverage a declarative process engine to control and monitor event-based systems. Build software solutions based on message passing. Build event-driven applications. Competences to Do two or more of the following activities (depending on the lecturers' research areas): Apply declarative process technologies to model event-based systems. Apply declarative process technologies to describe properties of and monitor event-based systems. Structure and implement a message passing based application to address a concrete problem scenario. Design and implement applications using event stream processing techniques.,See Absalon,"It is important that the student has: -Knowledge of programming as obtained in Programmering og Problemløsning (PoP) and Softwareudvikling (SU). Knowledge of Discrete Math and basic algorithms and data structures as obtained in Diskret Matematik og Algoritmer (DMA) or Discrete Mathematics and Formal Languages (DMFS). It is recommended to have knowledge of computer systems at the level of the DIKU course, Computer Systems (CompSys).","Weekly lectures and modelling or programming tasks in groups, 3 mandatory hand-ins (in groups), deadline approximately every 2nd week.","{'Lectures': 16, 'Preparation': 64, 'Theory exercises': 16, 'Project work': 90, 'Exam Preparation': 19, 'Exam': 1, 'Total': 206}",Written Oral Continuous feedback during the course of the semester The students will be able to book online slots for each group to receive feedback during the course and will also get written feedback on mandatory assignments.,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, 20 minutes (no preparation)</div></dd><dt>Type of assessment details</dt><dd>At the exam the student will be asked to give a presentation (8
min) of one of the mandatory assignments, decided at random at the
exam. There will not be time for preparation at the exam so
presentations of all mandatory assignments should be prepared by
the student before the exam. The students are allowed to
collaborate in the preparation of presentations of assignments.
After the presentation the student will get questions to the
presentation and in general within the entire course
curriculum.</dd><dt>Exam registration requirements</dt><dd><p>There will be 3 mandatory assignments (modelling and/or
programming tasks) during the course that must be approved in order
to be qualified for the exam. </p></dd><dt>Aid</dt><dd>All aids allowed 
<div><p>The student is allowed to bring notes, laptop with the
assignments (to make demonstrations) and a prepared
presentation of each mandatory assignment. </p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship</dd><dt>Re-exam</dt><dd><p>Same as ordinary exam.</p><p>If you are not already qualified for attending the re-exam, you
can achieve qualification by handing in the three mandatory
assignments no later than three weeks before the re-exam week
(and getting these approved).  If you base these on earlier
group assignments, it must be made clear what your new
contributions are.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome. </p></div></div>",English,NDAB19001U,"7,5 ECTS",Bachelor,1 block,Block 2,B,60 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Thomas Troels Hildebrandt (5-6a6b6e666742666b306d7730666d)'],Saved on the 16-02-2024
https://kurser.ku.dk/course/ndab18001u/2024-2025,NDAB18001U Randomiserede algoritmer til dataanalyse (RAD),Årgang 2024/2025,Bacheloruddannelsen i datalogi,"Randomiserede algoritmer er ofte deres traditionelle deterministiske modstykker overlegne. Mange beregningsproblemer er i praksis umulige uden brug af randomisering. Anvendelsesområder, såsom grafalgoritmer og store datastrømme med relevans for maskinlæring og dataanalyse, vil behandles, men fokus vil være på den grundlæggende forståelse for at give den studerende det nødvendige grundlag for at forstå og bruge sandsynligheder i algoritmer og dataanalyse.","Viden om : Relevant kombinatorisk sandsynlighedsteori og randomiserede teknikker i algoritmik: Varians og spredning Haleuligheder Randomiserede datastrukturer Randomiserede algoritmer Analyse af store datastrømme Færdigheder i at : Vise grænser for forventet køretid af randomiserede algoritmer Forklare metoder til at begrænse sandsynligheden for, at en tilfældig variabel afviger langt fra dens forventede værdi Kompetencer til at : Ræsonnere om og anvende randomiserede teknikker til dataanalyseproblemer Finde simple og effektive randomiserde algoritmer og datastrukturer, hvor traditionelle deterministiske metoder er vanskeligere eller mindre effektive","Se Absalon. Forventes at være ""Randomized Algorithms"" af Motwani and Raghavan.","Grundlæggende sandsynlighedsregning svarende til kurset ""Matematisk analyse og sandsynlighedsteori i datalogi"" eller ""Matematisk analyse og statistik i datalogi"" samt grundlæggende algoritmik svarende til kurset ""Algoritmer og datastrukturer"".","Forelæsninger, øvelser, ugeopgaver og et implementeringsprojekt.","{'Forelæsninger': 28, 'Forberedelse (anslået)': 100, 'Teoretiske øvelser': 28, 'Øvelser': 24, 'Projektarbejde': 25, 'Eksamen': 1, 'I alt': 206}",Skriftlig Individuel Kollektiv Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Mundtlig prøve, 30 minutter (30 minutter
forberedelse)</div></dd><dt>Krav til indstilling til eksamen</dt><dd><p>En forudsætning for at gå op til eksamen er aflevering og
godkendelse af implementeringsprojektet samt 3 ud af 4 skriftlige
ugentlige opgaver.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt</dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Samme som ordinær eksamen.</p><p>Kvalificering til reeksamen opnås ved aflevering af og
godkendelse af implementeringsprojekt samt 3 ud af 4 ugeopgaver
senest 2 uger før reeksamen.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelser</p></div></div>",,,,,,,,,,,,,Gemt den 16-02-2024
https://kurser.ku.dk/course/ndab24001u/2024-2025,NDAB24001U Robotic Experiments (REX),Volume 2024/2025,,"This course introduces students to fundamental techniques for mobile autonomous robotics. In this course, a robot is a computer mounted on a chassis with controllable wheels. To allow the robot to perceive its surroundings, a camera and several distance sensors are attached to the computer. This course is oriented towards the practical aspects of mobile robotics and students will in groups solve a set of assignments on the robots. Furthermore, students will be introduced to relevant robotics theory and methods including control, navigation and localization of the robot as well as problem solving with robots. Some methods for analysing sensor data will also be covered. The course finishes with a larger assignment.",Knowledge of Robotics architecture Robot control for moving the robot Collision detection and avoidance Planning in robotics Methods for detection and tracking of static and dynamical targets Methods for localization of the robot in its environment Robots as embedded systems Skills in Use of software libraries for robot control and sensor data processing Programming robots Handling and analysing noisy sensor data Competences in Practical problem solving with robots,See Absalon,You should have passed the following courses: • Programming and Problem solving (PoP) or similar. • Linear algebra for computer scientists (LinAlgDat) or similar. • Modelling and Analysis of Data (MAD) or similar. • Mathematical analysis and statistics in computer science (MASD) or similar.,"A mix of lectures and practical exercises. Students are expected to actively participate in all lectures and exercise classes. Assignments are solved in groups working on a robot. It is impossible to pass the course without active participation in the course, since you will lack the practical experience with working with the robots.","{'Lectures': 14, 'Preparation': 50, 'Practical exercises': 42, 'Project work': 100, 'Total': 206}",Oral Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Practical oral examination, 30 minutes</div></dd><dt>Type of assessment details</dt><dd>Oral examination without preparation time, which consists of a
group demonstration of solution to practical assignment as well as
individual questioning of the students (In total 30 minutes – 15
minutes for group demonstration and 15 minutes for individual oral
examination including grading).
<br/>
During the individual questioning the focus is on assessing the
students understanding of the theory taught on the course.</dd><dt>Aid</dt><dd>All aids allowed 
<div><p>For programming tasks specifically, the use of GitHub Copilot or
similar AI-based programming tools is permitted. The finite list of
allowed AI-tools will be announced in Absalon.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship</dd><dt>Re-exam</dt><dd><p>Oral examination without preparation time, which consists of an
individual demonstration of solution to practical assignment as
well as individual questioning of the students (In total 30 minutes
including grading).</p><p>During the individual questioning the focus is on assessing the
students understanding of the theory taught on the
course.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAB24001U,"7,5 ECTS",Bachelor,1 block,Block 1,C,40 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Hang Yin (4-777088784f73783d7a843d737a)'],Saved on the 26-04-2024
https://kurser.ku.dk/course/ndak24004u/2025-2026,NDAK24004U Search Engines (SE),Volume 2025/2026,MSc Programme in Computer Science,"The course objective is to offer an advanced introduction into search engines. The goal is to understand and model how search engines collect information, transform it and store it internally, and then operate on it in order to satisfy user queries. Through realistic and sound projects, the course aims to stimulate and prepare students for their MSc thesis work. The course will focus on these main questions: How can we design efficient search engines? How can we design effective search engines? Content in detail: Architecture of a search engine Basic building blocks Crawling, filtering and storing information Ranking with indexes Information ranking models Probabilistic & machine learning models Deep learning for search engines Large Language Models (LLMs) for generative search Evaluation and optimisation","Knowledge of The basic architecture of search engines The basic models and techniques for collecting, storing and ranking information Different criteria for search engine evaluation Emergent use of Large Language Models for search engines Skills in Students should be able to transfer the above knowledge to real-world tasks by: Designing appropriate strategies for crawling, storing and ranking information Planning and carrying out appropriate evaluations Given a working search engine, students should be able to: Diagnose problems in its main information processing functions Design and calibrate appropriate solutions Competences to Explain the basic search engine principles to both laymen and specialists Use standard procedures and practices when designing or implementing search engine solutions Present evaluation analyses and results in a proper format of a written report such that a technically qualified person can follow and obtain similar findings","The literature consists of seminal research and review articles from central journals and selected papers from peer-reviewed conferences, textbooks and research reports. This is supplemented with practical experience gained through lab sessions. The literature will be listed in Absalon.",It is expected that students know how to program and have a working knowledge of Machine Learning corresponding to the course Machine Learning A (MLA) or an equivalent course. Academic qualifications equivalent to a BSc degree is recommended.,"The course will use a combination of lectures (2 hours per week) and lab sessions (2 hours per week). Lectures and labs might include discussions, group activities, and student presentations. Where possible, relevant guest lecturers will be involved. Students will carry-out a project which consists of both practical exercises (implementing state of the art solutions) and theoretical questions (to reflect on the course content in relation to the project). The project will cover the main topics presented during the lectures.","{'Lectures': 32, 'Preparation': 80, 'Project work': 71, 'Exam Preparation': 22, 'Exam': 1, 'Total': 206}",Oral Feedback by final exam (In addition to the grade),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 20 minutes (no
preparation)</div></dd><dt>Type of assessment details</dt><dd>Specifically, the exam consists of two parts:
<br/><br/>
1. An individual report (written assignment) based on the project.
<br/>
2. An individual oral examination (without preparation) based on
the report.
<br/><br/>
The written and oral examination are not weighted. Only one overall
assessment is provided for the two parts of the exam.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>For the re-exam the student must complete a new project and
submit a new report. The deadline for submitting the new report
will be published in Absalon.</p><p>Additionally the 20-minutes oral examination without
preparation will be administered covering the full course
syllabus.</p><p>The written and oral examination are not weighted. Only one
overall assessment is provided for the two parts of the exam.</p><p>It is not possible to reuse parts of the exam at a later
exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK24004U,"7,5 ECTS",Full Degree Master,1 block,Block 4,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Christina Lioma (7-6934726f757367466a6f34717b346a71)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndab24001u/2025-2026,NDAB24001U Robotic Experiments (REX),Volume 2025/2026,,"This course introduces students to fundamental techniques for mobile autonomous robotics. In this course, a robot is a computer mounted on a chassis with controllable wheels. To allow the robot to perceive its surroundings, a camera and several distance sensors are attached to the computer. This course is oriented towards the practical aspects of mobile robotics and students will in groups solve a set of assignments on the robots. Furthermore, students will be introduced to relevant robotics theory and methods including control, navigation and localization of the robot as well as problem solving with robots. Some methods for analysing sensor data will also be covered. The course finishes with a larger assignment.",Knowledge of Robotics architecture Robot control for moving the robot Collision detection and avoidance Planning in robotics Methods for detection and tracking of static and dynamical targets Methods for localization of the robot in its environment Robots as embedded systems Skills in Use of software libraries for robot control and sensor data processing Programming robots Handling and analysing noisy sensor data Competences in Practical problem solving with robots,See Absalon,You should have passed the following courses: • Programming and Problem solving (PoP) or similar. • Linear algebra for computer scientists (LinAlgDat) or similar. • Modelling and Analysis of Data (MAD) or similar. • Mathematical analysis and statistics in computer science (MASD) or similar.,"A mix of lectures and practical exercises. Students are expected to actively participate in all lectures and exercise classes. Assignments are solved in groups working on a robot. It is impossible to pass the course without active participation in the course, since you will lack the practical experience with working with the robots.","{'Lectures': 14, 'Preparation': 50, 'Practical exercises': 42, 'Project work': 100, 'Total': 206}",Oral Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Practical oral examination, 30 minutes</div></dd><dt>Type of assessment details</dt><dd>Oral examination without preparation time, which consists of a
group demonstration of solution to practical assignment as well as
individual questioning of the students (In total 30 minutes – 15
minutes for group demonstration and 15 minutes for individual oral
examination including grading).
<br/>
During the individual questioning the focus is on assessing the
students understanding of the theory taught on the course.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship</dd><dt>Re-exam</dt><dd><p>Oral examination without preparation time, which consists of an
individual demonstration of solution to practical assignment as
well as individual questioning of the students (In total 30 minutes
including grading).</p><p>During the individual questioning the focus is on assessing the
students understanding of the theory taught on the
course.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAB24001U,"7,5 ECTS",Bachelor,1 block,Block 1,C,40 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Hang Yin (4-6b647c6c43676c316e7831676e)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak24004u/2024-2025,NDAK24004U Search Engines (SE),Volume 2024/2025,MSc Programme in Computer Science,"The course objective is to offer an advanced introduction into search engines. The goal is to understand and model how search engines collect information, transform it and store it internally, and then operate on it in order to satisfy user queries. Through realistic and sound projects, the course aims to stimulate and prepare students for their MSc thesis work. The course will focus on these main questions: How can we design efficient retrieval systems? How can we design effective retrieval systems? Content in detail: Architecture of an IR system Basic building blocks Crawling, filtering and storing information Ranking with indexes Information ranking models Probabilistic & machine learning models Complex queries and combining evidence Deep learning for search engines Evaluation and optimisation","Knowledge of The basic architecture of search engines The basic models and techniques for collecting, storing and ranking information Different criteria for search engine evaluation Skills in Students should be able to transfer the above knowledge to real-world tasks by: Designing appropriate strategies for crawling, storing and ranking information Planning and carrying out appropriate evaluations Given a working search engine, students should be able to: Diagnose problems in its main information processing functions Design and calibrate appropriate solutions Competences to Explain the basic search engine principles to both laymen and specialists Use standard procedures and practices when designing or implementing search engine solutions Present evaluation analyses and results in a proper format of a written report such that a technically qualified person can follow and obtain similar findings","The literature consists of seminal research and review articles from central journals and selected papers from peer-reviewed conferences, textbooks and research reports. This is supplemented with practical experience gained through lab sessions. The literature will be listed in Absalon.",It is expected that students know how to program and have a working knowledge of Machine Learning corresponding to the course Machine Learning (ML) or an equivalent course. Academic qualifications equivalent to a BSc degree is recommended.,"The course will use a combination of lectures (2 hours per week) and lab sessions (2 hours per week). Lectures and labs might include discussions, group activities, and student presentations. Where possible, relevant guest lecturers will be involved. Students will carry-out a project which consists of both practical exercises (implementing state of the art solutions) and theoretical questions (to reflect on the course content in relation to the project). The project will cover the main topics presented during the lectures.","{'Lectures': 32, 'Preparation': 80, 'Project work': 71, 'Exam Preparation': 22, 'Exam': 1, 'Total': 206}",Oral Feedback by final exam (In addition to the grade),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 20 minutes (no
preparation)</div></dd><dt>Type of assessment details</dt><dd>Specifically, the exam consists of two parts:
<br/><br/>
1. An individual report (written assignment) based on the project.
<br/>
2. An individual oral examination (without preparation) based on
the report.
<br/><br/>
The written and oral examination are not weighted. Only one overall
assessment is provided for the two parts of the exam.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>For the re-exam the student must complete a new project and
submit a new report. The deadline for submitting the new report
will be published in Absalon.</p><p>Additionally the 20-minutes oral examination without
preparation will be administered covering the full course
syllabus.</p><p>The written and oral examination are not weighted. Only one
overall assessment is provided for the two parts of the exam.</p><p>It is not possible to reuse parts of the exam at a later
exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK24004U,"7,5 ECTS",Full Degree Master,1 block,Block 4,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Christina Lioma (7-65306e6b716f6342666b306d7730666d)'],Saved on the 14-02-2024
https://kurser.ku.dk/course/ndaa08006u/2025-2026,NDAA08006U Semantics and Types (SaT),Volume 2025/2026,MSc Programme in Computer Science,"The aim of the course is to introduce students to the fundamental concepts and tools of modern programming-language theory. This includes the relevant descriptive approaches (formal semantics and type systems), their instantiations and applications to concrete situations, and the mathematical principles for reasoning about them. The topics covered in the course provide a comprehensive formal basis for developing reliable programs and programming languages, but also equip students with a standardised terminology and conceptual framework for communicating effectively with other developers and researchers, including in follow-up coursework and projects within the PLS study track of the Computer Science programme. Students will be introduced to the following: Basic principles of deductive systems: judgments and inference rules, structural induction, induction on derivations. Operational semantics (big-step and small-step) of simple imperative and functional languages; equivalence of programs; equivalence of semantics. Axiomatic semantics of imperative languages (Hoare logic); soundness and completeness of program logics. Denotational semantics, including simple domain theory. Type systems for functional languages (simple types and selected extensions); type soundness through preservation and progress; type inference. Machine-supported reasoning: proof assistants, proof-carrying code.","At course completion, the successful student will have: Knowledge of General principles for specifying and reasoning about formal systems. A selection of specific formal systems, including semantics, type systems, and program logics. Techniques for proving properties of individual programs or program fragments, including equivalence of programs, and their correctness with respect to a specification. Techniques for proving properties of whole formal systems, including equivalence of semantics, and soundness of program logics and type systems. Machine-verifiable representations of formal-system theory and metatheory. Skills to Read and write specifications of formal systems relating to programming language theory. Decide and prove properties of programs or program fragments. Decide and prove properties of programming languages or particular language features. Present the relevant constructions and proofs in writing, using precise terminology and an appropriate level of technical detail. Competences to Reason reliably about correctness or other properties of both imperative and functional programs. Analyse and design (typically domain-specific) programming languages or programming-language features in accordance with best practices Communicate effectively about programming-language theory, including accessing relevant research literature, and convincingly presenting the results of own work.","See Absalon for a list of course literature. Expected to be primarily lecture notes, supplemented by selected research articles and other materials.","Comfortable working knowledge of foundational discrete mathematics and rigorous reasoning (elementary set theory, proofs by induction), compiler principles (context-free grammars, syntax-directed compilation), and functional programming (familiarity with ML/F#, Haskell, or Scheme/Racket) will be expected. General academic qualifications equivalent to a CS or Mathematics BSc degree are recommended. Some prior exposure to basic formal logic (propositional and first-order logic, natural deduction) and logic programming (Prolog) may be useful, but is not required.","Lectures, theoretical assignments, exercise sessions.","{'Lectures': 35, 'Preparation': 140, 'Theory exercises': 14, 'Exam': 17, 'Total': 206}","Written Individual Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade) Students will receive detailed written feedback on their homework assignments, as well as a summary of their performance on the exam questions.","Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, 32 hours</div></dd><dt>Type of assessment details</dt><dd>The exam is strictly individual</dd><dt>Examination prerequisites</dt><dd><p>5 out of 6 weekly assignments must be approved in order to
qualify for the exam.</p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam consists of two parts:</p><p>1. A 32-hours individual written assignment</p><p>2. A 30 minutes oral examination without preparation</p><p>The two exams are not weighted, and an overall assessment is
provided.</p><p>If student did not qualify for the regular exam, qualification
for the re-exam can be achieved by submission and approval of
equivalent assignments, no later than three weeks before the
re-exam date.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAA08006U,"7,5 ECTS",Full Degree Master,1 block,Block 3,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Andrzej Filinski (7-738076848c777c52767b407d8740767d)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndaa08006u/2024-2025,NDAA08006U Semantics and Types (SaT),Volume 2024/2025,MSc Programme in Computer Science,"The aim of the course is to introduce students to the fundamental concepts and tools of modern programming-language theory. This includes the relevant descriptive approaches (formal semantics and type systems), their instantiations and applications to concrete situations, and the mathematical principles for reasoning about them. The topics covered in the course provide a comprehensive formal basis for developing reliable programs and programming languages, but also equip students with a standardised terminology and conceptual framework for communicating effectively with other developers and researchers, including in follow-up coursework and projects within the PLS study track of the Computer Science programme. Students will be introduced to the following: Basic principles of deductive systems: judgments and inference rules, structural induction, induction on derivations. Operational semantics (big-step and small-step) of simple imperative and functional languages; equivalence of programs; equivalence of semantics. Axiomatic semantics of imperative languages (Hoare logic); soundness and completeness of program logics. Denotational semantics, including simple domain theory. Type systems for functional languages (simple types and selected extensions); type soundness through preservation and progress; type inference. Machine-supported reasoning: proof assistants, proof-carrying code.","At course completion, the successful student will have: Knowledge of General principles for specifying and reasoning about formal systems. A selection of specific formal systems, including semantics, type systems, and program logics. Techniques for proving properties of individual programs or program fragments, including equivalence of programs, and their correctness with respect to a specification. Techniques for proving properties of whole formal systems, including equivalence of semantics, and soundness of program logics and type systems. Machine-verifiable representations of formal-system theory and metatheory. Skills to Read and write specifications of formal systems relating to programming language theory. Decide and prove properties of programs or program fragments. Decide and prove properties of programming languages or particular language features. Present the relevant constructions and proofs in writing, using precise terminology and an appropriate level of technical detail. Competences to Reason reliably about correctness or other properties of both imperative and functional programs. Analyse and design (typically domain-specific) programming languages or programming-language features in accordance with best practices Communicate effectively about programming-language theory, including accessing relevant research literature, and convincingly presenting the results of own work.","See Absalon for a list of course literature. Expected to be primarily lecture notes, supplemented by selected research articles and other materials.","Comfortable working knowledge of foundational discrete mathematics and rigorous reasoning (elementary set theory, proofs by induction), compiler principles (context-free grammars, syntax-directed compilation), and functional programming (familiarity with ML/F#, Haskell, or Scheme) will be expected. General academic qualifications equivalent to a CS or Mathematics BSc degree are recommended. Some prior exposure to basic formal logic (propositional and first-order logic, natural deduction) and logic programming (Prolog) may be useful, but is not required.","Lectures, theoretical assignments, exercise sessions.","{'Lectures': 35, 'Preparation': 140, 'Theory exercises': 14, 'Exam': 17, 'Total': 206}","Written Individual Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade) Students will receive detailed written feedback on their homework assignments, as well as a summary of their performance on the exam questions.","Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, 32 hours</div></dd><dt>Type of assessment details</dt><dd>The exam is strictly individual</dd><dt>Exam registration requirements</dt><dd><p>5 out of 6 weekly assignments must be approved in order to
qualify for the exam.</p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam consists of two parts:</p><p>1. A 32-hours individual written assignment</p><p>2. A 30 minutes oral examination without preparation</p><p>The two exams are not weighted, and an overall assessment is
provided.</p><p>If student did not qualify for the regular exam, qualification
for the re-exam can be achieved by submission and approval of
equivalent assignments, no later than three weeks before the
re-exam date.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAA08006U,"7,5 ECTS",Full Degree Master,1 block,Block 3,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Andrzej Filinski (7-647167757d686d43676c316e7831676e)'],Saved on the 15-02-2024
https://kurser.ku.dk/course/ndaa09027u/2025-2026,NDAA09027U Signal and Image Processing (SIP),Volume 2025/2026,MSc Programme in Computer Science MSc Programme in Physics,"The course introduces basic computational, statistical, and mathematical techniques for representing, modeling, and analysing signals and images. Signals and images are measurements, which are correlated over time and/or space, and these measurements typically originate from a physical system ordered on a grid. Examples are 1-dimensional sound, 2-dimensional images from a consumer camera, 3-dimensional reconstructions from medical scanners, and movies. Applications include; removal of high-frequency noise in signals, and detecting and segmenting objects in images.","Knowledge of Signal and image processing fundamentals. Sampling, Sampling theorem, Fourier transform. Convolution, linear and nonlinear filtering. Image restoration, inverse filtering. Image histograms. Image segmentation. Multiresolution processing. Linear and non-linear spatial transformations of images. Mathematical morphology. Skills to Apply basic signal processing methods to solve basic signal processing problems. Competences to Evaluate which signal/image processing methods and pipeline of methods is best suited for solving a given signal problem. Understand the implications of theoretical theorems and being able to analyse real problems on that basis.",See Absalon for a list of course literature.,"Academic qualifications equivalent to a BSc degree in computer science is recommended or mathematics skills equivalent to Linear Algebra, Mathematical Analysis and Probability Theory for Computer Scientists (MASD), and Modelling and Analysis of Data (MAD). Skills in computational thinking as obtained on PoP, DMA, LinAlgDat, and MASD or similar. As well as be proficient in Python programming as can be obtained in MASD and MAD or similar.","The course will be a mixture of lectures, pen-and-paper exercises, and programming exercises.","{'Lectures': 32, 'Class Instruction': 24, 'Preparation': 64, 'Exercises': 86, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment of 5-7 written assignments (of which 1-2
are individual and 4-5 are group assignments).
<br/><br/>
The final grade is based on an overall assessment of all
assignments.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>A 25 minutes oral examination (including grading) without
preparation in course curriculum</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p><p> </p></div></div>",English,NDAA09027U,"7,5 ECTS",Full Degree Master,1 block,Block 3,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Kim Steenstrup Pedersen (6-7c7a7e84858151757a3f7c863f757c)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak23003u/2024-2025,NDAK23003U Simulation-based Reinforcement Learning (SiRL),Volume 2024/2025,,"Combining physical simulation with machine learning opens up the possibility of solving a large repertoire of challenges that previously have been impossible to solve. It is a future-enabling technology. This simulation-based learning approach is highly relevant in scenarios where data is limited or not easily available. In such a scenario the simulator provides a model or prior for the learning process. The learning-based process can on the other hand bridge the gap to reality as it allows the simulator to incorporate knowledge of the real world better through data. In combination, both flavours combined can provide solutions for the control of very advanced systems, typical robots, for solving quite complex problems. As a whole, this field of simulation-based learning addresses many interesting issues such as motion control, motion imitation, and system identification like parameter estimation, or digital twinning, for instance creating data-driven models of humans, etc. These are highly relevant for solving actual real-world challenges. Such as advanced autonomous robotics manipulation and navigation, prediction or detection of human motion for improved health-care services, creation of realistic computer animations for XR, movies, and computer games, or in digital twining such as learning the physics of the carbon dioxide cycle in soil which is an important aspect of predicting climate consequences from farming. Many more examples exist. This course will prepare students for working with this world-changing technology. This course is ideal for students who wish to work with simulation-based learning in their master's thesis. It is particularly ideal for students who want to work with robotics or character animation, or content creation for XR. Students are expected to solve weekly practical exercises mostly programming with python, but some C++ could be involved, as well as some lab-space work as well. Students are expected to be self-driven in getting the software to work on their own devices, like installing an auto differentiation framework and making it run. Students could be exposed to working with vision or motion capture data.","Knowledge of Fundamentals of articulated body dynamics. Using computer vision and motion capture data as labels on loss functions Concepts in optimal control such as open and closed loop control, PD controllers, etc. Computational Graphs, forward- and reverse-mode automatic differentiation. The adjoint method, adjoint state equation, and sensitivity analysis. Techniques for program transformation Auto-differentiation tools & differentiable simulator frameworks such as DiffTaiChi, Phyton Warp, JAX, MuJoCo, and more. Simulation-based reinforcement learning, model-predictive control (MPC). Augmenting differentiable simulators with neural networks. Skills in Using a differentiable simulator to compute gradients. Deriving the models for trajectory optimization and policy optimization and explaining their differences. Competences to Solve motion imitation problems, such as inferring dynamics from video or motion capture data. Solve motion control problems such as grasping, manipulation, locomotion, or navigation. Solve system identification problems such as parameter estimation from video.",See Absalon when the course is set up.,"We recommend academic qualifications equivalent to a BSc degree. We recommend students to have passed courses that involve python programming, linear algebra, calculus (analytical computing derivatives of functions), and solving minimization problems with gradient descent methods.",A mixture of lectures and exercise classes on project group work with written hand-ins.,"{'Lectures': 28, 'Preparation': 52, 'Exercises': 28, 'Project work': 70, 'Exam Preparation': 27, 'Exam': 1, 'Total': 206}",Written Oral Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, 30 minutes (no preparation time)</div></dd><dt>Type of assessment details</dt><dd>The exam takes an outset in theory taught over the course.
Students should be able to derive theory/math on the blackboard
during the examination.</dd><dt>Exam registration requirements</dt><dd><p>To qualify for the exam, the student must complete all reports.
There will be 3-4 short reports during the course. The reports can
be made as a group or as individual reports. Each report should be
a maximum of 5 pages. </p></dd><dt>Aid</dt><dd>Without aids</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>In order to obtain the grade 12 the student should convincingly
and accurately demonstrate the knowledge, skills and competences
described under Learning Outcome.</p></div></div>",English,NDAK23003U,"7,5 ECTS",Full Degree Master,1 block,Block 4,A,30 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Hang Yin (4-777088784f73783d7a843d737a)'],Saved on the 17-04-2024
https://kurser.ku.dk/course/ndaa09027u/2024-2025,NDAA09027U Signal and Image Processing (SIP),Volume 2024/2025,MSc Programme in Computer Science MSc Programme in Physics,"The course introduces basic computational, statistical, and mathematical techniques for representing, modeling, and analysing signals and images. Signals and images are measurements, which are correlated over time and/or space, and these measurements typically originate from a physical system ordered on a grid. Examples are 1-dimensional sound, 2-dimensional images from a consumer camera, 3-dimensional reconstructions from medical scanners, and movies. Applications include; removal of high-frequency noise in signals, and detecting and segmenting objects in images.","Knowledge of Signal and image processing fundamentals. Sampling, Sampling theorem, Fourier transform. Convolution, linear and nonlinear filtering. Image restoration, inverse filtering. Image histograms. Image segmentation. Multiresolution processing. Linear and non-linear spatial transformations of images. Mathematical morphology. Skills to Apply basic signal processing methods to solve basic signal processing problems. Competences to Evaluate which signal/image processing methods and pipeline of methods is best suited for solving a given signal problem. Understand the implications of theoretical theorems and being able to analyse real problems on that basis.",See Absalon for a list of course literature.,"Academic qualifications equivalent to a BSc degree in computer science is recommended or mathematics skills equivalent to Linear Algebra, Mathematical Analysis and Probability Theory for Computer Scientists (MASD), and Modelling and Analysis of Data (MAD). Skills in computational thinking as obtained on PoP, DMA, LinAlgDat, and MASD or similar. As well as be proficient in Python programming as can be obtained in MASD and MAD or similar.","The course will be a mixture of lectures, pen-and-paper exercises, and programming exercises.","{'Lectures': 32, 'Class Instruction': 24, 'Preparation': 64, 'Exercises': 86, 'Total': 206}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment of 5-7 written assignments (of which 1-2
are individual and 4-5 are group assignments).
<br/><br/>
The final grade is based on an overall assessment of all
assignments.</dd><dt>Aid</dt><dd>All aids allowed 
<div><p>For programming tasks specifically, the use of GitHub Copilot or
similar AI-based programming tools is permitted. The finite list of
allowed AI-tools will be announced in Absalon.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>A 25 minutes oral examination (including grading) without
preparation in course curriculum</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p><p> </p></div></div>",English,NDAA09027U,"7,5 ECTS",Full Degree Master,1 block,Block 3,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Kim Steenstrup Pedersen (6-716f73797a76466a6f34717b346a71)'],Saved on the 15-02-2024
https://kurser.ku.dk/course/ndak23003u/2025-2026,NDAK23003U Simulation-based Reinforcement Learning (SiRL),Volume 2025/2026,,"Combining physical simulation with machine learning opens up the possibility of solving a large repertoire of challenges that previously have been impossible to solve. It is a future-enabling technology. This simulation-based learning approach is highly relevant in scenarios where data is limited or not easily available. In such a scenario the simulator provides a model or prior for the learning process. The learning-based process can on the other hand bridge the gap to reality as it allows the simulator to incorporate knowledge of the real world better through data. In combination, both flavours combined can provide solutions for the control of very advanced systems, typical robots, for solving quite complex problems. As a whole, this field of simulation-based learning addresses many interesting issues such as motion control, motion imitation, and system identification like parameter estimation, or digital twinning, for instance creating data-driven models of humans, etc. These are highly relevant for solving actual real-world challenges. Such as advanced autonomous robotics manipulation and navigation, prediction or detection of human motion for improved health-care services, creation of realistic computer animations for XR, movies, and computer games, or in digital twining such as learning the physics of the carbon dioxide cycle in soil which is an important aspect of predicting climate consequences from farming. Many more examples exist. This course will prepare students for working with this world-changing technology. This course is ideal for students who wish to work with simulation-based learning in their master's thesis. It is particularly ideal for students who want to work with robotics or character animation, or content creation for XR. Students are expected to solve weekly practical exercises mostly programming with python, but some C++ could be involved, as well as some lab-space work as well. Students are expected to be self-driven in getting the software to work on their own devices, like installing an auto differentiation framework and making it run. Students could be exposed to working with vision or motion capture data.","Knowledge of Fundamentals of articulated body dynamics. Using computer vision and motion capture data as labels on loss functions Concepts in optimal control such as open and closed loop control, PD controllers, etc. Computational Graphs, forward- and reverse-mode automatic differentiation. The adjoint method, adjoint state equation, and sensitivity analysis. Techniques for program transformation Auto-differentiation tools & differentiable simulator frameworks such as DiffTaiChi, Phyton Warp, JAX, MuJoCo, and more. Simulation-based reinforcement learning, model-predictive control (MPC). Augmenting differentiable simulators with neural networks. Skills in Using a differentiable simulator to compute gradients. Deriving the models for trajectory optimization and policy optimization and explaining their differences. Competences to Solve motion imitation problems, such as inferring dynamics from video or motion capture data. Solve motion control problems such as grasping, manipulation, locomotion, or navigation. Solve system identification problems such as parameter estimation from video.",See Absalon when the course is set up.,"We recommend academic qualifications equivalent to a BSc degree. We recommend students to have passed courses that involve python programming, linear algebra, calculus (analytical computing derivatives of functions), and solving minimization problems with gradient descent methods.",A mixture of lectures and exercise classes on project group work with written hand-ins.,"{'Lectures': 28, 'Preparation': 52, 'Exercises': 28, 'Project work': 70, 'Exam Preparation': 27, 'Exam': 1, 'Total': 206}",Written Oral Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, 30 minutes (no preparation time)</div></dd><dt>Type of assessment details</dt><dd>The exam takes an outset in theory taught over the course.
Students should be able to derive theory/math on the blackboard
during the examination.</dd><dt>Examination prerequisites</dt><dd><p>To qualify for the exam, the student must complete all reports.
There will be 3-4 short reports during the course. The reports can
be made as a group or as individual reports. Each report should be
a maximum of 5 pages. </p></dd><dt>Aid</dt><dd>No aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>In order to obtain the grade 12 the student should convincingly
and accurately demonstrate the knowledge, skills and competences
described under Learning Outcome.</p></div></div>",English,NDAK23003U,"7,5 ECTS",Full Degree Master,1 block,Block 4,A,30 The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Hang Yin (4-6d667e6e45696e33707a336970)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak23004u/2024-2025,NDAK23004U Societal Consequences of Information Technology (SoCIT),Volume 2024/2025,,"Technical systems, no matter how well intended, can often fail in real-world implementation in different ways (consider sundhedsplatformen, MitID, etc). This course will explore the reasons for successes and failures and ways these could be pre-empted or mitigated through approaches that focus on the societal and human context of technology. Students will learn how to engage with complex societal problems when applying computer science techniques, drawing on established theories and practices in human-centred computing and interaction design. We will reflect on ethical issues and consequences of applying computer science methods to address societal problems, and consider relevant strategies and methods based on such reflections for understanding and the kinds of technologies we might create. The course is composed of three modules built around focused project work: Approaches to problem identification and exploration, including considerations of data and separation of concerns between technology development and human interaction. Experimenting with prototyping solutions to identified problems, including questions of optimisation, algorithmic correctness, and assumptions of accessibility and usability. Conducting prototype evaluation and reflection, including considerations of the limits of models and discussions of ethics.","Knowledge of Theories and methods in human-centered computing Current debates on ethics, fairness, and privacy in computing Field methods for identifying and exploring Information Technology problems in society Skills to Systematically identify problems in society and conduct exploratory research to understand these problems. Conceptualise, prototype and evaluate solutions, paying attention to implications of technological intervention Analyze and discuss potential benefits and pitfalls of computer science methods in relation to rights and ethics in society. Competences in Reflecting on ethical issues and societal consequences of the application of computer science methods Examining the implications of technological solutions for societal challenges Identifying the relevant computer science methods based on potential ethical issues and societal consequences",Research papers and selected book chapters - See Absalon,Academic qualifications equivalent to a BSc degree recommended,"Learning activities will include lectures, seminars, workshops, empirical data collection and analysis, user evaluation sessions, flipped classroom and peer feedback sessions, and hands-on clinics teaching students the basics of problem identification and problem space exploration.","{'Lectures': 24, 'Preparation': 33, 'Exercises': 24, 'Project work': 125, 'Total': 206}",Written Oral Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, during course</div></dd><dt>Type of assessment details</dt><dd>The written assessment will be an individual paper based on the
group work. The students will develop a prototype through group
work during the course.
<br/>
The individual exam paper, will describe the development process
for the group prototype and reflect on the outcomes.
<br/>
Both the individual paper and the group-produced prototype
description must be submitted.</dd><dt>Exam registration requirements</dt><dd><p>Three required group assignments must be submitted throughout
the course to be eligible for the exam. Assignments will be
assessed with a pass/no pass grade and will receive
feedback.</p></dd><dt>Aid</dt><dd>All aids allowed 
<div><p>The use of Large Language Models (LLM)/Large Multimodal Models
(LMM) – such as ChatGPT and GPT-4 – is permitted. However, text
generated from LLM/LMMs must be clearly marked where such tools are
used for purposes beyond editing the student’s own text via tools
such as Grammarly for example.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam has the same form as the ordinary exam.</p><p>If the student is not yet qualified to participating in the
exam, then qualification can be achieved by handing-in the three
assignments no later than three weeks before the week of the
re-exam in order to qualify for the re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK23004U,"7,5 ECTS",Full Degree Master,1 block,Block 1,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Irina Alex Shklovski (3-70687a476b7035727c356b72)'],Saved on the 26-04-2024
https://kurser.ku.dk/course/ndak23004u/2025-2026,NDAK23004U Societal Consequences of Information Technology (SoCIT),Volume 2025/2026,,"Technical systems, no matter how well intended, can often fail in real-world implementation in different ways (consider sundhedsplatformen, MitID, etc). This course will explore the reasons for successes and failures and ways these could be pre-empted or mitigated through approaches that focus on the societal and human context of technology. Students will learn how to engage with complex societal problems when applying computer science techniques, drawing on established theories and practices in human-centred computing and interaction design. We will reflect on ethical issues and consequences of applying computer science methods to address societal problems, and consider relevant strategies and methods based on such reflections for understanding and the kinds of technologies we might create. The course is composed of three modules built around focused project work: Approaches to problem identification and exploration, including considerations of data and separation of concerns between technology development and human interaction. Experimenting with prototyping solutions to identified problems, including questions of optimisation, algorithmic correctness, and assumptions of accessibility and usability. Conducting prototype evaluation and reflection, including considerations of the limits of models and discussions of ethics.","Knowledge of Theories and methods in human-centered computing Current debates on ethics, fairness, and privacy in computing Field methods for identifying and exploring Information Technology problems in society Skills to Systematically identify problems in society and conduct exploratory research to understand these problems. Conceptualise, prototype and evaluate solutions, paying attention to implications of technological intervention Analyze and discuss potential benefits and pitfalls of computer science methods in relation to rights and ethics in society. Competences in Reflecting on ethical issues and societal consequences of the application of computer science methods Examining the implications of technological solutions for societal challenges Identifying the relevant computer science methods based on potential ethical issues and societal consequences",Research papers and selected book chapters - See Absalon,Academic qualifications equivalent to a BSc degree recommended,"Learning activities will include lectures, seminars, workshops, empirical data collection and analysis, user evaluation sessions, flipped classroom and peer feedback sessions, and hands-on clinics teaching students the basics of problem identification and problem space exploration.","{'Lectures': 24, 'Preparation': 33, 'Exercises': 24, 'Project work': 125, 'Total': 206}",Written Oral Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, during course</div></dd><dt>Type of assessment details</dt><dd>The written assessment will be an individual paper based on the
group work. The students will develop a prototype through group
work during the course.
<br/>
The individual exam paper, will describe the development process
for the group prototype and reflect on the outcomes.
<br/>
Both the individual paper and the group-produced prototype
description must be submitted.</dd><dt>Examination prerequisites</dt><dd><p>Three required group assignments must be submitted throughout
the course to be eligible for the exam. Assignments will be
assessed with a pass/no pass grade and will receive
feedback.</p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam has the same form as the ordinary exam.</p><p>If the student is not yet qualified to participating in the
exam, then qualification can be achieved by handing-in the three
assignments no later than three weeks before the week of the
re-exam in order to qualify for the re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK23004U,"7,5 ECTS",Full Degree Master,1 block,Block 1,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Irina Alex Shklovski (3-6f6779466a6f34717b346a71)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndab22007u/2025-2026,NDAB22007U Software Development for Digital Health,Volume 2025/2026,Bachelor in Health and Informatics,"The course provides an introduction to the elementary elements in the development of IT systems in the healthcare system. The course focuses on system development and software engineering techniques: requirements specification, basic UML diagrams and system development methods. As software integrates with information systems, the student will acquire skills in modelling and manipulation of data in relational databases. Finally, the course will equip the student with skills in data communication via information exchange.","After completing the course, the student is expected to be able to: Knowledge of - The overall different software development processes - What a requirement specification is and how it is prepared - Testing methods for software and how it is prepared Skills in - Choosing a system development method in relation to a given task and its context, including employees, type of organization and technology - Eliciting and validating software requirements - Designing a software system using simple use-case diagrams, sequence diagrams, class diagrams and activity diagrams - Justifying the choice of data types and data model Competences to - Participate in a software-development oriented project in collaboration framed in the context of healthcare applications - Reflect on the challenges of developing large IT systems in a health context - Develop a simple object-oriented program with user interface and interaction to a database - Create and manipulate databases using SQL, and communicate their design using Entity Relationship Diagrams",See Absalon,Programming knowledge corresponding to the skills achieved in NDAB21003U Python programmering til datavidenskab.,"Lectures, exercises, workshops and assignments","{'Lectures': 24, 'Preparation': 88, 'Exercises': 24, 'Project work': 50, 'Exam': 20, 'Total': 206}","Written Oral Individual Continuous feedback during the course of the semester Peer feedback (Students give each other feedback) Lecturer's oral or written feedback on writing assignments, continuous reflection on their own learning, and peer feedback.","Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment</div><div>Oral examination, Mundtlig prøve, 20 min. uden forberedelse
med opsyn.</div></dd><dt>Type of assessment details</dt><dd>The exam consists of two part:
<br/><br/>
1) An individual written summary of the projects done during the
course. The summary must be handed in at the end of the course.
<br/>
2) An individual oral exam (20 min. without preparation) that is
based on the before mentioned summary.
<br/><br/>
The two parts are given an overall assessment.</dd><dt>Examination prerequisites</dt><dd><p>The group will deliver 2-4 project submissions during the
course. The submissions are mandatory to access the exam.</p></dd><dt>Aid</dt><dd>All aids allowed 
<div><p>Tools based on AI/LLM’s, including generative
AI/LLM, can be used as an aid for the exam. How these tolls
are used shall be described in the description of the method.
It is the responsibility of the student to ensure the accuracy,
integrity, and originality of the text, including ensuring that the
text is not factually incorrect, plagiarized or contains
copyrighted material. </p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam is the same as the ordinary exam.</p><p>The summary may be revised and resubmitted incl. a list of the
changes made. </p><p>If student is not qualified for the exam, qualification can
be achieved by submitting three weeks before the reexam week and
approval of the mandatory assignments.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAB22007U,"7,5 ECTS",Bachelor,1 semester,Spring,The classes are expected to be on Mondays and Thursday in order to fit with the schedule of the students in the bachelor programme for Health and Informatics. If you study something else we encourage you to contact the course organizer to ensure that you do not have a scheduling conflict,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,"['Study Board for Public Health Science, Global Health and Health Informatics']",['Department of Computer Science'],['Faculty of Science'],['Tariq Osman Andersen (5-7764756c7443676c316e7831676e)'],Saved on the 28-04-2025
https://kurser.ku.dk/course/ndak20001u/2024-2025,NDAK20001U Software Engineering and Architecture (SEA),Volume 2024/2025,MSc Programme in Computer Science,"Software engineering represents the principles, methods, tools, and techniques involved in the design, development, implementation, and maintenance of software systems. The software architecture of a system defines “the structures of the system, which comprise software components, the externally visible properties of those components, and the relationships among them”. In order to design a software system, we need to structure it in such a way that functional and quality requirements can be fulfilled by an implementation. The purpose of this course is to provide an overview of the different aspects and stages involved in the engineering of software with a special focus on architectural properties of large systems. Assuming that course participants are acquainted with basic software development principles, this course will provide knowledge on and experience with the wider aspects and stages in the lifecycle of a (large) software system. During this course the students will be introduced to the general principles of software engineering, methods for addressing software engineering problems, common tools and techniques for solving software engineering problems, and methods, tools, and techniques for designing software systems and their architecture. The course will include lectures and exercises in the following subjects: Project Management Requirements Elicitation Architectural Analysis, Description, Synthesis, Prototyping & Evaluation Software Design and Development Software Implementation Quality Assurance Maintenance and Evolution Software Business","Knowledge of How software systems are designed, developed, implemented, and maintained The necessary principles in the engineering of software systems Methods, tools, and techniques to design, develop, implement, and maintain software Quality attributes, including definitions, characterisation, and tactics Patterns for software design Software architecture design techniques (Architectural) design description Design and architecture evaluation Fundamental concepts of and techniques in software design Skills to Manage the processes of designing, developing, implementing, and maintaining software systems Communicate the design and architecture of a system Control the quality of the produced software Plan the maintenance of (large) software systems Predict evolution of (large) software systems Elicit functional and quality requirements of software systems Design systems and software architectures so that they satisfy relevant quality constraints Describe existing systems and software architectures with relevant software description techniques Evaluate existing systems and software architectures with respect to relevant qualities Characterise functional and quality requirements while acting as an opponent with respect to fellow students’ workability requirements of software systems Competences to Document and communicate their engineering process Critically read and apply existing methods, tools, and techniques Document and communicate the architecture of a system Iteratively and incrementally design a complex software system Analyse complex software systems with respect to their software architecture",See Absalon for a list of course literature.,"Substantial experience with object-oriented programming languages is required, in particular, either JAVA, C#, or JavaScript. Students will be expected to understand and work with a large codebase in one of these languages. Academic qualifications equivalent to a BSc degree is recommended.","Video lectures, workshops, and projects.","{'Lectures': 48, 'Preparation': 112, 'Project work': 224, 'Exam Preparation': 27, 'Exam': 1, 'Total': 412}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>15 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 25 minutes
(including grading)</div></dd><dt>Type of assessment details</dt><dd>Oral examination with 25 minutes with preparation. Part of the
examination is based on the group-based project report and the
report must be submitted to take part in the oral exam. There will
be an individual question component and grades will be based on
this.</dd><dt>Aid</dt><dd>Only certain aids allowed 
<div><p>Only the following materials are allowed at the
oral examination:</p><p>• The group-based project report</p><p>• The presentation slides</p><p>• Source code for the project</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners.</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>The student report must be submitted no later than two weeks
before the re-exam week.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK20001U,15 ECTS,Full Degree Master,2 blocks,Block 3 And Block 4,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],"['Tijs Slaats (6-7c756a6a7d7c496d7237747e376d74)', 'Rodrigo Nunes Laigner (3-787472466a6f34717b346a71)']",Saved on the 04-04-2025
https://kurser.ku.dk/course/ndab22007u/2024-2025,NDAB22007U Software Development for Digital Health,Volume 2024/2025,Bachelor in Health and Informatics,"The course provides an introduction to the elementary elements in the development of IT systems in the healthcare system. The course focuses on system development and software engineering techniques: requirements specification, basic UML diagrams and system development methods. As software integrates with information systems, the student will acquire skills in modelling and manipulation of data in relational databases. Finally, the course will equip the student with skills in data communication via information exchange.","After completing the course, the student is expected to be able to: Knowledge of - The overall different software development processes - What a requirement specification is and how it is prepared - Testing methods for software and how it is prepared Skills in - Choosing a system development method in relation to a given task and its context, including employees, type of organization and technology - Eliciting and validating software requirements - Designing a software system using simple use-case diagrams, sequence diagrams, class diagrams and activity diagrams - Justifying the choice of data types and data model Competences to - Participate in a software-development oriented project in collaboration framed in the context of healthcare applications - Reflect on the challenges of developing large IT systems in a health context - Develop a simple object-oriented program with user interface and interaction to a database - Create and manipulate databases using SQL, and communicate their design using Entity Relationship Diagrams",See Absalon,Programming knowledge corresponding to the skills achieved in NDAB21003U Python programmering til datavidenskab.,"Lectures, exercises, workshops and assignments","{'Lectures': 24, 'Preparation': 88, 'Exercises': 24, 'Project work': 50, 'Exam': 20, 'Total': 206}","Written Oral Individual Continuous feedback during the course of the semester Peer feedback (Students give each other feedback) Lecturer's oral or written feedback on writing assignments, continuous reflection on their own learning, and peer feedback.","Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment</div><div>Oral examination, Mundtlig prøve, 20 min. uden forberedelse
med opsyn.</div></dd><dt>Type of assessment details</dt><dd>The exam consists of two part:
<br/><br/>
1) An individual written summary of the projects done during the
course. The summary must be handed in at the end of the course.
<br/>
2) An individual oral exam (20 min. without preparation) that is
based on the before mentioned summary.
<br/><br/>
The two parts are given an overall assessment.</dd><dt>Exam registration requirements</dt><dd><p>The group will deliver 2-4 project submissions during the
course. The submissions are mandatory to access the exam.</p></dd><dt>Aid</dt><dd>All aids allowed 
<div><p>For programming tasks specifically, the use of GitHub Copilot or
similar AI-based programming tools is permitted. The finite list of
allowed AI-tools will be announced in Absalon.</p><p>Tools based on AI/LLM’s, including generative
AI/LLM, can be used as an aid for the exam. How these tolls
are used shall be described in the description of the method.
It is the responsibility of the student to ensure the accuracy,
integrity, and originality of the text, including ensuring that the
text is not factually incorrect, plagiarized or contains
copyrighted material. </p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam is the same as the ordinary exam.</p><p>The summary may be revised and resubmitted incl. a list of the
changes made. </p><p>If student is not qualified for the exam, qualification can
be achieved by submitting three weeks before the reexam week and
approval of the mandatory assignments.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAB22007U,"7,5 ECTS",Bachelor,1 semester,Spring,The classes are expected to be on Mondays and Thursday in order to fit with the schedule of the students in the bachelor programme for Health and Informatics. If you study something else we encourage you to contact the course organizer to ensure that you do not have a scheduling conflict,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Health Informatics'],['Department of Computer Science'],['Faculty of Science'],['Asta Halkjær From (4-6476697543676c316e7831676e)'],Saved on the 28-10-2024
https://kurser.ku.dk/course/ndak20001u/2025-2026,NDAK20001U Software Engineering and Architecture (SEA),Volume 2025/2026,MSc Programme in Computer Science,"Software engineering represents the principles, methods, tools, and techniques involved in the design, development, implementation, and maintenance of software systems. The software architecture of a system defines “the structures of the system, which comprise software components, the externally visible properties of those components, and the relationships among them”. In order to design a software system, we need to structure it in such a way that functional and quality requirements can be fulfilled by an implementation. The purpose of this course is to provide an overview of the different aspects and stages involved in the engineering of software with a special focus on architectural properties of large systems. Assuming that course participants are acquainted with basic software development principles, this course will provide knowledge on and experience with the wider aspects and stages in the lifecycle of a (large) software system. During this course the students will be introduced to the general principles of software engineering, methods for addressing software engineering problems, common tools and techniques for solving software engineering problems, and methods, tools, and techniques for designing software systems and their architecture. The course will include lectures and exercises in the following subjects: Project Management Requirements Elicitation Architectural Analysis, Description, Synthesis, Prototyping & Evaluation Software Design and Development Software Implementation Quality Assurance Maintenance and Evolution Software Business","Knowledge of How software systems are designed, developed, implemented, and maintained The necessary principles in the engineering of software systems Methods, tools, and techniques to design, develop, implement, and maintain software Quality attributes, including definitions, characterisation, and tactics Patterns for software design Software architecture design techniques (Architectural) design description Design and architecture evaluation Fundamental concepts of and techniques in software design Skills to Manage the processes of designing, developing, implementing, and maintaining software systems Communicate the design and architecture of a system Control the quality of the produced software Plan the maintenance of (large) software systems Predict evolution of (large) software systems Elicit functional and quality requirements of software systems Design systems and software architectures so that they satisfy relevant quality constraints Describe existing systems and software architectures with relevant software description techniques Evaluate existing systems and software architectures with respect to relevant qualities Characterise functional and quality requirements while acting as an opponent with respect to fellow students’ workability requirements of software systems Competences to Document and communicate their engineering process Critically read and apply existing methods, tools, and techniques Document and communicate the architecture of a system Iteratively and incrementally design a complex software system Analyse complex software systems with respect to their software architecture",See Absalon for a list of course literature.,"Substantial experience with object-oriented programming languages is required, in particular, either JAVA, C#, or JavaScript. Students will be expected to understand and work with a large codebase in one of these languages. Academic qualifications equivalent to a BSc degree is recommended.","Video lectures, workshops, and projects.","{'Lectures': 48, 'Preparation': 112, 'Project work': 224, 'Exam Preparation': 27, 'Exam': 1, 'Total': 412}",Written Individual Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>15 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 25 minutes (without
preparation &amp; including grading)</div></dd><dt>Type of assessment details</dt><dd>Oral examination, 25 minutes without preparation. Part of the
examination is based on the group-based project report and the
report must be submitted to take part in the oral exam. There will
be an individual question component and grades will be based on
this.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners.</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>The student report must be submitted no later than two weeks
before the re-exam week.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK20001U,15 ECTS,Full Degree Master,2 blocks,Block 3 And Block 4,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Tijs Slaats (6-847d7272858451757a3f7c863f757c)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak21007u/2025-2026,NDAK21007U Software Security (SOS),Volume 2025/2026,,"The course is focused on software security studied from a programming language perspective. The course will present a variety of techniques based on programming language semantics that serve to improve or guarantee the security of a program. Topics that will be covered in the course include information-flow control, vulnerability analysis, and software-fault isolation and sand-boxing. We will address the problem of security of a variety of languages (high- and low-level) coming from different programming paradigms. The course will provide introductions to relevant program analysis techniques such as abstract interpretation and type systems and demonstrate their applications on a selection of use cases.","Knowledge of Basic software security policies, their formalisation as program properties. The role of a precise (formal) semantics for a programming language in developing techniques for enforcing security policies. Skills to Describe properties relevant to software security and define what they mean precisely. Formalize ideas and concepts into rigorous definitions and make falsifiable (or provable) statements about them. Competences to Read, assess and communicate research papers in language-based security. Apply central results in the given area of studies.","See Absalon for the final curriculum, but it will contain: Course notes. Research articles and excerpts from books, distributed electronically.",Proactive Computer Security (PCS) and Semantics and Types (SaT) are recommended,"Lectures, in-class exercises, group work on programming and analysis assignments.","{'Lectures': 28, 'Preparation': 146, 'Exercises': 21, 'Exam Preparation': 10, 'Exam': 1, 'Total': 206}",Oral Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 30
minutes</div></dd><dt>Type of assessment details</dt><dd>The exam has two parts:
<br/>
1) 3-4 individual/group written assignments during the course
<br/>
2) an individual oral exam (30 minutes) based on the written
assignments.
<br/>
The final grade is based on an overall assessment of the handed-in
assignments and the oral exam.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>A resubmission of revised written assignments and a 30 minutes
individual oral examination without
preparation. </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK21007U,"7,5 ECTS",Full Degree Master,1 block,Block 1,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Thomas Philip Jensen (4-766a6c6742666b306d7730666d)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak21007u/2024-2025,NDAK21007U Software Security (SOS),Volume 2024/2025,,"The course is focused on software security studied from a programming language perspective. The course will present a variety of techniques based on programming language semantics that serve to improve or guarantee the security of a program. Topics that will be covered in the course include information-flow control, vulnerability analysis, and software-fault isolation and sand-boxing. We will address the problem of security of a variety of languages (high- and low-level) coming from different programming paradigms. The course will provide introductions to relevant program analysis techniques such as abstract interpretation and type systems and demonstrate their applications on a selection of use cases.","Knowledge of Basic software security policies, their formalisation as program properties. The role of a precise (formal) semantics for a programming language in developing techniques for enforcing security policies. Skills to Describe properties relevant to software security and define what they mean precisely. Formalize ideas and concepts into rigorous definitions and make falsifiable (or provable) statements about them. Competences to Read, assess and communicate research papers in language-based security. Apply central results in the given area of studies.","See Absalon for the final curriculum, but it will contain: Course notes. Research articles and excerpts from books, distributed electronically.",Proactive Computer Security (PCS) and Semantics and Types (SaT) are recommended,"Lectures, in-class exercises, group work on programming and analysis assignments.","{'Lectures': 28, 'Preparation': 146, 'Exercises': 21, 'Exam Preparation': 10, 'Exam': 1, 'Total': 206}",Oral Individual Collective Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 30
minutes</div></dd><dt>Type of assessment details</dt><dd>The exam has two parts:
<br/>
1) 3-4 individual/group written assignments during the course
<br/>
2) an individual oral exam (30 minutes) based on the written
assignments.
<br/>
The final grade is based on an overall assessment of the handed-in
assignments and the oral exam.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>A resubmission of revised written assignments and a 30 minutes
individual oral examination without
preparation. </p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK21007U,"7,5 ECTS",Full Degree Master,1 block,Block 1,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Thomas Philip Jensen (4-837779744f73783d7a843d737a)'],Saved on the 14-02-2024
https://kurser.ku.dk/course/ndab15011u/2025-2026,NDAB15011U Softwareudvikling (SU),Årgang 2025/2026,Bacheloruddannelsen i bioinformatik Bacheloruddannelsen i datalogi,"Kurset introducerer studerende til fundamentale teknikker og værktøjer indenfor softwareudvikling. Emnerne i kurset inkluderer værktøjer, miljøer og metoder til udvikling, kvalitetssikring og vedligeholdelse af software, samt brug af komponenter, biblioteker og frameworks. Undervisningen tilrettelægges således, at de studerende i grupper udvikler en realistisk slutbrugerapplikation med givne krav under anvendelse af teknikker og værktøjer fra kurset.","Kursets mål er at gøre de studerende i stand til at udvikle større slutbrugerapplikationer i mindre projektgrupper. Efter kurset forventes de studerende at have: Viden om værktøjer til applikationsudvikling inklusive integrerede programmeringsmiljøer, konfigurationsstyringsværktøjer og værktøjer til automatisering softwaredesign (inklusiv modularitet, mønstre og arkitektur) softwarekonstruktion (inklusiv god udviklingspraksis) verifikation og validering (inklusiv review, test og analyse) Færdigheder i at programmere en slutbrugerapplikation i et givet udviklingsmilljø beskrive og dokumentere krav for, samt design og konstruktion af, en applikation designe en applikation, så den opfylder givne krav verificere og validere, at en applikation opfylder et design anvende eksisterende biblioteker og komponenter til at udvikle en applikation anvende værktøjer til applikationsprogrammering Kompetencer til at samarbejde struktureret omkring softwareudvikling i en gruppe konstruere en applikation ud fra et design lære at anvende nye biblioteker og komponenter",Offentliggøres på kursets Absalon-side ved kursusstart.,"Grundlæggende kendskab til: Programmering svarende til kurset Programmering og Problemløsning (PoP); Vektorer i 3D, kalkulus og linear algebra; Diskret matematik grundlæggende algoritmer og datastrukturer svarende kurset Diskret Matematik og Algoritmer (DMA).","Individuelle afleveringsopgaver, projektarbejde, holdundervisning, forelæsninger, workshop(s).","{'Forelæsninger': 56, 'Holdundervisning': 73, 'Øvelser': 100, 'Projektarbejde': 150, 'Seminar': 4, 'Eksamensforberedelse': 28, 'Eksamen': 1, 'I alt': 412}",Skriftlig Mundtlig Individuel Kollektiv Løbende feedback i undervisningsforløbet Feedback ved afsluttende eksamen (ud over karakteren),Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>15 ECTS</dd><dt>Prøveform</dt><dd><div>Mundtlig prøve på baggrund af aflevering, 20
minutter</div></dd><dt>Prøveformsdetaljer</dt><dd>De studerende laver et gruppebaseret softwareudviklingsprojekt
i løbet af kurset. Idet samarbejde er del af læringsmålene, skal
grupper bestå af 3-4 personer. Der gives kun i usædvanlige
tilfælde tilladelse til andre gruppestørrelser.
<br/><br/>
Softwareudviklingsprojektet består af
gruppens udviklede software, inklusiv påkrævet
dokumentation, reviews, tests og
en skriftlig rapport, der beskriver softwaren og dens
udvikling. Softwareudviklingsprojektet afleveres (efter nærmere
anvisning i et skybaseret softwarearkivsystem såsom GitHub)
senest to uger før den mundtlige eksamen.
<br/><br/>
Den mundtlige prøve er individuel med udgangspunkt i gruppens
afleverede skriftlige rapport og softwarearkiv. Den består af et
oplæg med udgangspunkt i de individuelle bidrag til projektarbejdet
på maks. 10 minutter med hjælpemidler (medbring egen bærbar), samt
efterfølgende spørgsmål, som kan dække hele kursets pensum.</dd><dt>Eksamensforudsætninger</dt><dd><p>De studerende skal opnå 80% af de mulige point
i individuelle og gruppebaserede afleveringsopgaver med
afleveringsfrist hver eller hver anden uge. Afleveringsopgaverne
kan indeholde både teoretiske og programmeringsopgaver.</p><p>Detaljer om afleveringsopgaver, herunder tidsfrister og
pointsætning, vil blive offentliggjort ved kursusstart.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt</dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Samme som ordinær eksamen.</p><p>
Studerende, der ikke er kvalificeret til
den ordinære eksamen, kan opnå kvalificering til reeksamen
ved at aflevere eventuelt manglende løsninger til
obligatoriske afleveringsopgaver. Ligesom ved den ordinære
eksamenskvalifikation skal 80% af de kvalificerende
afleveringsopgaver godkendes.</p><p>Hvis den studerende ikke har været i en gruppe og lavet et
softwareudviklingsprojekt til den ordinære eksamen, der kan
genafleveres, så skal der laves en individuel programmerings-
og rapportopgave. Denne offentliggøres efter den ordinære
eksamen og i omfang svarer til et gennemsnitligt individuelt
bidrag til den ordinære eksamen. </p><p>Deadline for aflevering af de kvalificerende afleveringsopgaver,
samt rapportopgave eller softwareprojekt er tre uger før
re-eksamen, den specifikke dato vil blive offentligtgjort på
Absalon.</p><p>Studerende, der har opnået de fornødne 80% på
afleveringsopgaverne kan vælge at gå op til reeksamen på basis af
deres tidligere afleverede gruppebaserede softwareprojekt eller på
basis af en individuel programmerings- og rapportopgave som
ovenfor.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen</p></div></div>",,,,,,,,,,,,,Gemt den 24-02-2025
https://kurser.ku.dk/course/ndak17002u/2025-2026,NDAK17002U Subjects in Blockchain Technology (SBT),Volume 2025/2026,,"The term blockchain encompasses decentralised peer-to-peer systems maintaining a joint ledger (log of events) without central control or privileged platform providers or users, as well as applications conceived for and made possible by such technology. Blockchain has gained much interest due to the growing interest in Bitcoin and other cryptocurrencies. However, the potential of blockchain technology is not limited to transfers of cryptocurrencies but expands to a variety of smart contracts. Some believe it has the potential to revolutionise the world just like the internet did. We will engage in a ""blockchain summer of code'', 4 weeks of software development where we will have a compact introduction to state-of-the-art blockchain technology, followed by implementing a prototype in a team to solve a real-world problem using blockchain technology. Examples of potential projects are contract management languages, identity (Know-Your-Customer, data mining), reporting and applications such as backup, bill of lading and resource tracking. Each team can choose a blockchain platform (such as the Ethereum network or R3 Corda) that is adequate for the particular use case. We look for diversified groups of participants from different technical disciplines including computer science, economics, mathematics, engineering, etc.) as the project will depend not only on the technology but also on the usability of the solutions.","Knowledge of A distributed ledger (= blockchain) platform supporting executing programs (""smart contracts"") such as Ethereum or Corda Important characteristics of and corresponding techniques for implementing distributed ledgers Potential of distributed ledger technology for solving real-world problems Skills to Design, analyse, implement and test smart contract code on a state-of-the-art distributed ledger platform Set up and deploy prototype smart contract code on a distributed ledger test system Analyse suitability of applications for implementation on a particular distributed ledger system Competences to Design basic distributed ledger-based solutions to real-world problems Produce rapid prototypes of distributed ledger applications Report and present findings of a group project",A reading list of relevant up-to-date articles that will be distributed to the participants at the start of the course. If you wish to prepare a before the course we would suggest looking into these three generalised ledgers: Ethereum Corda Hyperledger Fabric,"Some programming experience in e.g. Python or Java is recommended. Furthermore, we recommend looking into Solidity programming in advance. Academic qualifications equivalent to a BSc degree is recommended.","The blockchain summer school will include 2 days of full introductory classes, followed by 48 hours hackathon to build a prototype of your group initial project (the rest of the course will work on extending this case study project). The 5th day would include feedback on your group hackathon project + participation in the Nordic Blockchain Summit. This intensive week will be followed up with a group project with weekly status assessment and possibilities to ask questions to further your group project. Please see blockchainschool.eu for more details.","{'Lectures': 20, 'Preparation': 45, 'Project work': 140, 'Exam': 1, 'Total': 206}",Oral Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! If you are not a student at The Faculty of Science at The University of Copenhagen click here . For guest students: we hope to offer the Blockchain summer school for free and in Copenhagen. Please see blockchainschool.eu for more details.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 20
minutes</div></dd><dt>Type of assessment details</dt><dd>Specifically, the exam consists of two parts:
<br/><br/>
1. A group report (written assignment) based on the group project.
<br/>
2. An individual oral examination (without preparation) based on
the group report.
<br/><br/>
The written and oral examination are not weighted, why only one
overall assessment is provided for the entire exam.</dd><dt>Examination prerequisites</dt><dd><p>Submission of weekly status updates (specific guidelines
will be given during the course.)</p></dd><dt>Aid</dt><dd>All aids allowed except Generative AI 
<div><p>Students are allowed to bring their group project
report.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>The written project report can be revised and resubmitted.</p><p>If a student has not qualified for the exam or handed in a
project report, then the student must prepare a full project
on their own and submit the project report. The exam
qualification must be met no later than three weeks prior to
the re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK17002U,"7,5 ECTS",Full Degree Master,1 block,Summer The course will run full time for 3 weeks in August. At the beginning of the course a detailed study plan will be sent to all participants.,In August full time for 3 weeks.,"40 students out of which 15 spaces are reserved for students from other technical disciplines than computer science (e.g. industry participants, mathematics, engineering, etc.). The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.",['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Omry Ross (4-716f746b42666b306d7730666d)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndab15011u/2024-2025,NDAB15011U Softwareudvikling (SU),Årgang 2024/2025,Bacheloruddannelsen i bioinformatik Bacheloruddannelsen i datalogi,"Kurset introducerer studerende til fundamentale teknikker og værktøjer indenfor softwareudvikling. Emnerne i kurset inkluderer værktøjer, miljøer og metoder til udvikling, kvalitetssikring og vedligeholdelse af software, samt brug af komponenter, biblioteker og frameworks. Undervisningen tilrettelægges således, at de studerende i grupper udvikler en realistisk slutbrugerapplikation med givne krav under anvendelse af teknikker og værktøjer fra kurset.","Kursets mål er at gøre de studerende i stand til at udvikle større slutbrugerapplikationer i mindre projektgrupper. Efter kurset forventes de studerende at have: Viden om værktøjer til applikationsudvikling inklusive integrerede programmeringsmiljøer, konfigurationsstyringsværktøjer og værktøjer til automatisering softwaredesign (inklusiv modularitet, mønstre og arkitektur) softwarekonstruktion (inklusiv god udviklingspraksis) verifikation og validering (inklusiv review, test og analyse) Færdigheder i at programmere en slutbrugerapplikation i et givet udviklingsmilljø beskrive og dokumentere krav for, samt design og konstruktion af, en applikation designe en applikation, så den opfylder givne krav verificere og validere, at en applikation opfylder et design anvende eksisterende biblioteker og komponenter til at udvikle en applikation anvende værktøjer til applikationsprogrammering Kompetencer til at samarbejde struktureret omkring softwareudvikling i en gruppe konstruere en applikation ud fra et design lære at anvende nye biblioteker og komponenter",Offentliggøres på kursets Absalon-side ved kursusstart.,Grundlæggende kendskab til: Programmering svarende til kurset Programmering og Problemløsning (PoP); Vektorer i 3D svarende til Matematik A på gymnasieniveau; Diskret matematik grundlæggende algoritmer og datastrukturer svarende kurset Diskret Matematik og Algoritmer (DMA).,"Individuelle afleveringsopgaver, projektarbejde, holdundervisning, forelæsninger, workshop(s).","{'Forelæsninger': 56, 'Holdundervisning': 73, 'Øvelser': 100, 'Projektarbejde': 150, 'Seminar': 4, 'Eksamensforberedelse': 28, 'Eksamen': 1, 'I alt': 412}",Skriftlig Mundtlig Individuel Kollektiv Løbende feedback i undervisningsforløbet Feedback ved afsluttende eksamen (ud over karakteren),Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>15 ECTS</dd><dt>Prøveform</dt><dd><div>Mundtlig prøve på baggrund af aflevering, 20
minutter</div></dd><dt>Prøveformsdetaljer</dt><dd>De studerende laver et gruppebaseret softwareudviklingsprojekt
i løbet af kurset. Idet samarbejde er del af læringsmålene, skal
grupper bestå af 3-4 personer. Der gives kun i usædvanlige
tilfælde tilladelse til andre gruppestørrelser.
<br/><br/>
Softwareudviklingsprojektet består af
gruppens udviklede software, inklusiv påkrævet
dokumentation, reviews, tests og
en skriftlig rapport, der beskriver softwaren og dens
udvikling. Softwareudviklingsprojektet afleveres (efter nærmere
anvisning i et skybaseret softwarearkivsystem såsom GitHub)
senest to uger før den mundtlige eksamen.
<br/><br/>
Den mundtlige prøve er individuel med udgangspunkt i gruppens
afleverede skriftlige rapport og softwarearkiv. Den består af et
oplæg med udgangspunkt i de individuelle bidrag til projektarbejdet
på maks. 10 minutter med hjælpemidler (medbring egen bærbar), samt
efterfølgende spørgsmål, som kan dække hele kursets pensum.</dd><dt>Krav til indstilling til eksamen</dt><dd><p>De studerende skal opnå 80% af de mulige point
i individuelle og gruppebaserede afleveringsopgaver med
afleveringsfrist hver eller hver anden uge. Afleveringsopgaverne
kan indeholde både teoretiske og programmeringsopgaver.</p><p>Detaljer om afleveringsopgaver, herunder tidsfrister og
pointsætning, vil blive offentliggjort ved kursusstart.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt</dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Samme som ordinær eksamen.</p><p>
Studerende, der ikke er kvalificeret til
den ordinære eksamen, kan opnå kvalificering til reeksamen
ved at aflevere eventuelt manglende løsninger til
obligatoriske afleveringsopgaver. Ligesom ved den ordinære
eksamenskvalifikation skal 80% af de kvalificerende
afleveringsopgaver godkendes.</p><p>Hvis den studerende ikke har været i en gruppe og lavet et
softwareudviklingsprojekt til den ordinære eksamen, der kan
genafleveres, så skal der laves en individuel programmerings-
og rapportopgave. Denne offentliggøres efter den ordinære
eksamen og i omfang svarer til et gennemsnitligt individuelt
bidrag til den ordinære eksamen. </p><p>Deadline for aflevering af de kvalificerende afleveringsopgaver,
samt rapportopgave eller softwareprojekt er tre uger før
re-eksamen, den specifikke dato vil blive offentligtgjort på
Absalon.</p><p>Studerende, der har opnået de fornødne 80% på
afleveringsopgaverne kan vælge at gå op til reeksamen på basis af
deres tidligere afleverede gruppebaserede softwareprojekt eller på
basis af en individuel programmerings- og rapportopgave som
ovenfor.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen</p></div></div>",,,,,,,,,,,,,Gemt den 14-02-2024
https://kurser.ku.dk/course/ndab20010u/2024-2025,NDAB20010U Sundhedsdata og interoperabilitet,Årgang 2024/2025,Bacheloruddannelsen i sundhed og informatik,"Høj kvalitet af sundhedsdata har afgørende betydning for behandlingskvalitet, patientsikkerhed, sammenhæng i patientforløb, afregning, kvalitetssikring og forskning. Vurdering af datakvalitet samt pålidelig udveksling af data på tværs af behandlingsenheder og sektorer kræver anvendelse af fælles datastandarder, terminologier og klassifikationssystemer. I dette kursus behandles følgende emner: Indsamling og kvalitetssikring af sundhedsdata (mht. reliabilitet, validitet, aktualitet og fuldstændighed); forskellige typer af data (fx kvalitative vs kvantitative, ustrukturerede vs strukturerede); termer, koder og klassifikationer; kliniske terminologier og klassifikationssystemer (fx ICD-10, SKS og SNOMED-CT); datastandarder (fx Medcom-standarder og HL7); semantisk interoperabilitet; aggregering af sundhedsdata; patientgenererede data (fx PRO).","Efter endt kursus forventes den studerende at kunne: Viden redegøre for de forskellige typer af data, der indsamles og anvendes i sundhedsvæsenet redegøre for de væsentligste kliniske terminologier og klassifikationssystemer, der anvendes i sundhedsvæsenet forklare begrebet interoperabilitet og redegøre for de væsentligste datastandarder, der anvendes i sundhedsvæsenet Færdigheder analysere og evaluere reliabilitet, validitet, aktualitet og fuldstændighed af konkrete typer af sundhedsdata analysere muligheder og barrierer for indsamling og kvalitetssikring af sundhedsdata analysere muligheder og barrierer for øget anvendelse af fælles datastandarder, terminologier og klassifikationssystemer foreslå og vurdere relevante strategier til at forbedre interoperabilitet og datakvalitet i praksis Kompetencer omsætte teoretiske begreber og modeller til selvstændige analyser af datakvalitet, standarder og interoperabilitet",Se Absalon.,,"Forelæsninger, seminarer, gruppeopgaver, hjemmearbejde og skriftlige opgaver.","{'Forelæsninger': 42, 'Holdundervisning': 28, 'Forberedelse (anslået)': 171, 'Studiegrupper': 28, 'I alt': 269}",Mundtlig Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>10 ECTS</dd><dt>Prøveform</dt><dd><div>Mundtlig prøve, 20. minutter</div></dd><dt>Prøveformsdetaljer</dt><dd>Den mundtlige eksamen består af den studerende giver en
præsentation (8 min), der sætter pensum i relation til de fire
gruppeafleveringer. Efterfølgende vil der blive stillet uddybende
spørgsmål, hvor den studerende selv skal kunne reflektere over de
anvendte teknologier og metode.</dd><dt>Krav til indstilling til eksamen</dt><dd><p>Aflevering af fire skriftlige obligatoriske gruppeopgaver i
relation til kursets centrale temaer er et krav for at gå til
eksamen. Grupper kan bestå af 2-5 personer. Gruppeopgaverne har et
omfang på maksimalt 10 normalsider. Det er tilladt at benytte
AI-værktøjer, men den studerende skal til eksamen selv kunne
forklare og forsvare indholdet af de afleverede opgaver, samt sætte
i relation til pensum.
<br/>
 </p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt 
<div><p>Værktøjer, der er baseret på AI, herunder generativ AI/LLM, må
benyttes som hjælpemiddel. Det skal af beskrivelsen af metode
fremgå, hvordan disse er brugt. Det er den studerendes ansvar at
sikre besvarelsens nøjagtighed, integritet og originalitet inklusiv
at sikre, at besvarelsen ikke er faktuelt ukorrekt, plagieret eller
indeholder materiale med copyright.</p><p>Den studerende skal til eksamen selv kunne forklare og forsvare
indholdet af de afleverede opgaver, samt sætte i relation til
pensum.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Mundtlig prøve, 20 minutter, med forberedelse i 30
minutter. </p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>For at opnå karakteren 12 skal den studerende demonstrere fuld
opfyldelse af målbeskrivelsen for
kurset.</p></div></div>",,,,,,,,,,,,,Gemt den 04-07-2024
https://kurser.ku.dk/course/ndak17002u/2024-2025,NDAK17002U Subjects in Blockchain Technology (SBT),Volume 2024/2025,,"The term blockchain encompasses decentralised peer-to-peer systems maintaining a joint ledger (log of events) without central control or privileged platform providers or users, as well as applications conceived for and made possible by such technology. Blockchain has gained much interest due to the growing interest in Bitcoin and other cryptocurrencies. However, the potential of blockchain technology is not limited to transfers of cryptocurrencies but expands to a variety of smart contracts. Some believe it has the potential to revolutionise the world just like the internet did. We will engage in a ""blockchain summer of code'', 4 weeks of software development where we will have a compact introduction to state-of-the-art blockchain technology, followed by implementing a prototype in a team to solve a real-world problem using blockchain technology. Examples of potential projects are contract management languages, identity (Know-Your-Customer, data mining), reporting and applications such as backup, bill of lading and resource tracking. Each team can choose a blockchain platform (such as the Ethereum network or R3 Corda) that is adequate for the particular use case. We look for diversified groups of participants from different technical disciplines including computer science, economics, mathematics, engineering, etc.) as the project will depend not only on the technology but also on the usability of the solutions.","Knowledge of A distributed ledger (= blockchain) platform supporting executing programs (""smart contracts"") such as Ethereum or Corda Important characteristics of and corresponding techniques for implementing distributed ledgers Potential of distributed ledger technology for solving real-world problems Skills to Design, analyse, implement and test smart contract code on a state-of-the-art distributed ledger platform Set up and deploy prototype smart contract code on a distributed ledger test system Analyse suitability of applications for implementation on a particular distributed ledger system Competences to Design basic distributed ledger-based solutions to real-world problems Produce rapid prototypes of distributed ledger applications Report and present findings of a group project",A reading list of relevant up-to-date articles that will be distributed to the participants at the start of the course. If you wish to prepare a before the course we would suggest looking into these three generalised ledgers: Ethereum Corda Hyperledger Fabric,"Some programming experience in e.g. Python or Java is recommended. Furthermore, we recommend looking into Solidity programming in advance. Academic qualifications equivalent to a BSc degree is recommended.","The blockchain summer school will include 2 days of full introductory classes, followed by 48 hours hackathon to build a prototype of your group initial project (the rest of the course will work on extending this case study project). The 5th day would include feedback on your group hackathon project + participation in the 5th Nordic Blockchain Summit. This intensive week will be followed up with a group project with weekly status assessment and possibilities to ask questions to further your group project. Please see blockchainschool.eu for more details.","{'Lectures': 20, 'Preparation': 45, 'Project work': 140, 'Exam': 1, 'Total': 206}",Oral Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! If you are not a student at The Faculty of Science at The University of Copenhagen click here . For guest students: we hope to offer the Blockchain summer school for free and in Copenhagen. Please see blockchainschool.eu for more details.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 20
minutes</div></dd><dt>Type of assessment details</dt><dd>Specifically, the exam consists of two parts:
<br/><br/>
1. A group report (written assignment) based on the group project.
<br/>
2. An individual oral examination (without preparation) based on
the group report.
<br/><br/>
The written and oral examination are not weighted, why only one
overall assessment is provided for the entire exam.</dd><dt>Exam registration requirements</dt><dd><p>Submission of weekly status updates (specific guidelines
will be given during the course.)</p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>The written project report can be revised and resubmitted.</p><p>If a student has not qualified for the exam or handed in a
project report, then the student must prepare a full project
on their own and submit the project report. The exam
qualification must be met no later than three weeks prior to
the re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK17002U,"7,5 ECTS",Full Degree Master,1 block,Summer The course will run full time for 3 weeks in August. At the beginning of the course a detailed study plan will be sent to all participants.,In August full time for 3 weeks.,"40 students out of which 15 spaces are reserved for students from other technical disciplines than computer science (e.g. industry participants, mathematics, engineering, etc.). The number of places might be reduced if you register in the late-registration period (BSc and MSc) or as a credit or single subject student.",['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Omry Ross (4-7e7c81784f73783d7a843d737a)'],Saved on the 17-09-2024
https://kurser.ku.dk/course/ndab20010u/2025-2026,NDAB20010U Sundhedsdata og interoperabilitet,Årgang 2025/2026,Bacheloruddannelsen i sundhed og informatik,"Høj kvalitet af sundhedsdata har afgørende betydning for behandlingskvalitet, patientsikkerhed, sammenhæng i patientforløb, afregning, kvalitetssikring og forskning. Vurdering af datakvalitet samt pålidelig udveksling af data på tværs af behandlingsenheder og sektorer kræver anvendelse af fælles datastandarder, terminologier og klassifikationssystemer. I dette kursus behandles følgende emner: Indsamling og kvalitetssikring af sundhedsdata (mht. reliabilitet, validitet, aktualitet og fuldstændighed); forskellige typer af data (fx kvalitative vs kvantitative, ustrukturerede vs strukturerede); termer, koder og klassifikationer; kliniske terminologier og klassifikationssystemer (fx ICD-10, SKS og SNOMED-CT); datastandarder (fx Medcom-standarder og HL7); semantisk interoperabilitet; aggregering af sundhedsdata; patientgenererede data (fx PRO).","Efter endt kursus forventes den studerende at kunne: Viden redegøre for de forskellige typer af data, der indsamles og anvendes i sundhedsvæsenet redegøre for de væsentligste kliniske terminologier og klassifikationssystemer, der anvendes i sundhedsvæsenet forklare begrebet interoperabilitet og redegøre for de væsentligste datastandarder, der anvendes i sundhedsvæsenet Færdigheder analysere og evaluere reliabilitet, validitet, aktualitet og fuldstændighed af konkrete typer af sundhedsdata analysere muligheder og barrierer for indsamling og kvalitetssikring af sundhedsdata analysere muligheder og barrierer for øget anvendelse af fælles datastandarder, terminologier og klassifikationssystemer foreslå og vurdere relevante strategier til at forbedre interoperabilitet og datakvalitet i praksis Kompetencer omsætte teoretiske begreber og modeller til selvstændige analyser af datakvalitet, standarder og interoperabilitet",Se Absalon.,,"Forelæsninger, seminarer, gruppeopgaver, hjemmearbejde og skriftlige opgaver.","{'Forelæsninger': 42, 'Holdundervisning': 28, 'Forberedelse (anslået)': 171, 'Studiegrupper': 28, 'I alt': 269}",Mundtlig Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>10 ECTS</dd><dt>Prøveform</dt><dd><div>Mundtlig prøve, 20 minutter</div></dd><dt>Prøveformsdetaljer</dt><dd>Den mundtlige eksamen består af den studerende giver en
præsentation (8 min), der sætter pensum i relation til en af de
fire gruppeafleveringer, som tildeles tilfældigt til eksamen. Den
studerende forventes derfor at have forberedt en præsentation til
hver gruppeaflevering. Efterfølgende vil der blive stillet
uddybende spørgsmål til alle emner, hvor den studerende selv skal
kunne reflektere over de anvendte teknologier og metode.</dd><dt>Eksamensforudsætninger</dt><dd><p><em>Aflevering af fire skriftlige obligatoriske gruppeopgaver i
relation til kursets centrale temaer er et krav for at gå til
eksamen. Grupper kan bestå af 2-5 personer. Gruppeopgaverne har et
omfang på maksimalt 10 normalsider. Det er tilladt at benytte
AI-værktøjer, men den studerende skal til eksamen selv kunne
forklare og forsvare indholdet af de afleverede opgaver, samt sætte
i relation til pensum</em></p></dd><dt>Hjælpemidler</dt><dd>Kun visse hjælpemidler tilladt (se beskrivelse nedenfor) 
<div><p>Til den mundtlige eksamen er det kun tilladt med noter,
power points og lignende. Det er ikke tilladt eller muligt at bruge
AI eller tilgå internettet.</p><p>Den studerende skal til eksamen selv kunne forklare og forsvare
indholdet af de afleverede opgaver, samt sætte i relation til
pensum.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Mundtlig prøve, 20 minutter, med forberedelse i 30
minutter. </p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>For at opnå karakteren 12 skal den studerende demonstrere fuld
opfyldelse af målbeskrivelsen for
kurset.</p></div></div>",,,,,,,,,,,,,Gemt den 28-04-2025
https://kurser.ku.dk/course/ndak18002u/2024-2025,NDAK18002U Sundheds-it infrastruktur,Årgang 2024/2025,Kandidatuddannelsen i sundhed og informatik- obligatorisk (Kandidatuddannelsen i folkesundhedsvidenskab- valgfag),"Formålet med kurset er at give de studerende viden omkring komplekse tekniske og organisatoriske sammenhænge i sundheds-it infrastrukturer. Kurset fokuserer på samspillet mellem system- og informationsarkitektur, den kliniske praksis og de organisatoriske rammer for anvendelsen og udviklingen af sundheds-it infrastrukturer. På kurset opnås en grundlæggende forståelse for sociotekniske infrastrukturers betydning for udvikling og videreudvikling af sundheds-it systemer. Gennem introduktion til forskellige teoretiske perspektiver sættes de studerende i stand til at analysere og vurdere sundheds-it infrastrukturer.",Efter endt kursus forventes de studerende at kunne: Viden redegøre for de grundlæggende elementer i sundheds-it infrastrukturer og deres indbyrdes sammenhænge redegøre for teoretiske begreber til analyse af sundheds-it infrastrukturer redegøre for sundheds-it infrastrukturers betydning for forskellige dele af sundhedsvæsenet redegøre for sundheds-it infrastrukturers betydning for udvikling og videreudvikling af sundheds-it systemer Færdigheder analysere og evaluere opbygningen af konkrete sundheds-it infrastrukturer analysere muligheder og barrierer for videreudvikling af disse infrastrukturer foreslå og vurdere relevante videreudviklingsstrategier under hensyntagen til fx tekniske og organisatoriske rammer Kompetencer anvende teoretiske begreber og modeller til analyse af konkrete sundheds-it infrastrukturer,"Udvalgte akademiske artikler, kapitler fra bøger og relevant materiale fra offentlige og private sundhedsaktører. Offentliggøres på kursets Absalon-side ved kursusstart.",Kurset forudsætter faglighed svarende til en bestået BSc-uddannelse.,"Forelæsninger, læsning af udvalgt litteratur, studerendes oplæg, workshops og gruppeopgaver. Al databehandling på kurset vil foregå i henhold til KUs gældende regler for datasikkerhed og fortrolighed.","{'Forelæsninger': 26, 'Forberedelse (anslået)': 100, 'Øvelser': 26, 'Projektarbejde': 80, 'Eksamen': 43, 'I alt': 275}",Mundtlig Kollektiv Løbende feedback i undervisningsforløbet Peerfeedback (studerende giver hinanden feedback),Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>10 ECTS</dd><dt>Prøveform</dt><dd><div>Mundtlig prøve på baggrund af aflevering, 20 min pr.
studerende</div></dd><dt>Prøveformsdetaljer</dt><dd>Individuel eksamensopgave
<br/>
I løbet af kurset udleveres en eksamensopgave, som udgøres af en
individuel skriftlig rapport med et omfang på min. 5 og maks. 10
normalsider (dvs. 2400 anslag inkl. mellemrum) uden bilag og
referencer.
<br/><br/>
Mundtlig eksamen
<br/>
Den individuelle skriftlige rapport (eksamensopgaven) er et oplæg
til den mundtlige individuelle eksamen, hvor der vil være en faglig
diskussion af rapporten og blive spurgt ind til det samlede pensum.
<br/><br/>
For at gå til den mundtlige prøve skal afleveringen (individuel
eksamensopgave)være afleveret i løbet af kurset.</dd><dt>Krav til indstilling til eksamen</dt><dd><p><strong>Gruppeopgaver</strong><br/>
I løbet af kurset udarbejdes 1-3 obligatoriske gruppeopgaver i
relation til kursets centrale temaer. Som udgangspunkt arbejdes i
grupper af størrelsen 3-5 studerende. Gruppeopgaverne afleveres som
rapporter af et omfang på min. 5 og maks. 10 normalsider (dvs. 2400
anslag inkl. mellemrum) uden bilag og referencer. Aflevering og
godkendelse af gruppeopgaver er en forudsætning for indstilling til
eksamen.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt 
<div><p>Værktøjer, der er baseret på AI, herunder generativ AI/LLM, må
benyttes som hjælpemiddel. Det skal af beskrivelsen af metode
fremgå, hvordan disse er brugt. Det er den studerendes ansvar at
sikre besvarelsens nøjagtighed, integritet og originalitet inklusiv
at sikre, at besvarelsen ikke er faktuelt ukorrekt, plagieret eller
indeholder materiale med copyright.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Kvalificering til reeksamen opnås ved genaflevering og
godkendelse af de obligatoriske opgaver senest 3 uger før
reeksamen. Hvis den studerende ikke kan genaflevere en eller flere
af de obligatoriske gruppeopgaver pga. manglende deltagelse,
så udleveres en ny opgave efter aftale med underviser. Den nye
opgave skal udarbejdes individuelt og afleveres senest 3 uger før
reeksame</p><p>En ny eksamenopgave udleveres, som består af en individuel
skriftlig rapport med et omfang på min. 5 og maks. 10 normalsider
(dvs. 2400 anslag inkl. mellemrum) uden bilag og referencer. Der
vil ikke være mundtlig eksamen, men den studerende skal aflevere en
videopræsentation som tillæg til den skriftilge rapport. Videoen
skal være på maks. 5 min. og filen skal være under
50MB og afleveres i MP4 format.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>For at opnå karakteren 12 skal den studerende demonstrere fuld
opfyldelse af målbeskrivelsen for
kurset</p></div></div>",,,,,,,,,,,,,Gemt den 07-11-2024
https://kurser.ku.dk/course/ndak18002u/2025-2026,NDAK18002U Sundheds-it infrastruktur,Årgang 2025/2026,Kandidatuddannelsen i sundhed og informatik- obligatorisk (Kandidatuddannelsen i folkesundhedsvidenskab- valgfag),"Formålet med kurset er at give de studerende viden omkring komplekse tekniske og organisatoriske sammenhænge i sundheds-it infrastrukturer. Kurset fokuserer på samspillet mellem system- og informationsarkitektur, den kliniske praksis og de organisatoriske rammer for anvendelsen og udviklingen af sundheds-it infrastrukturer. På kurset opnås en grundlæggende forståelse for sociotekniske infrastrukturers betydning for udvikling og videreudvikling af sundheds-it systemer. Gennem introduktion til forskellige teoretiske perspektiver sættes de studerende i stand til at analysere og vurdere sundheds-it infrastrukturer.",Efter endt kursus forventes de studerende at kunne: Viden redegøre for de grundlæggende elementer i sundheds-it infrastrukturer og deres indbyrdes sammenhænge redegøre for teoretiske begreber til analyse af sundheds-it infrastrukturer redegøre for sundheds-it infrastrukturers betydning for forskellige dele af sundhedsvæsenet redegøre for sundheds-it infrastrukturers betydning for udvikling og videreudvikling af sundheds-it systemer Færdigheder analysere og evaluere opbygningen af konkrete sundheds-it infrastrukturer analysere muligheder og barrierer for videreudvikling af disse infrastrukturer foreslå og vurdere relevante videreudviklingsstrategier under hensyntagen til fx tekniske og organisatoriske rammer Kompetencer anvende teoretiske begreber og modeller til analyse af konkrete sundheds-it infrastrukturer,"Udvalgte akademiske artikler, kapitler fra bøger og relevant materiale fra offentlige og private sundhedsaktører. Offentliggøres på kursets Absalon-side ved kursusstart.",Kurset forudsætter faglighed svarende til en bestået BSc-uddannelse.,"Forelæsninger, læsning af udvalgt litteratur, studerendes oplæg, workshops og gruppeopgaver. Al databehandling på kurset vil foregå i henhold til KUs gældende regler for datasikkerhed og fortrolighed.","{'Forelæsninger': 26, 'Forberedelse (anslået)': 100, 'Øvelser': 26, 'Projektarbejde': 80, 'Eksamen': 43, 'I alt': 275}",Mundtlig Kollektiv Løbende feedback i undervisningsforløbet Peerfeedback (studerende giver hinanden feedback),Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>10 ECTS</dd><dt>Prøveform</dt><dd><div>Mundtlig prøve på baggrund af aflevering, 20 min pr.
studerende</div></dd><dt>Prøveformsdetaljer</dt><dd>Individuel eksamensopgave
<br/>
I løbet af kurset udleveres en eksamensopgave, som udgøres af en
individuel skriftlig rapport med et omfang på min. 5 og maks. 10
normalsider (dvs. 2400 anslag inkl. mellemrum) uden bilag og
referencer.
<br/><br/>
Mundtlig eksamen
<br/>
Den individuelle skriftlige rapport (eksamensopgaven) er et oplæg
til den mundtlige individuelle eksamen, hvor der vil være en faglig
diskussion af rapporten og blive spurgt ind til det samlede pensum.
<br/><br/>
For at gå til den mundtlige prøve skal afleveringen (individuel
eksamensopgave)være afleveret i løbet af kurset.</dd><dt>Eksamensforudsætninger</dt><dd><p><strong>Gruppeopgaver</strong><br/>
I løbet af kurset udarbejdes 1-3 obligatoriske gruppeopgaver i
relation til kursets centrale temaer. Som udgangspunkt arbejdes i
grupper af størrelsen 3-5 studerende. Gruppeopgaverne afleveres som
rapporter af et omfang på min. 5 og maks. 10 normalsider (dvs. 2400
anslag inkl. mellemrum) uden bilag og referencer. Aflevering og
godkendelse af gruppeopgaver er en forudsætning for indstilling til
eksamen.</p></dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt 
<div><p>Værktøjer, der er baseret på AI, herunder generativ AI/LLM, må
benyttes som hjælpemiddel. Det skal af beskrivelsen af metode
fremgå, hvordan disse er brugt. Det er den studerendes ansvar at
sikre besvarelsens nøjagtighed, integritet og originalitet inklusiv
at sikre, at besvarelsen ikke er faktuelt ukorrekt, plagieret eller
indeholder materiale med copyright.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ekstern censur</dd><dt>Reeksamen</dt><dd><p>Kvalificering til reeksamen opnås ved genaflevering og
godkendelse af de obligatoriske opgaver senest 3 uger før
reeksamen. Hvis den studerende ikke kan genaflevere en eller flere
af de obligatoriske gruppeopgaver pga. manglende deltagelse,
så udleveres en ny opgave efter aftale med underviser. Den nye
opgave skal udarbejdes individuelt og afleveres senest 3 uger før
reeksame</p><p>En ny eksamenopgave udleveres, som består af en individuel
skriftlig rapport med et omfang på min. 5 og maks. 10 normalsider
(dvs. 2400 anslag inkl. mellemrum) uden bilag og referencer. Der
vil ikke være mundtlig eksamen, men den studerende skal aflevere en
videopræsentation som tillæg til den skriftilge rapport. Videoen
skal være på maks. 5 min. og filen skal være under
50MB og afleveres i MP4 format.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>For at opnå karakteren 12 skal den studerende demonstrere fuld
opfyldelse af målbeskrivelsen for
kurset</p></div></div>",,,,,,,,,,,,,Gemt den 28-04-2025
https://kurser.ku.dk/course/ndak23005u/2024-2025,NDAK23005U Topics in Algorithms and Complexity (TAC),Volume 2024/2025,,The purpose of this course is to present a set of topics that reflect state-of-the-art research and applications within algorithms and complexity. Particular topics will change from year to year. Ask the course-responsible teacher for information on the topics covered in a particular year.,"Knowledge of Selected state-of-the-art algorithmic and complexity results, and techniques and paradigms involved in these. Skills in Reading state-of-the-art papers related to the topics covered in the course and communicating key ideas in such papers. Preparing a report on a research paper. Preparing and giving a seminar talk on a research paper. Competences to Present technical results to an audience of peers, both orally and in writing. Recognise the applicability of algorithms and complexity in both theoretical and practical settings.",See Absalon for a list of course literature.,"The students should be comfortable with formal, mathematical reasoning, as the course uses the power of mathematics to understand and prove good performance of algorithms. The students should have had at least one prior MSc-level course in algorithms and complexity. Academic qualifications equivalent to a BSc degree is recommended.","The course has three components. 1. Lectures and weekly exercises. 2. Seminars - where students present a chosen paper [this could be something relevant to later Master's thesis work]. There will be an opponent group for each presentation, and the teacher will also ask questions. 3. A project - where students write a report on their chosen paper.","{'Lectures': 24, 'Class Instruction': 10, 'Preparation': 121, 'Project work': 50, 'Exam': 1, 'Total': 206}",Written Oral Collective Continuous feedback during the course of the semester Peer feedback (Students give each other feedback) Collective feedback is given in groups of 2-3 students.,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 30 minutes (no
preparation time)</div></dd><dt>Type of assessment details</dt><dd>Individual oral examination without preparation. The
examination is primarily based on the paper chosen by the student
and the report, but may include other parts of the course syllabus
as well.
<br/>
To take the oral exam, the report must be submitted.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>The report must be submitted three weeks before the re-exam
and approved no later than two weeks before the
re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK23005U,"7,5 ECTS",Full Degree Master,1 block,Block 1,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Anders Aamand (2-636342666b306d7730666d)'],Saved on the 25-06-2024
https://kurser.ku.dk/course/ndab16014u/2024-2025,NDAB16014U Udvikling af cloud-baserede sundheds-apps,Årgang 2024/2025,,"Faget giver introduktion til udvikling af apps med server- og cloudbaseret lagring af data. Emnerne præsenteres med vægt på forståelse af principperne i de datalogiske teknikker, der typisk benyttes til realisering af app- og cloudbaserede it-løsninger. Opgaverne i kurset knyttes til design og udvikling af apps inden for det telemedicinske anvendelsesområde. De studerende får hands-on erfaringer med programmering, opsætning af klient-server løsninger, og brug af software development kits til denne type it-løsninger.","Efter endt kursus forventes den studerende at have tilegnet sig: Viden om muligheder og problemstillinger i forbindelse med lagring af data i skyen, herunder juridiske aspekter og sikkerhedsaspekter, f.eks. ved lagring af persondata i skyen hvordan Apps kan understøtte FN's verdensmål 16 om bæredygtig udvikling med henblik på at give adgang til retssikkerhed og opbygge effektive, ansvarlige og inddragende institutioner på alle niveauer. asynkron programmering design af brugergrænseflader i apps pålidelig og sikker netværkskommunikation mellem app og cloud. Færdigheder i at opsætte og anvende et udviklingsmiljø til apps enkel objektorienteret programmering enkel asynkron programmering at designe enkle brugergrænseflader til en app at konstruere og udnytte en database, der er lagret i skyen. Kompetencer Indgå i et team, der udvikler apps med lagring af data i skyen Selv designe og konstruere mindre apps","Materialet til dette fagområde er i konstant forandring. Materialet til dette fag vil hovedsagelig bestå af online artikler, teknisk dokumentation og de materialer som underviserne producerer. Se Absalon for kursuslitteratur.","Bestået NDAB19000U Systemudvikling, NDAB11006U Sundheds-it: Systemudvikling og Databaser eller tilsvarende Det er vigtigt at kunne forholde sig til omfattende, teknisk krævende og engelsksproget dokumentation. Vidensdeling på holdet er en forudsætning for holdets succes. Det er derfor vigtigt, at du har erfaring med at indgå i teams og deling af teknisk viden","Forelæsninger, e-læring og projektarbejde","{'Forelæsninger': 30, 'Forberedelse (anslået)': 111, 'Teoretiske øvelser': 30, 'Eksamen': 35, 'I alt': 206}",Mundtlig Individuel Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Mundtlig prøve på baggrund af aflevering, 20 minutter uden
forberedelsestid</div></dd><dt>Prøveformsdetaljer</dt><dd>Individuel mundtlig eksamen, 20 minutter inkl. votering. Den
mundtlige eksamen består af den studerende giver en præsentation (8
min), der sætter pensum i relation til den udviklede app beskrevet
i de tre gruppeafleveringer. Efterfølgende vil der blive stillet
<br/>
uddybende spørgsmål, hvor den studerende selv skal kunne reflektere
over de anvendte teknologier og metode, herunder forslag til
forbedringer.
<br/><br/>
For at gå til den mundtlige prøve skal de tre gruppeafleveringer
være afleveret.
<br/><br/>
De tre gruppeafleveringer består af en skriftlig del (maks. 3
normalsider dvs. 2400 anslag inkl. mellemrum) og
kode/​diagrammer/​dokumentation i bilag med individuelle bidrag
noteret samt en videopræsentation i løbet af kurset.
<br/><br/>
Det er tilladt at benytte AI-værktøjer, men den studerende skal til
eksamen selv kunne forklare og forsvare indholdet af den afleverede
kode og dokumentation, samt sætte i relation til pensum.</dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt 
<div><p>Værktøjer, der er baseret på AI, herunder generativ AI/LLM, må
benyttes som hjælpemiddel. Det skal af beskrivelsen af metode
fremgå, hvordan disse er brugt. Det er den studerendes ansvar at
sikre besvarelsens nøjagtighed, integritet og originalitet inklusiv
at sikre, at besvarelsen ikke er faktuelt ukorrekt, plagieret eller
indeholder materiale med copyright.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere</div></dd><dt>Reeksamen</dt><dd><p>Samme som ordinær eksamen. </p><p>Gruppeafleveringerne eller en ny samlet aflevering skal
afleveres senest 3 uger før den mundtlige eksamen.</p><p>Hvis ingen gruppeafleveringer mangler, afleveres en ny samlet
aflevering. Hvis der ikke er afleveret gruppeafleveringer, så skal
den studerende lave en rapport af et omfang på min. 20, maks. 25
normalsider baseret på de centrale temaer i
gruppeafleveringerne.</p><p>Hvis en eller flere gruppeafleveringer mangler, skal den
studerende udarbejde en samlet aflevering svarende til den samlede
aflevering ved den ordinære eksamen. Den
skal indeholde redegørelser for de centrale temaer, der
dækker emnerne i de manglende gruppeafleveringer. For hver
manglende gruppeaflevering, skal den individuelle redegørelse for
temaet være 5-10 normalsider.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>For at opnå karakteren 12, skal den studerende overbevisende og
præcist kunne demonstrere viden, færdigheder og kompetencer som
beskrevet under målbeskrivelsen.</p><p> </p></div></div>",,,,,,,,,,,,,Gemt den 09-04-2024
https://kurser.ku.dk/course/ndak23005u/2025-2026,NDAK23005U Topics in Algorithms and Complexity (TAC),Volume 2025/2026,,The purpose of this course is to present a set of topics that reflect state-of-the-art research and applications within algorithms and complexity. Particular topics will change from year to year. Ask the course-responsible teacher for information on the topics covered in a particular year.,"Knowledge of Selected state-of-the-art algorithmic and complexity results, and techniques and paradigms involved in these. Skills in Reading state-of-the-art papers related to the topics covered in the course and communicating key ideas in such papers. Preparing a report on a research paper. Preparing and giving a seminar talk on a research paper. Competences to Present technical results to an audience of peers, both orally and in writing. Recognise the applicability of algorithms and complexity in both theoretical and practical settings.",See Absalon for a list of course literature.,"The students should be comfortable with formal, mathematical reasoning, as the course uses the power of mathematics to understand and prove good performance of algorithms. The students should have had at least one prior MSc-level course in algorithms and complexity. Academic qualifications equivalent to a BSc degree is recommended.","The course has three components. 1. Lectures and weekly exercises. 2. Seminars - where students present a chosen paper [this could be something relevant to later Master's thesis work]. There will be an opponent group for each presentation, and the teacher will also ask questions. 3. A project - where students write a report on their chosen paper.","{'Lectures': 24, 'Class Instruction': 10, 'Preparation': 121, 'Project work': 50, 'Exam': 1, 'Total': 206}",Written Oral Collective Continuous feedback during the course of the semester Peer feedback (Students give each other feedback) Collective feedback is given in groups of 2-3 students.,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 30 minutes (no
preparation time)</div></dd><dt>Type of assessment details</dt><dd>Individual oral examination without preparation. The
examination is primarily based on the paper chosen by the student
and the report, but may include other parts of the course syllabus
as well.
<br/>
To take the oral exam, the report must be submitted.</dd><dt>Aid</dt><dd>All aids allowed except Generative AI</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>The report must be submitted three weeks before the re-exam
and approved no later than two weeks before the
re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK23005U,"7,5 ECTS",Full Degree Master,1 block,Block 1,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Anders Aamand (2-656544686d326f7932686f)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndab16014u/2025-2026,NDAB16014U Udvikling af cloud-baserede sundheds-apps,Årgang 2025/2026,,"Faget giver introduktion til udvikling af apps med server- og cloudbaseret lagring af data. Emnerne præsenteres med vægt på forståelse af principperne i de datalogiske teknikker, der typisk benyttes til realisering af app- og cloudbaserede it-løsninger. Opgaverne i kurset knyttes til design og udvikling af apps inden for det telemedicinske anvendelsesområde. De studerende får hands-on erfaringer med programmering, opsætning af klient-server løsninger, og brug af software development kits til denne type it-løsninger.","Efter endt kursus forventes den studerende at have tilegnet sig: Viden om muligheder og problemstillinger i forbindelse med lagring af data i skyen, herunder juridiske aspekter og sikkerhedsaspekter, f.eks. ved lagring af persondata i skyen hvordan Apps kan understøtte FN's verdensmål 16 om bæredygtig udvikling med henblik på at give adgang til retssikkerhed og opbygge effektive, ansvarlige og inddragende institutioner på alle niveauer. asynkron programmering design af brugergrænseflader i apps pålidelig og sikker netværkskommunikation mellem app og cloud. Færdigheder i at opsætte og anvende et udviklingsmiljø til apps enkel objektorienteret programmering enkel asynkron programmering at designe enkle brugergrænseflader til en app at konstruere og udnytte en database, der er lagret i skyen. Kompetencer Indgå i et team, der udvikler apps med lagring af data i skyen Selv designe og konstruere mindre apps","Materialet til dette fagområde er i konstant forandring. Materialet til dette fag vil hovedsagelig bestå af online artikler, teknisk dokumentation og de materialer som underviserne producerer. Se Absalon for kursuslitteratur.","Bestået NDAB19000U Systemudvikling, NDAB11006U Sundheds-it: Systemudvikling og Databaser eller tilsvarende Det er vigtigt at kunne forholde sig til omfattende, teknisk krævende og engelsksproget dokumentation. Vidensdeling på holdet er en forudsætning for holdets succes. Det er derfor vigtigt, at du har erfaring med at indgå i teams og deling af teknisk viden","Forelæsninger, e-læring og projektarbejde","{'Forelæsninger': 30, 'Forberedelse (anslået)': 111, 'Teoretiske øvelser': 30, 'Eksamen': 35, 'I alt': 206}",Mundtlig Individuel Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Mundtlig prøve på baggrund af aflevering, 20 minutter uden
forberedelsestid</div></dd><dt>Prøveformsdetaljer</dt><dd>Individuel mundtlig eksamen, 20 minutter inkl. votering. Den
mundtlige eksamen består af den studerende giver en præsentation (8
min), der sætter pensum i relation til den udviklede app beskrevet
i de tre gruppeafleveringer. Efterfølgende vil der blive stillet
<br/>
uddybende spørgsmål, hvor den studerende selv skal kunne reflektere
over de anvendte teknologier og metode, herunder forslag til
forbedringer.
<br/><br/>
For at gå til den mundtlige prøve skal de tre gruppeafleveringer
være afleveret.
<br/><br/>
De tre gruppeafleveringer består af en skriftlig del (maks. 3
normalsider dvs. 2400 anslag inkl. mellemrum) og
kode/​diagrammer/​dokumentation i bilag med individuelle bidrag
noteret samt en videopræsentation i løbet af kurset.
<br/><br/>
Det er tilladt at benytte AI-værktøjer, men den studerende skal til
eksamen selv kunne forklare og forsvare indholdet af den afleverede
kode og dokumentation, samt sætte i relation til pensum.</dd><dt>Hjælpemidler</dt><dd>Alle hjælpemidler tilladt 
<div><p>Til den mundtlige eksamen er det kun tilladt med noter,
power points og lignende. Det er ikke tilladt eller muligt at bruge
AI eller tilgå internettet.</p><p>Den studerende skal til eksamen selv kunne forklare og forsvare
indholdet af de afleverede opgaver, samt sætte i relation til
pensum.</p></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere</div></dd><dt>Reeksamen</dt><dd><p>Samme som ordinær eksamen. </p><p>Gruppeafleveringerne eller en ny samlet aflevering skal
afleveres senest 3 uger før den mundtlige eksamen.</p><p>Hvis ingen gruppeafleveringer mangler, afleveres en ny samlet
aflevering. Hvis der ikke er afleveret gruppeafleveringer, så skal
den studerende lave en rapport af et omfang på min. 20, maks. 25
normalsider baseret på de centrale temaer i
gruppeafleveringerne.</p><p>Hvis en eller flere gruppeafleveringer mangler, skal den
studerende udarbejde en samlet aflevering svarende til den samlede
aflevering ved den ordinære eksamen. Den
skal indeholde redegørelser for de centrale temaer, der
dækker emnerne i de manglende gruppeafleveringer. For hver
manglende gruppeaflevering, skal den individuelle redegørelse for
temaet være 5-10 normalsider.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>For at opnå karakteren 12, skal den studerende overbevisende og
præcist kunne demonstrere viden, færdigheder og kompetencer som
beskrevet under målbeskrivelsen.</p><p> </p></div></div>",,,,,,,,,,,,,Gemt den 28-04-2025
https://kurser.ku.dk/course/ndak16008u/2025-2026,NDAK16008U User Interface Technology (UIT),Volume 2025/2026,MSc Programme in Computer Science,"This course focuses on technology for modern and emerging user interfaces and hardware, with an emphasis on physical computing. Learning takes place in two ways: a theoretical component, where students will learn about both classic and the latest and most exciting research around novel user interfaces; and a practical component, where students will gain hands-on skills in building novel physical interfaces. Theoretical topics include such research as: Classic models and styles of interaction (fx. GUIs) as well as modern approaches (fx. gesture-based interaction). Theoretical models of UIs and interaction, such as predicting user performance, or reasoning about interfaces based on physical reality. The latest hardware and software for interaction, such as sensor-based interfaces, interactive 3D-printed objects, shape-changing user interfaces, or tangible computing. The practical component will see students learning skills that allow them to prototype physical user interfaces, such as: 3D modeling 3D printing interactive objects Soldering Basic and advanced circuit prototyping and microcontroller programming Machine learning applied to interaction with novel devices The course as a whole is highly hands-on, with lots of experimentation and building. Students will learn how to locate and understand the latest research in user interface technology, and will discuss how earlier research has appeared in modern user interface technology such as 3D printing, capacitive touchscreens, or gesture-based user interfaces.",Knowledge of classic and current research in user interface technology; models of user interaction and methods of evaluating research in user interface technology; and advantages and disadvantages of particular user interface technologies. Skills in locating and understanding the latest research in user interface technology; and designing and building software and hardware prototypes of novel user interface technology. Competences in developing novel user interfaces based on an understanding of classic and contemporary research; and analyzing uses of technology in user interfaces to describe the pros and cons of the choices made.,See Absalon when the course is set up.,Programming skills corresponding to those obtained with a bachelor in Computer Science or equivalent are expected. Academic qualifications equivalent to a BSc degree is recommended.,"This course will alternate between classroom discussions of key papers on user interface technology and lab classes, which focus on introducing user interface technology and having students develop prototypes.","{'Lectures': 16, 'Preparation': 32, 'Practical exercises': 32, 'Project work': 108, 'Exam': 18, 'Total': 206}",Oral Individual Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, during course</div><div>On-site written exam, 4 hours under invigilation</div></dd><dt>Type of assessment details</dt><dd>Specifically, the exam consists of two elements:
<br/><br/>
1. A group project developed during the course and documented with
a report wherein the individual contributions are stated (60%)
(written assignment)
<br/>
2. An 4-hour written exam (40%) (written examination under
invigilation)
<br/><br/>
The project is 60% of the grade and the written examination is the
remaining 40%. However, both elements of the exam must be passed to
pass the exam, i.e. each element must achieve at least the grade
02.
<br/><br/>
It is not possible to reuse elements of the exam at a later exam.
It is however possible to resubmit a revised project report.</dd><dt>Aid</dt><dd>Only certain aids allowed (see description below) 
<div><p>For the group project 'all aids allowed'.</p><p>For the 4-hour written on-site exam 'all aids allowed except
generative AI and internet access'.</p></div></dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners.</div></dd><dt>Re-exam</dt><dd><p>same as ordinary exam.</p><p>For the re-exam the student must submit a new report
or resubmit an edited version of the group report no later than
three weeks before the re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK16008U,"7,5 ECTS",Full Degree Master,1 block,Block 4,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Daniel Lee Ashbrook (3-68657244686d326f7932686f)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak16008u/2024-2025,NDAK16008U User Interface Technology (UIT),Volume 2024/2025,MSc Programme in Computer Science,"This course focuses on technology for modern and emerging user interfaces and hardware, with an emphasis on physical computing. Learning takes place in two ways: a theoretical component, where students will learn about both classic and the latest and most exciting research around novel user interfaces; and a practical component, where students will gain hands-on skills in building novel physical interfaces. Theoretical topics include such research as: Classic models and styles of interaction (fx. GUIs) as well as modern approaches (fx. gesture-based interaction). Theoretical models of UIs and interaction, such as predicting user performance, or reasoning about interfaces based on physical reality. The latest hardware and software for interaction, such as sensor-based interfaces, interactive 3D-printed objects, shape-changing user interfaces, or tangible computing. The practical component will see students learning skills that allow them to prototype physical user interfaces, such as: 3D modeling 3D printing interactive objects Soldering Basic and advanced circuit prototyping and microcontroller programming Machine learning applied to interaction with novel devices The course as a whole is highly hands-on, with lots of experimentation and building. Students will learn how to locate and understand the latest research in user interface technology, and will discuss how earlier research has appeared in modern user interface technology such as 3D printing, capacitive touchscreens, or gesture-based user interfaces.",Knowledge of classic and current research in user interface technology; models of user interaction and methods of evaluating research in user interface technology; and advantages and disadvantages of particular user interface technologies. Skills in locating and understanding the latest research in user interface technology; and designing and building software and hardware prototypes of novel user interface technology. Competences in developing novel user interfaces based on an understanding of classic and contemporary research; and analyzing uses of technology in user interfaces to describe the pros and cons of the choices made.,See Absalon when the course is set up.,Programming skills corresponding to those obtained with a bachelor in Computer Science or equivalent are expected. Academic qualifications equivalent to a BSc degree is recommended.,"This course will alternate between classroom discussions of key papers on user interface technology and lab classes, which focus on introducing user interface technology and having students develop prototypes.","{'Lectures': 16, 'Preparation': 32, 'Practical exercises': 32, 'Project work': 108, 'Exam': 18, 'Total': 206}",Oral Individual Continuous feedback during the course of the semester Feedback by final exam (In addition to the grade),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Written assignment, during course</div><div>On-site written exam, 4 hours under invigilation</div></dd><dt>Type of assessment details</dt><dd>Specifically, the exam consists of two elements:
<br/><br/>
1. A group project developed during the course and documented with
a report wherein the individual contributions are stated (60%)
(written assignment)
<br/>
2. An 4-hour written exam (40%) (written examination under
invigilation)
<br/><br/>
The project is 60% of the grade and the written examination is the
remaining 40%. However, both elements of the exam must be passed to
pass the exam, i.e. each element must achieve at least the grade
02.
<br/><br/>
It is not possible to reuse elements of the exam at a later exam.
It is however possible to resubmit a revised project report.</dd><dt>Aid</dt><dd>Written aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners.</div></dd><dt>Re-exam</dt><dd><p>same as ordinary exam.</p><p>For the re-exam the student must submit a new report
or resubmit an edited version of the group report no later than
three weeks before the re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK16008U,"7,5 ECTS",Full Degree Master,1 block,Block 4,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Daniel Lee Ashbrook (3-726f7c4e72773c79833c7279)'],Saved on the 14-02-2024
https://kurser.ku.dk/course/ndab20008u/2025-2026,NDAB20008U Virtual Reality (VR),Volume 2025/2026,BSc Programme in Cognitive Data Science,"The aim of the course is to teach students to design and develop for virtual reality (VR). Participants will learn to develop for VR in a standard tool such as Unity, create interactions between avatar bodies and virtual objects, and design selection and manipulation techniques for VR. The course focuses both on the technical aspects of VR as well on the human-centred aspects. These skills are needed to develop for headset-based VR, but also in developing for other headset-based technologies, such as augmented reality. Learning will happen through classroom discussions of research, lectures, and hands-on VR development.","At course completion, the successful student will have Knowledge of Basic physics of objects and 3D surroundings (e.g., rigid body kinematics & dynamics) Basic kinematics of bodies Sensing technologies Interaction techniques for VR Perception and movement related to using VR Applications of VR Skills in Developing in a standard VR tool such as Unity Developing interactions between bodies, objects, and surroundings Tracking the user’s actions (e.g., of hands, bodies, eyes) Designing interaction techniques Competences to Collaborate in a group to develop VR applications that match particular goals. Reason about and justifying design decisions of VR/AR interaction techniques. Apply a selection of current sensing technologies for VR and thinking forward to future ones. Analyze the pros and cons of display technologies, sensing technologies, and interaction techniques from both the technological and the user’s perspectives.",Selected papers and book chapters. See Absalon when the course is set up.,"Strong programming skills at the level of final year BSc student. Furthermore, it is crucial in order to take the course that you have passed the course Interaction design (Interaktionsdesign) or a similar course.","Classroom discussions, lectures, hands-on programming classes, 3 hand-in assignments in groups, and a project in groups.","{'Lectures': 64, 'Exercises': 64, 'Project work': 77, 'Exam': 1, 'Total': 206}",Written Individual Collective,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, 20 minutes per person</div></dd><dt>Type of assessment details</dt><dd>The overall assessment is based on a group project report and
an oral exam (without preparation). The exam is a group exam, which
means that the groups present their project together, and are then
examined individually.</dd><dt>Examination prerequisites</dt><dd><p>To qualify for the exam, the students must have handed in and
got accepted 2 group assignments.</p><p> </p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>As in the ordinary exam, the assessment is based on a project
report and an oral exam. If the project report uses parts of a
project done in a group during the course, the student must detail
their contributions on the hand-in for the re-exam. In
the re-exam, both the oral presentation and the exam
are individual.</p><p>If the student is not yet qualified, then qualification can
be achieved by resubmitting assignments and have
those approved. If parts of the assignments were done in
groups during the course, the student must detail
their contributions to those on the resubmissions. The
assignments must be submitted no later than three weeks before the
re-exam date.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcomes.</p></div></div>",English,NDAB20008U,"7,5 ECTS",Bachelor,1 block,Block 2,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Joanna Emilia Bergström (6-7b80727f7f7251757a3f7c863f757c)'],Saved on the 01-05-2025
https://kurser.ku.dk/course/ndak12002u/2025-2026,NDAK12002U Vision and Image Processing (VIP),Volume 2025/2026,MSc Programme in IT and Cognition,"Vision and Image Processing (VIP) gives an overview of modern vision techniques used in man and machine. Focus is both on conceptual understanding of the models and methods, and on practical experience. The course covers state of the art methods for image analysis including how to solve visual processing tasks such as object recognition and content-based image search and retrieval. The course is not focused on providing a deep mathematical understanding of the techniques but will include the mathematical background necessary to understand vision and image processing. Through a number of mandatory programming exercises, the students will develop simple programs and obtain solutions to non-trivial vision tasks. After the course, the students will be able to understand the models and principles of vision technologies used in new products and applications. This course is mandatory for students enrolled in the IT and Cognition MSc study programme and is an elective course for students enrolled in the MSc programme in Computer Science. The course content does not overlap with Signal and Image Processing (MSc in Computer Science).",Knowledge of Theoretical and practical knowledge of the current research within computer vision and image analysis Common application areas Skills to Read and apply the knowledge obtained by reading scientific papers Convert a theoretical algorithmic description into a concrete program implementation Compare computer vision and image analysis algorithms and assess their ability to solve a specific task Competences in Understanding and analyzing the main challenges in vision and image processing today Describing common applications of importance to society Describing and applying feature extraction methods and modelling techniques in image and vision processing Analyzing the main challenges in vision and image processing today. Implementation of selected methods,See Absalon for a list of course literature.,Basic programming and linear algebra as obtained on Scientific Programming (IT and Cognition) or as required by the BSc or MSc programme in Computer Science. Academic qualifications equivalent to a BSc degree is recommended.,Mix of lectures and exercises,"{'Lectures': 32, 'Preparation': 75, 'Practical exercises': 16, 'Exam': 83, 'Total': 206}",Written Oral Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment based on 4-6 written group- and
individual assignments throughout the course, where all assignments
must be passed.</dd><dt>Aid</dt><dd>All aids allowed 
<div><p>The use of Large Language Models (LLM)/Large Multimodal Models
(LMM) – such as ChatGPT and GPT-4 – is permitted.</p></div></dd><dt>Marking scale</dt><dd>passed/not passed</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam consists of two parts:</p><p>1. Resubmission of all assignments no later than 3 weeks before
the re-exam week</p><p>2. A 20 minutes oral examination (including grading)
without preparation in the re-exam week</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See ""Learning outcome"".</p></div></div>",English,NDAK12002U,"7,5 ECTS",Full Degree Master,1 block,Block 2,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],"['Serge Belongie (10-763165686f72716a6c6843676c316e7831676e)', 'Hang Yin (4-6b647c6c43676c316e7831676e)']",Saved on the 24-02-2025
https://kurser.ku.dk/course/ndab20008u/2024-2025,NDAB20008U Virtual Reality (VR),Volume 2024/2025,BSc Programme in Cognitive Data Science,"The aim of the course is to teach students to design and develop for virtual reality (VR). Participants will learn to develop for VR in a standard tool such as Unity, create interactions between avatar bodies and virtual objects, and design selection and manipulation techniques for VR. The course focuses both on the technical aspects of VR as well on the human-centred aspects. These skills are needed to develop for headset-based VR, but also in developing for other headset-based technologies, such as augmented reality. Learning will happen through classroom discussions of research, lectures, and hands-on VR development.","At course completion, the successful student will have Knowledge of Basic physics of objects and 3D surroundings (e.g., rigid body kinematics & dynamics) Basic kinematics of bodies Sensing technologies Interaction techniques for VR Perception and movement related to using VR Applications of VR Skills in Developing in a standard VR tool such as Unity Developing interactions between bodies, objects, and surroundings Tracking the user’s actions (e.g., of hands, bodies, eyes) Designing interaction techniques Competences to Collaborate in a group to develop VR applications that match particular goals. Reason about and justifying design decisions of VR/AR interaction techniques. Apply a selection of current sensing technologies for VR and thinking forward to future ones. Analyze the pros and cons of display technologies, sensing technologies, and interaction techniques from both the technological and the user’s perspectives.",Selected papers and book chapters. See Absalon when the course is set up.,"Strong programming skills at the level of final year BSc student. Furthermore, it is crucial in order to take the course that you have passed the course Interaction design (Interaktionsdesign) or a similar course.","Classroom discussions, lectures, hands-on programming classes, 3 hand-in assignments in groups, and a project in groups.","{'Lectures': 64, 'Exercises': 64, 'Project work': 77, 'Exam': 1, 'Total': 206}",Written Individual Collective,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here!","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral examination, 20 minutes per person</div></dd><dt>Type of assessment details</dt><dd>The overall assessment is based on a group project report and
an oral exam (without preparation). The exam is a group exam, which
means that the groups present their project together, and are then
examined individually.</dd><dt>Exam registration requirements</dt><dd><p>To qualify for the exam, the students must have handed in and
got accepted 3 group assignments.</p><p> </p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>As in the ordinary exam, the assessment is based on a project
report and an oral exam. If the project report uses parts of a
project done in a group during the course, the student must detail
their contributions on the hand-in for the re-exam. In
the re-exam, both the oral presentation and the exam
are individual.</p><p>If the student is not yet qualified, then qualification can
be achieved by resubmitting assignments and have
those approved. If parts of the assignments were done in
groups during the course, the student must detail
their contributions to those on the resubmissions. The
assignments must be submitted no later than three weeks before the
re-exam date.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcomes.</p></div></div>",English,NDAB20008U,"7,5 ECTS",Bachelor,1 block,Block 2,A,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Joanna Emilia Bergström (6-717668757568476b7035727c356b72)'],Saved on the 16-02-2024
https://kurser.ku.dk/course/ndak12002u/2024-2025,NDAK12002U Vision and Image Processing (VIP),Volume 2024/2025,MSc Programme in IT and Cognition,"Vision and Image Processing (VIP) gives an overview of modern vision techniques used in man and machine. Focus is both on conceptual understanding of the models and methods, and on practical experience. The course covers state of the art methods for image analysis including how to solve visual processing tasks such as object recognition and content-based image search and retrieval. The course is not focused on providing a deep mathematical understanding of the techniques but will include the mathematical background necessary to understand vision and image processing. Through a number of mandatory programming exercises, the students will develop simple programs and obtain solutions to non-trivial vision tasks. After the course, the students will be able to understand the models and principles of vision technologies used in new products and applications. This course is mandatory for students enrolled in the IT and Cognition MSc study programme and is an elective course for students enrolled in the MSc programme in Computer Science. The course content does not overlap with Signal and Image Processing (MSc in Computer Science).",Knowledge of Theoretical and practical knowledge of the current research within computer vision and image analysis Common application areas Skills to Read and apply the knowledge obtained by reading scientific papers Convert a theoretical algorithmic description into a concrete program implementation Compare computer vision and image analysis algorithms and assess their ability to solve a specific task Competences in Understanding and analyzing the main challenges in vision and image processing today Describing common applications of importance to society Describing and applying feature extraction methods and modelling techniques in image and vision processing Analyzing the main challenges in vision and image processing today. Implementation of selected methods,See Absalon for a list of course literature.,Basic programming and linear algebra as obtained on Scientific Programming (IT and Cognition) or as required by the BSc or MSc programme in Computer Science. Academic qualifications equivalent to a BSc degree is recommended.,Mix of lectures and exercises,"{'Lectures': 32, 'Preparation': 75, 'Practical exercises': 16, 'Exam': 83, 'Total': 206}",Written Oral Continuous feedback during the course of the semester,"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Continuous assessment</div></dd><dt>Type of assessment details</dt><dd>Continuous assessment based on 4-6 written group- and
individual assignments throughout the course, where all assignments
must be passed.</dd><dt>Aid</dt><dd>All aids allowed 
<div><p>The use of Large Language Models (LLM)/Large Multimodal Models
(LMM) – such as ChatGPT and GPT-4 – is permitted.</p></div></dd><dt>Marking scale</dt><dd>passed/not passed</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>The re-exam consists of two parts:</p><p>1. Resubmission of all assignments no later than 3 weeks before
the re-exam week</p><p>2. A 20 minutes oral examination (including grading)
without preparation in the re-exam week</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See ""Learning outcome"".</p></div></div>",English,NDAK12002U,"7,5 ECTS",Full Degree Master,1 block,Block 2,C,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],"['Serge Belongie (10-7833676a7174736c6e6a45696e33707a336970)', 'Hang Yin (4-6f688070476b7035727c356b72)']",Saved on the 14-02-2024
https://kurser.ku.dk/course/ndak22003u/2025-2026,NDAK22003U Web Recommender Systems (WRS),Volume 2025/2026,,"The course objective is to offer an advanced introduction into Web Recommender Systems. The goal is to understand and model Web Information and to design and evaluate some of the major technologies operating in the area of Web Recommender Systems. Through applied projects, the course aims to stimulate and prepare students for their MSc thesis work. Content in detail: Basics of Recommender Systems (collaborative filtering and content based); Evaluation of Recommender Systems; Advanced Recommender Systems (knowledge-based, ensembled based, hybrid); Exploiting additional sources of information for recommendation, e.g., context, location and time.",Knowledge: The basic models to develop a Web Recommender System Techniques to exploy different sources of information in recommendation Different criteria for the evaluation of Recommender Systems Skills: Students should be able to transfer the above knowledge to real-world tasks by: Designing appropriate strategies to develop Web Recommender Systems Planning and carrying out appropriate evaluation Diagnosing problems in standard Web Recommender Systems Designing and calibrating solutions appropriate for expected usage loads Competences: Explain basic principles and properties of Recommender Systems to both laymen and specialists Use standard procedures and practices when designing or implementing Web Recommender Systems Present evaluation analyses and results so that a technically qualified person can follow and obtain similar findings,"The literature consists of seminal research and review articles from central journals and selected papers from peer-reviewed conferences, textbooks and research reports. This is supplemented with practical experience gained through lab sessions. See Absalon for a list of literature.","It is expected that students know how to program and have a working knowledge of Machine Learning that can be obtained by any undergraduate course in Machine Learning. Examples of libraries that will be used at the labs: numpy, pandas, scikit-learn, matplotlib and other ML python libraries. Academic qualifications equivalent to a BSc degree is recommended.","The course will use a combination of lectures (2 hours per week) and lab sessions (2 hours per week). Lectures and labs might include discussions, group activities, and student presentations. Where possible, relevant guest lecturers will be involved. Students will carry-out a project which consists of both practical exercises (implementing state of the art solutions) and theoretical questions (to reflect on the course content in relation to the project). The project will cover the main topics presented during the lectures.","{'Lectures': 32, 'Preparation': 80, 'Project work': 71, 'Exam Preparation': 22, 'Exam': 1, 'Total': 206}",Oral Feedback by final exam (In addition to the grade),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 20
minutes</div></dd><dt>Type of assessment details</dt><dd>Specifically, the exam consists of two parts:
<br/><br/>
1. An individual report based on the project (written assignment).
<br/>
2. An individual oral examination (without preparation) based on
the report and project
<br/><br/>
The written and oral examination are not weighted, why only one
overall assessment is provided for the two parts of the exam.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>For the re-exam the student must complete a new project and
submit a new report. The deadline for submitting the new report
will be published in Absalon.</p><p>Additionally the 20-minutes oral examination without
preparation will be administered covering the full course
syllabus.</p><p>The written and oral examination are not weighted, why only one
overall assessment is provided for the two parts of the exam.</p><p>It is not possible to reuse parts of the exam at a later
exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK22003U,"7,5 ECTS",Full Degree Master,1 block,Block 3,B2,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Maria Maistro (2-7a7a4d71763b78823b7178)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndak16009u/2024-2025,NDAK16009U Cancelled Visualisation (Vis),Volume 2024/2025,MSc Programme in Computer Science MSc Programme in Computer Science with a minor subject,"The course introduces participants to visualisation: the use of interactive visual representations to help people understand and analyse data. Visualisation is central to data-intensive science, business and intelligence analysis, for exploratory data analysis, and for clearly communicating findings in data. Participants will learn about the foundations of information visualisation and techniques for visually representing different types of data and for supporting different tasks. Students will learn through a practical problem-driven approach to analyse, design, and build visualisations. In particular, through weekly exercises, the course will provide hands-on experience with creating interactive visualisations for the web. The course also emphasises the theoretical foundations of visualisations and includes considerations about current challenges in information visualisation research.","Knowledge of Key principles of visualisation Fundamental visualisation and interaction techniques for different data types Tools for building visualisations Methods and frameworks for analysing and designing visualisations Challenges in information visualisation Skills in Systematically analysing and comparing visualisations Designing a visualisation that effectively supports a particular task Visualising data types such as graphs, trees, matrices, and maps Competences in Reasoning about and justifying the application of visualisation to a problem in a particular domain Implementing interactive visualisation prototypes",See Absalon for a list of course literature.,"Programming skills corresponding to an introductory programming course is expected; experience with computer graphics is an advantage, but is not required. Academic qualifications equivalent to a BSc degree is recommended.","Mix of lectures and class discussions, tutorials and exercises, and group work on weekly assignments and the project.","{'Lectures': 24, 'Preparation': 42, 'Exercises': 56, 'Project work': 83, 'Exam': 1, 'Total': 206}",Oral Individual Collective Feedback by final exam (In addition to the grade),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 20 minutes (no
preparation time)</div></dd><dt>Type of assessment details</dt><dd>The oral exam is without preparation and is based on a project
report.
<br/>
To take the oral exam, the project report must be submitted.</dd><dt>Exam registration requirements</dt><dd><p>To qualify for the exam, the student must get
3-4 assignments approved during the course.</p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>If the student is not qualified then qualification can be
achieved by submitting and approval of equivalent assignments
and a new or revised project report. The assignments and report
must be submitted no later than 3 weeks before the
re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK16009U,"7,5 ECTS",Full Degree Master,1 block,Block 2,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Kasper Hornbæk (4-72687a6f476b7035727c356b72)'],Saved on the 25-09-2024
https://kurser.ku.dk/course/ndak16009u/2025-2026,NDAK16009U Visualisation (Vis),Volume 2025/2026,MSc Programme in Computer Science MSc Programme in Computer Science with a minor subject,"The course introduces participants to visualisation: the use of interactive visual representations to help people understand and analyse data. Visualisation is central to data-intensive science, business and intelligence analysis, for exploratory data analysis, and for clearly communicating findings in data. Participants will learn about the foundations of information visualisation and techniques for visually representing different types of data and for supporting different tasks. Students will learn through a practical problem-driven approach to analyse, design, and build visualisations. In particular, through weekly exercises, the course will provide hands-on experience with creating interactive visualisations for the web. The course also emphasises the theoretical foundations of visualisations and includes considerations about current challenges in information visualisation research.","Knowledge of Key principles of visualisation Fundamental visualisation and interaction techniques for different data types Tools for building visualisations Methods and frameworks for analysing and designing visualisations Challenges in information visualisation Skills in Systematically analysing and comparing visualisations Designing a visualisation that effectively supports a particular task Visualising data types such as graphs, trees, matrices, and maps Competences in Reasoning about and justifying the application of visualisation to a problem in a particular domain Implementing interactive visualisation prototypes",See Absalon for a list of course literature.,"Programming skills corresponding to an introductory programming course is expected; experience with computer graphics is an advantage, but is not required. Academic qualifications equivalent to a BSc degree is recommended.","Mix of lectures and class discussions, tutorials and exercises, and group work on weekly assignments and the project.","{'Lectures': 24, 'Preparation': 42, 'Exercises': 56, 'Project work': 83, 'Exam': 1, 'Total': 206}",Oral Individual Collective Feedback by final exam (In addition to the grade),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 20 minutes (no
preparation time)</div></dd><dt>Type of assessment details</dt><dd>The oral exam is without preparation and is based on a project
report.
<br/>
To take the oral exam, the project report must be submitted.</dd><dt>Examination prerequisites</dt><dd><p>To qualify for the exam, the student must get
3-4 assignments approved during the course.</p></dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>If the student is not qualified then qualification can be
achieved by submitting and approval of equivalent assignments
and a new or revised project report. The assignments and report
must be submitted no later than 3 weeks before the
re-exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome.</p></div></div>",English,NDAK16009U,"7,5 ECTS",Full Degree Master,1 block,Block 2,B,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Kasper Hornbæk (4-7a7082774f73783d7a843d737a)'],Saved on the 24-02-2025
https://kurser.ku.dk/course/ndab20005u/2025-2026,NDAB20005U Økonometri A (ØkA),Årgang 2025/2026,Bacheloruddannelsen i datalogi-økonomi,"Økonometri A gennemgår den multiple lineær regressionsmodel for primært tværsnitsdata, men kurset behandler også paneldata. Estimationsmetoden Ordinary Least Squares (OLS) introduceres og statistiske egenskaber som middelrethed, konsistens og asymptotisk normalitet af OLS diskuteres i detaljer. Hypotesetest af populationsparametre præsenteres, såvel som generelle test af misspecifikation. Avancerede emner som Instrumental Variables (IV) estimation, og paneldata metoder introduceres også i kurset med henblik på at estimere kausalitet. Kurset lægger vægt på, at de studerende selv får mulighed for at udføre regressionsanalyser i praksis; både ved hjælp af forprogrammerede rutiner i statistiske programpakker såsom STATA og ved brug af et matrixprogrammeringssprog, hvor der skabes en en-til-en sammenhæng mellem computerkode og de teoretiske ligninger i lærebogen. En vigtig del af kurset er derfor øvelsestimerne, hvori de studerende vil udarbejde selvstændige empiriske analyser og udvikle computerkode som implementerer de økonometriske metoder, som anvendes i kurset.","Viden om Den multiple lineære regressionsmodel. De mest centrale antagelser i regressionsanalyse, samt hvordan disse påvirker de estimerede parameterværdier. Forudsætninger for kausal fortolkning af parameterværdierne. Statistisk inferens i den lineære regressionsmodel. Fortolkningen af parametre for kontinuerte, diskrete og transformerede variable i en regressionsmodel. Færdigheder i at Udføre deskriptive analyser af datasæt med henblik på anvendelse i regressionsanalyse. Udlede simple estimatorer samt karakterisere deres statistiske egenskaber i form af middelrethed, konsistent og efficiens. Udføre og implementere følgende estimationsmetoder: Ordinary Least Squares (OLS), Weighted Least Squares (WLS), Generalized Least Squares (GLS), Instrumental Variables (IV), Differences-in-Differences (DD), First Differences (FD), Fixed Effect (FE) og Random Effects (RE). Beregne og fortolke t-test, F-tests, LM-tests, og Wald-test for hypotesetest af parameterrestriktioner i den lineær regressionsmodel for både homoskedastiske samt heteroskedastiske fejlled. Redegøre for fortolkningen af parametre for kontinuerte, diskrete og transformerede variable i en regressionsmodel. Udføre test for misspecifikation (heteroskedasticitet, funktionel form, eksogenitet) og redegøre for deres fortolkning. Anvende simulationseksperimenter til at illustrere og efterprøve egenskaber for statistiske estimatorer og test. Anvende givne parameterestimater i en konkret beregning på en økonomisk problemstilling og redegøre for resultaterne. Udvikle computerkode som implementerer de økonometriske metoder, som anvendes i kurset. Kompetencer til at Planlægge og gennemføre en empirisk analyse af et selvstændigt udvalgt emne med udgangspunkt i de gennemgåede økonometriske metoder. Anvende økonometriske metoder til at vurdere og vælge mellem økonomiske teorier og på den måde skabe selvstændig og evidensbaseret viden. Anvende fundne parameterestimater i en konkret beregning på en økonomisk problemstilling.",Se Absalon.,"Deltagelse i kurset forudsætter viden om grundlæggende statistisk metode og sandsynlighedsteori svarende til indholdet af faget ""Grundlæggende Sandsynlighedsteori og Statistik"". Der anvendes matematiske forudsætninger fra MatIntro og LinAlgDat, herunder matrixregning.","Pensum vil primært blive gennemgået ved forelæsningerne. I holdtimer arbejdes der både med teoriopgaver, simuleringseksperimenter og anvendt økonometrisk analyse baseret på faktiske datasæt. Statistisk software til regressionsanalyse vil blive introduceret i forbindelse med holdundervisningen, som også træner skriftlig formidling af resultaterne. Det sker i form af opsummeringer som fx sammenfatter resultaterne af en empirisk analyse eller diskuterer problemerne ved en bestemt økonometrisk model. Den studerende skal løbende aflevere obligatoriske hjemmeopgaver til holdunderviserne og til de angivne frister. Opgaverne vil efterfølgende blive gennemgået og diskuteret på holdene.","{'Forelæsninger': 44, 'Holdundervisning': 38, 'Forberedelse (anslået)': 123, 'Eksamen': 1, 'I alt': 206}",Mundtlig Kollektiv Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Mundtlig prøve, 20 minutter (ingen
forberedelsestid)</div></dd><dt>Eksamensforudsætninger</dt><dd><p>3 ud af 3 obligatoriske afleveringsopgaver skal
være godkendt for at den studerende kan deltage i
eksamen.</p><p>Opgaverne kan laves individuelt eller i grupper på op til tre
studerende</p><p>Brug af large language models  (LLM)/large multimodal
models (LMM) – som f.eks. ChatGPT og GPT-4 – er tilladt til de
obligatoriske opgaver.</p></dd><dt>Hjælpemidler</dt><dd>Skriftlige hjælpemidler tilladt</dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere</div></dd><dt>Reeksamen</dt><dd><p>Samme som ordinær eksamen.</p><p>Hvis den studerende ikke er kvalificeret til ordinær eksamen kan
kvalifikation til reeksamen opnås ved aflevering og godkendelse af
de obligatoriske afleveringsopgaver tre uger inden
reeksamen.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen</p></div></div>",,,,,,,,,,,,,Gemt den 24-02-2025
https://kurser.ku.dk/course/ndak22003u/2024-2025,NDAK22003U Web Recommender Systems (WRS),Volume 2024/2025,,"The course objective is to offer an advanced introduction into Web Recommender Systems. The goal is to understand and model Web Information and to design and evaluate some of the major technologies operating in the area of Web Recommender Systems. Through applied projects, the course aims to stimulate and prepare students for their MSc thesis work. Content in detail: Basics of Recommender Systems (collaborative filtering and content based); Evaluation of Recommender Systems; Advanced Recommender Systems (knowledge-based, ensembled based, hybrid); Exploiting additional sources of information for recommendation, e.g., context, location and time.",Knowledge: The basic models to develop a Web Recommender System Techniques to exploy different sources of information in recommendation Different criteria for the evaluation of Recommender Systems Skills: Students should be able to transfer the above knowledge to real-world tasks by: Designing appropriate strategies to develop Web Recommender Systems Planning and carrying out appropriate evaluation Diagnosing problems in standard Web Recommender Systems Designing and calibrating solutions appropriate for expected usage loads Competences: Explain basic principles and properties of Recommender Systems to both laymen and specialists Use standard procedures and practices when designing or implementing Web Recommender Systems Present evaluation analyses and results so that a technically qualified person can follow and obtain similar findings,"The literature consists of seminal research and review articles from central journals and selected papers from peer-reviewed conferences, textbooks and research reports. This is supplemented with practical experience gained through lab sessions. See Absalon for a list of literature.","It is expected that students know how to program and have a working knowledge of Machine Learning that can be obtained by any undergraduate course in Machine Learning. Examples of libraries that will be used at the labs: numpy, pandas, scikit-learn, matplotlib and other ML python libraries. Academic qualifications equivalent to a BSc degree is recommended.","The course will use a combination of lectures (2 hours per week) and lab sessions (2 hours per week). Lectures and labs might include discussions, group activities, and student presentations. Where possible, relevant guest lecturers will be involved. Students will carry-out a project which consists of both practical exercises (implementing state of the art solutions) and theoretical questions (to reflect on the course content in relation to the project). The project will cover the main topics presented during the lectures.","{'Lectures': 32, 'Preparation': 80, 'Project work': 71, 'Exam Preparation': 22, 'Exam': 1, 'Total': 206}",Oral Feedback by final exam (In addition to the grade),"Self Service at KUnet As an exchange, guest and credit student - click here! Continuing Education - click here! PhD’s can register for MSc-course by following the same procedure as credit-students, see link above.","<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Credit</dt><dd>7,5 ECTS</dd><dt>Type of assessment</dt><dd><div>Oral exam on basis of previous submission, 20
minutes</div></dd><dt>Type of assessment details</dt><dd>Specifically, the exam consists of two parts:
<br/><br/>
1. An individual report based on the project (written assignment).
<br/>
2. An individual oral examination (without preparation) based on
the report and project
<br/><br/>
The written and oral examination are not weighted, why only one
overall assessment is provided for the two parts of the exam.</dd><dt>Aid</dt><dd>All aids allowed</dd><dt>Marking scale</dt><dd>7-point grading scale</dd><dt>Censorship form</dt><dd>No external censorship 
<div>Several internal examiners</div></dd><dt>Re-exam</dt><dd><p>Same as the ordinary exam.</p><p>For the re-exam the student must complete a new project and
submit a new report. The deadline for submitting the new report
will be published in Absalon.</p><p>Additionally the 20-minutes oral examination without
preparation will be administered covering the full course
syllabus.</p><p>The written and oral examination are not weighted, why only one
overall assessment is provided for the two parts of the exam.</p><p>It is not possible to reuse parts of the exam at a later
exam.</p></dd></dl><h5 class=""panel-title"">Criteria for exam assesment</h5><div><p>See Learning Outcome</p></div></div>",English,NDAK22003U,"7,5 ECTS",Full Degree Master,1 block,Block 3,B2,No limitation – unless you register in the late-registration period (BSc and MSc) or as a credit or single subject student.,['Study Board of Mathematics and Computer Science'],['Department of Computer Science'],['Faculty of Science'],['Maria Maistro (2-7373466a6f34717b346a71)'],Saved on the 01-05-2024
https://kurser.ku.dk/course/ndab20005u/2024-2025,NDAB20005U Økonometri A (ØkA),Årgang 2024/2025,Bacheloruddannelsen i datalogi-økonomi,"Økonometri A gennemgår den multiple lineær regressionsmodel for primært tværsnitsdata, men kurset behandler også paneldata. Estimationsmetoden Ordinary Least Squares (OLS) introduceres og statistiske egenskaber som middelrethed, konsistens og asymptotisk normalitet af OLS diskuteres i detaljer. Hypotesetest af populationsparametre præsenteres, såvel som generelle test af misspecifikation. Avancerede emner som Instrumental Variables (IV) estimation, og paneldata metoder introduceres også i kurset med henblik på at estimere kausalitet. Kurset lægger vægt på, at de studerende selv får mulighed for at udføre regressionsanalyser i praksis; både ved hjælp af forprogrammerede rutiner i statistiske programpakker såsom STATA og ved brug af et matrixprogrammeringssprog, hvor der skabes en en-til-en sammenhæng mellem computerkode og de teoretiske ligninger i lærebogen. En vigtig del af kurset er derfor øvelsestimerne, hvori de studerende vil udarbejde selvstændige empiriske analyser og udvikle computerkode som implementerer de økonometriske metoder, som anvendes i kurset.","Viden om Den multiple lineære regressionsmodel. De mest centrale antagelser i regressionsanalyse, samt hvordan disse påvirker de estimerede parameterværdier. Forudsætninger for kausal fortolkning af parameterværdierne. Statistisk inferens i den lineære regressionsmodel. Fortolkningen af parametre for kontinuerte, diskrete og transformerede variable i en regressionsmodel. Færdigheder i at Udføre deskriptive analyser af datasæt med henblik på anvendelse i regressionsanalyse. Udlede simple estimatorer samt karakterisere deres statistiske egenskaber i form af middelrethed, konsistent og efficiens. Udføre og implementere følgende estimationsmetoder: Ordinary Least Squares (OLS), Weighted Least Squares (WLS), Generalized Least Squares (GLS), Instrumental Variables (IV), Differences-in-Differences (DD), First Differences (FD), Fixed Effect (FE) og Random Effects (RE). Beregne og fortolke t-test, F-tests, LM-tests, og Wald-test for hypotesetest af parameterrestriktioner i den lineær regressionsmodel for både homoskedastiske samt heteroskedastiske fejlled. Redegøre for fortolkningen af parametre for kontinuerte, diskrete og transformerede variable i en regressionsmodel. Udføre test for misspecifikation (heteroskedasticitet, funktionel form, eksogenitet) og redegøre for deres fortolkning. Anvende simulationseksperimenter til at illustrere og efterprøve egenskaber for statistiske estimatorer og test. Anvende givne parameterestimater i en konkret beregning på en økonomisk problemstilling og redegøre for resultaterne. Udvikle computerkode som implementerer de økonometriske metoder, som anvendes i kurset. Kompetencer til at Planlægge og gennemføre en empirisk analyse af et selvstændigt udvalgt emne med udgangspunkt i de gennemgåede økonometriske metoder. Anvende økonometriske metoder til at vurdere og vælge mellem økonomiske teorier og på den måde skabe selvstændig og evidensbaseret viden. Anvende fundne parameterestimater i en konkret beregning på en økonomisk problemstilling.",Se Absalon.,"Deltagelse i kurset forudsætter viden om grundlæggende statistisk metode og sandsynlighedsteori svarende til indholdet af faget ""Grundlæggende Sandsynlighedsteori og Statistik"". Der anvendes matematiske forudsætninger fra MatIntro og LinAlgDat, herunder matrixregning.","Pensum vil primært blive gennemgået ved forelæsningerne. I holdtimer arbejdes der både med teoriopgaver, simuleringseksperimenter og anvendt økonometrisk analyse baseret på faktiske datasæt. Statistisk software til regressionsanalyse vil blive introduceret i forbindelse med holdundervisningen, som også træner skriftlig formidling af resultaterne. Det sker i form af opsummeringer som fx sammenfatter resultaterne af en empirisk analyse eller diskuterer problemerne ved en bestemt økonometrisk model. Den studerende skal løbende aflevere obligatoriske hjemmeopgaver til holdunderviserne og til de angivne frister. Opgaverne vil efterfølgende blive gennemgået og diskuteret på holdene.","{'Forelæsninger': 44, 'Holdundervisning': 38, 'Forberedelse (anslået)': 116, 'Eksamen': 8, 'I alt': 206}",Mundtlig Kollektiv Løbende feedback i undervisningsforløbet,Selvbetjeningen på KUnet Som meritstuderende - klik her! Som enkeltfags-studerende (efter- og videreuddannelse) - klik her!,"<div aria-labelledby=""accordion-exam1"" class=""collapse"" id=""course-exams1""><dl class=""dl-horizontal""><dt>Point</dt><dd>7,5 ECTS</dd><dt>Prøveform</dt><dd><div>Skriftlig aflevering, 12 timers</div></dd><dt>Prøveformsdetaljer</dt><dd>Tag-hjem-opgave til den ordinære eksamen, som kan besvares
individuelt eller i grupper af op til 3 studerende.</dd><dt>Krav til indstilling til eksamen</dt><dd><p>3 ud af 3 obligatoriske afleveringsopgaver skal
være godkendt for at den studerende kan deltage i
eksamen.</p><p> </p></dd><dt>Hjælpemidler</dt><dd>Kun visse hjælpemidler tilladt 
<div><ul><li>Til den skriftlige ordinære eksamen er alle hjælpemidler
tilladt.</li><li>Til den mundtlige reeksamination er ingen hjælpemidler
tilladt.</li><li>Det er tilladt at bruge GitHub Copilot og lignende AI-baserede
programmeringsværktøjer specifikt til programmering. Den endelige
liste over tilladte AI-værktøjer vil blive annonceret på
Absalon.</li></ul></div></dd><dt>Bedømmelsesform</dt><dd>7-trins skala</dd><dt>Censurform</dt><dd>Ingen ekstern censur 
<div>Flere interne bedømmere</div></dd><dt>Reeksamen</dt><dd><p>30 minutters mundtlig eksamen (inklusiv bedømmelse) uden
forberedelse.</p><p>Hvis den studerende ikke er kvalificeret til ordinær eksamen kan
kvalifikation til reeksamen opnås ved aflevering og godkendelse af
de obligatoriske afleveringsopgaver tre uger inden
reeksamen.</p></dd></dl><h5 class=""panel-title"">Kriterier for bedømmelse</h5><div><p>Se målbeskrivelsen</p></div></div>",,,,,,,,,,,,,Gemt den 15-04-2024
